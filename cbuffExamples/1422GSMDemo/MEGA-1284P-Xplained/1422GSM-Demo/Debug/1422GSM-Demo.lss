
1422GSM-Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002cc  00800100  00002c64  00002d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c64  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000191  008003cc  008003cc  00002fe4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000006cc  00000000  00000000  00002fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000085  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001a0  00000000  00000000  00003739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006cb  00000000  00000000  000038d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002f7b  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001147  00000000  00000000  00006f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002883  00000000  00000000  00008066  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000440  00000000  00000000  0000a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d8f  00000000  00000000  0000ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000b31  00000000  00000000  0000babb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000686  00000000  00000000  0000c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  0000cc72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_13>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_28>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_30>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	2e 0a       	sbc	r2, r30
      8e:	47 0a       	sbc	r4, r23
      90:	5c 0a       	sbc	r5, r28
      92:	71 0a       	sbc	r7, r17
      94:	86 0a       	sbc	r8, r22
      96:	9b 0a       	sbc	r9, r27
      98:	b0 0a       	sbc	r11, r16
      9a:	c5 0a       	sbc	r12, r21
      9c:	da 0a       	sbc	r13, r26
      9e:	ef 0a       	sbc	r14, r31
      a0:	36 0b       	sbc	r19, r22
      a2:	4b 0b       	sbc	r20, r27
      a4:	60 0b       	sbc	r22, r16
      a6:	84 0b       	sbc	r24, r20
      a8:	99 0b       	sbc	r25, r25
      aa:	ef 0b       	sbc	r30, r31
      ac:	04 0c       	add	r0, r4
      ae:	19 0c       	add	r1, r9
      b0:	2e 0c       	add	r2, r14
      b2:	83 0c       	add	r8, r3
      b4:	98 0c       	add	r9, r8
      b6:	ad 0c       	add	r10, r13
      b8:	e7 0c       	add	r14, r7
      ba:	fc 0c       	add	r15, r12
      bc:	48 0d       	add	r20, r8
      be:	5d 0d       	add	r21, r13
      c0:	72 0d       	add	r23, r2
      c2:	87 0d       	add	r24, r7
      c4:	9c 0d       	add	r25, r12
      c6:	b1 0d       	add	r27, r1
      c8:	c6 0d       	add	r28, r6
      ca:	db 0d       	add	r29, r11
      cc:	f0 0d       	add	r31, r0
      ce:	0d 0e       	add	r0, r29
      d0:	22 0e       	add	r2, r18
      d2:	37 0e       	add	r3, r23
      d4:	54 0e       	add	r5, r20
      d6:	69 0e       	add	r6, r25

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e0       	ldi	r17, 0x03	; 3
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	e4 e6       	ldi	r30, 0x64	; 100
      ec:	fc e2       	ldi	r31, 0x2C	; 44
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ac 3c       	cpi	r26, 0xCC	; 204
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	15 e0       	ldi	r17, 0x05	; 5
     100:	ac ec       	ldi	r26, 0xCC	; 204
     102:	b3 e0       	ldi	r27, 0x03	; 3
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ad 35       	cpi	r26, 0x5D	; 93
     10a:	b1 07       	cpc	r27, r17
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 ca 06 	call	0xd94	; 0xd94 <main>
     112:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <cbuffInit>:
* \note
* -# Must be called before using any functions in the CBUFF module
*
*******************************************************************************/
void cbuffInit(void)
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
                                        /* Initialise the linked list pointer */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     122:	10 92 cd 03 	sts	0x03CD, r1
     126:	10 92 cc 03 	sts	0x03CC, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     12a:	10 92 cf 03 	sts	0x03CF, r1
     12e:	10 92 ce 03 	sts	0x03CE, r1
}
     132:	cf 91       	pop	r28
     134:	df 91       	pop	r29
     136:	08 95       	ret

00000138 <cbuffDeinit>:
* - The content of any buffers will remain in memory after this function is
*   called. If you have any data there that you don't want other to see, ensure
*   that you clear the buffer's contents before deinitialising this module.
*******************************************************************************/
void cbuffDeinit(void)
{
     138:	df 93       	push	r29
     13a:	cf 93       	push	r28
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
                                        /* Clear the linked list pointer      */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     140:	10 92 cd 03 	sts	0x03CD, r1
     144:	10 92 cc 03 	sts	0x03CC, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     148:	10 92 cf 03 	sts	0x03CF, r1
     14c:	10 92 ce 03 	sts	0x03CE, r1
}
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <cbuffCreate>:
*    greater to be useful. This will, however, not be checked by this function.
*******************************************************************************/
CBUFFNUM   cbuffCreate(CBUFF        * buffer,
                       unsigned int   sizeOfBuffer,
                       CBUFFOBJ     * newCircBufferObj)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	2a 97       	sbiw	r28, 0x0a	; 10
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	9e 83       	std	Y+6, r25	; 0x06
     16c:	8d 83       	std	Y+5, r24	; 0x05
     16e:	78 87       	std	Y+8, r23	; 0x08
     170:	6f 83       	std	Y+7, r22	; 0x07
     172:	5a 87       	std	Y+10, r21	; 0x0a
     174:	49 87       	std	Y+9, r20	; 0x09
    CBUFFOBJ * localCircBufferObj;
    CBUFFNUM circBuffNum = 0x0001;      /* Assign starting buffer number, 1,  */
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9a 83       	std	Y+2, r25	; 0x02
     17c:	89 83       	std	Y+1, r24	; 0x01
                                        /* next free buffer number            */
                                        /* 0 reserved for alloc failed!       */

                                        /* Ensure there is a buffer and it    */
                                        /* has size                           */
    if ((buffer != (unsigned char *) 0) && (sizeOfBuffer != 0))
     17e:	8d 81       	ldd	r24, Y+5	; 0x05
     180:	9e 81       	ldd	r25, Y+6	; 0x06
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	09 f4       	brne	.+2      	; 0x188 <cbuffCreate+0x32>
     186:	11 c1       	rjmp	.+546    	; 0x3aa <cbuffCreate+0x254>
     188:	8f 81       	ldd	r24, Y+7	; 0x07
     18a:	98 85       	ldd	r25, Y+8	; 0x08
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	09 f4       	brne	.+2      	; 0x192 <cbuffCreate+0x3c>
     190:	0c c1       	rjmp	.+536    	; 0x3aa <cbuffCreate+0x254>
    {
                                        /* Ensure we got somewhere to create  */
                                        /* our buffer object                  */
        if (newCircBufferObj != (CBUFFOBJ *) 0)
     192:	89 85       	ldd	r24, Y+9	; 0x09
     194:	9a 85       	ldd	r25, Y+10	; 0x0a
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	09 f4       	brne	.+2      	; 0x19c <cbuffCreate+0x46>
     19a:	07 c1       	rjmp	.+526    	; 0x3aa <cbuffCreate+0x254>
                                        /* Find place for buffer object in    */
                                        /* the linked list and assign number  */
                                        /* If there is nothing in the list,   */
                                        /* just put this object in the first  */
                                        /* position                           */
            if (activeCbuffObjs == 0 && startOfCbuffObjs == (CBUFFOBJ *) 0)
     19c:	80 91 ce 03 	lds	r24, 0x03CE
     1a0:	90 91 cf 03 	lds	r25, 0x03CF
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	09 f0       	breq	.+2      	; 0x1aa <cbuffCreate+0x54>
     1a8:	6e c0       	rjmp	.+220    	; 0x286 <cbuffCreate+0x130>
     1aa:	80 91 cc 03 	lds	r24, 0x03CC
     1ae:	90 91 cd 03 	lds	r25, 0x03CD
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <cbuffCreate+0x62>
     1b6:	67 c0       	rjmp	.+206    	; 0x286 <cbuffCreate+0x130>
            {
                                        /* Insert buffer object at start of   */
                                        /* list                               */
                startOfCbuffObjs = newCircBufferObj;
     1b8:	89 85       	ldd	r24, Y+9	; 0x09
     1ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     1bc:	90 93 cd 03 	sts	0x03CD, r25
     1c0:	80 93 cc 03 	sts	0x03CC, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     1c4:	80 91 cc 03 	lds	r24, 0x03CC
     1c8:	90 91 cd 03 	lds	r25, 0x03CD
     1cc:	2d 81       	ldd	r18, Y+5	; 0x05
     1ce:	3e 81       	ldd	r19, Y+6	; 0x06
     1d0:	fc 01       	movw	r30, r24
     1d2:	31 83       	std	Z+1, r19	; 0x01
     1d4:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     1d6:	80 91 cc 03 	lds	r24, 0x03CC
     1da:	90 91 cd 03 	lds	r25, 0x03CD
     1de:	2f 81       	ldd	r18, Y+7	; 0x07
     1e0:	38 85       	ldd	r19, Y+8	; 0x08
     1e2:	21 50       	subi	r18, 0x01	; 1
     1e4:	30 40       	sbci	r19, 0x00	; 0
     1e6:	4d 81       	ldd	r20, Y+5	; 0x05
     1e8:	5e 81       	ldd	r21, Y+6	; 0x06
     1ea:	24 0f       	add	r18, r20
     1ec:	35 1f       	adc	r19, r21
     1ee:	fc 01       	movw	r30, r24
     1f0:	33 83       	std	Z+3, r19	; 0x03
     1f2:	22 83       	std	Z+2, r18	; 0x02
                                              (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     1f4:	80 91 cc 03 	lds	r24, 0x03CC
     1f8:	90 91 cd 03 	lds	r25, 0x03CD
     1fc:	2d 81       	ldd	r18, Y+5	; 0x05
     1fe:	3e 81       	ldd	r19, Y+6	; 0x06
     200:	fc 01       	movw	r30, r24
     202:	35 83       	std	Z+5, r19	; 0x05
     204:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     206:	80 91 cc 03 	lds	r24, 0x03CC
     20a:	90 91 cd 03 	lds	r25, 0x03CD
     20e:	2d 81       	ldd	r18, Y+5	; 0x05
     210:	3e 81       	ldd	r19, Y+6	; 0x06
     212:	fc 01       	movw	r30, r24
     214:	37 83       	std	Z+7, r19	; 0x07
     216:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     218:	80 91 cc 03 	lds	r24, 0x03CC
     21c:	90 91 cd 03 	lds	r25, 0x03CD
     220:	fc 01       	movw	r30, r24
     222:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     224:	80 91 cc 03 	lds	r24, 0x03CC
     228:	90 91 cd 03 	lds	r25, 0x03CD
     22c:	20 91 cc 03 	lds	r18, 0x03CC
     230:	30 91 cd 03 	lds	r19, 0x03CD
     234:	f9 01       	movw	r30, r18
     236:	22 85       	ldd	r18, Z+10	; 0x0a
     238:	20 64       	ori	r18, 0x40	; 64
     23a:	fc 01       	movw	r30, r24
     23c:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to NULL            */
                startOfCbuffObjs->nextCircBufferObj = (CBUFFOBJ *) 0;
     23e:	80 91 cc 03 	lds	r24, 0x03CC
     242:	90 91 cd 03 	lds	r25, 0x03CD
     246:	fc 01       	movw	r30, r24
     248:	14 86       	std	Z+12, r1	; 0x0c
     24a:	13 86       	std	Z+11, r1	; 0x0b
                                        /* Assign it a number                 */
                activeCbuffObjs |= circBuffNum;
     24c:	20 91 ce 03 	lds	r18, 0x03CE
     250:	30 91 cf 03 	lds	r19, 0x03CF
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	82 2b       	or	r24, r18
     25a:	93 2b       	or	r25, r19
     25c:	90 93 cf 03 	sts	0x03CF, r25
     260:	80 93 ce 03 	sts	0x03CE, r24
                startOfCbuffObjs->bufferNumber = circBuffNum;
     264:	80 91 cc 03 	lds	r24, 0x03CC
     268:	90 91 cd 03 	lds	r25, 0x03CD
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	3a 81       	ldd	r19, Y+2	; 0x02
     270:	fc 01       	movw	r30, r24
     272:	31 87       	std	Z+9, r19	; 0x09
     274:	20 87       	std	Z+8, r18	; 0x08
                                        /* Return buffer number               */
                return startOfCbuffObjs->bufferNumber;
     276:	80 91 cc 03 	lds	r24, 0x03CC
     27a:	90 91 cd 03 	lds	r25, 0x03CD
     27e:	fc 01       	movw	r30, r24
     280:	80 85       	ldd	r24, Z+8	; 0x08
     282:	91 85       	ldd	r25, Z+9	; 0x09
     284:	94 c0       	rjmp	.+296    	; 0x3ae <cbuffCreate+0x258>
            }
                                        /* Otherwise, if we haven't allocated */
                                        /* all the cbuff objects we can       */
                                        /* support, insert another            */
            else if (activeCbuffObjs != 0xFFFF)
     286:	80 91 ce 03 	lds	r24, 0x03CE
     28a:	90 91 cf 03 	lds	r25, 0x03CF
     28e:	ff ef       	ldi	r31, 0xFF	; 255
     290:	8f 3f       	cpi	r24, 0xFF	; 255
     292:	9f 07       	cpc	r25, r31
     294:	09 f4       	brne	.+2      	; 0x298 <cbuffCreate+0x142>
     296:	89 c0       	rjmp	.+274    	; 0x3aa <cbuffCreate+0x254>
            {
                                        /* Insert this object at the start of */
                                        /* the list                           */
                localCircBufferObj = startOfCbuffObjs;
     298:	80 91 cc 03 	lds	r24, 0x03CC
     29c:	90 91 cd 03 	lds	r25, 0x03CD
     2a0:	9c 83       	std	Y+4, r25	; 0x04
     2a2:	8b 83       	std	Y+3, r24	; 0x03
                startOfCbuffObjs = newCircBufferObj;
     2a4:	89 85       	ldd	r24, Y+9	; 0x09
     2a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2a8:	90 93 cd 03 	sts	0x03CD, r25
     2ac:	80 93 cc 03 	sts	0x03CC, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     2b0:	80 91 cc 03 	lds	r24, 0x03CC
     2b4:	90 91 cd 03 	lds	r25, 0x03CD
     2b8:	2d 81       	ldd	r18, Y+5	; 0x05
     2ba:	3e 81       	ldd	r19, Y+6	; 0x06
     2bc:	fc 01       	movw	r30, r24
     2be:	31 83       	std	Z+1, r19	; 0x01
     2c0:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     2c2:	80 91 cc 03 	lds	r24, 0x03CC
     2c6:	90 91 cd 03 	lds	r25, 0x03CD
     2ca:	2f 81       	ldd	r18, Y+7	; 0x07
     2cc:	38 85       	ldd	r19, Y+8	; 0x08
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	4d 81       	ldd	r20, Y+5	; 0x05
     2d4:	5e 81       	ldd	r21, Y+6	; 0x06
     2d6:	24 0f       	add	r18, r20
     2d8:	35 1f       	adc	r19, r21
     2da:	fc 01       	movw	r30, r24
     2dc:	33 83       	std	Z+3, r19	; 0x03
     2de:	22 83       	std	Z+2, r18	; 0x02
                                                  (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     2e0:	80 91 cc 03 	lds	r24, 0x03CC
     2e4:	90 91 cd 03 	lds	r25, 0x03CD
     2e8:	2d 81       	ldd	r18, Y+5	; 0x05
     2ea:	3e 81       	ldd	r19, Y+6	; 0x06
     2ec:	fc 01       	movw	r30, r24
     2ee:	35 83       	std	Z+5, r19	; 0x05
     2f0:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     2f2:	80 91 cc 03 	lds	r24, 0x03CC
     2f6:	90 91 cd 03 	lds	r25, 0x03CD
     2fa:	2d 81       	ldd	r18, Y+5	; 0x05
     2fc:	3e 81       	ldd	r19, Y+6	; 0x06
     2fe:	fc 01       	movw	r30, r24
     300:	37 83       	std	Z+7, r19	; 0x07
     302:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     304:	80 91 cc 03 	lds	r24, 0x03CC
     308:	90 91 cd 03 	lds	r25, 0x03CD
     30c:	fc 01       	movw	r30, r24
     30e:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     310:	80 91 cc 03 	lds	r24, 0x03CC
     314:	90 91 cd 03 	lds	r25, 0x03CD
     318:	20 91 cc 03 	lds	r18, 0x03CC
     31c:	30 91 cd 03 	lds	r19, 0x03CD
     320:	f9 01       	movw	r30, r18
     322:	22 85       	ldd	r18, Z+10	; 0x0a
     324:	20 64       	ori	r18, 0x40	; 64
     326:	fc 01       	movw	r30, r24
     328:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to next buffer     */
                                        /* object                             */
                startOfCbuffObjs->nextCircBufferObj = localCircBufferObj;
     32a:	80 91 cc 03 	lds	r24, 0x03CC
     32e:	90 91 cd 03 	lds	r25, 0x03CD
     332:	2b 81       	ldd	r18, Y+3	; 0x03
     334:	3c 81       	ldd	r19, Y+4	; 0x04
     336:	fc 01       	movw	r30, r24
     338:	34 87       	std	Z+12, r19	; 0x0c
     33a:	23 87       	std	Z+11, r18	; 0x0b
                                        /* Find a free cbuff number for this  */
                                        /* buffer                             */
                                        /* Cbuff Number '1' is assigned, so   */
                                        /* start looking from '2' for a free  */
                                        /* number                             */
                circBuffNum <<= 1;
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	9a 81       	ldd	r25, Y+2	; 0x02
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	89 83       	std	Y+1, r24	; 0x01
                
                do
                {
                    if (!(activeCbuffObjs & circBuffNum))
     348:	20 91 ce 03 	lds	r18, 0x03CE
     34c:	30 91 cf 03 	lds	r19, 0x03CF
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	82 23       	and	r24, r18
     356:	93 23       	and	r25, r19
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	e9 f4       	brne	.+58     	; 0x396 <cbuffCreate+0x240>
                    {
                                        /* Assign the buffer number           */
                        activeCbuffObjs |= circBuffNum;
     35c:	20 91 ce 03 	lds	r18, 0x03CE
     360:	30 91 cf 03 	lds	r19, 0x03CF
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	82 2b       	or	r24, r18
     36a:	93 2b       	or	r25, r19
     36c:	90 93 cf 03 	sts	0x03CF, r25
     370:	80 93 ce 03 	sts	0x03CE, r24
                        startOfCbuffObjs->bufferNumber = circBuffNum;
     374:	80 91 cc 03 	lds	r24, 0x03CC
     378:	90 91 cd 03 	lds	r25, 0x03CD
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	3a 81       	ldd	r19, Y+2	; 0x02
     380:	fc 01       	movw	r30, r24
     382:	31 87       	std	Z+9, r19	; 0x09
     384:	20 87       	std	Z+8, r18	; 0x08
                        return startOfCbuffObjs->bufferNumber;
     386:	80 91 cc 03 	lds	r24, 0x03CC
     38a:	90 91 cd 03 	lds	r25, 0x03CD
     38e:	fc 01       	movw	r30, r24
     390:	80 85       	ldd	r24, Z+8	; 0x08
     392:	91 85       	ldd	r25, Z+9	; 0x09
     394:	0c c0       	rjmp	.+24     	; 0x3ae <cbuffCreate+0x258>
                    }
                                        /* That wasn't free; try next bit     */
                    circBuffNum <<= 1;
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
                                        /* Mask just in case unsigned int is  */
                                        /* bigger than 16-bits                */
                    circBuffNum &= 0xFFFF;
                } while(circBuffNum != 0x0000);
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	9a 81       	ldd	r25, Y+2	; 0x02
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	79 f6       	brne	.-98     	; 0x348 <cbuffCreate+0x1f2>
            }
        }
	}
                                        /* If buffer allocation failed,       */
                                        /* return 0 to callee                 */
    return 0;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
}
     3ae:	2a 96       	adiw	r28, 0x0a	; 10
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	cf 91       	pop	r28
     3bc:	df 91       	pop	r29
     3be:	08 95       	ret

000003c0 <cbuffDestroy>:
* -# Destroying a buffer object does not delete the buffer's content, nor free
*   the associated CBUFFOBJ memory used
* -# An open buffer cannot be destroyed. Such a case returns a FAIL
*******************************************************************************/
unsigned char cbuffDestroy(CBUFFNUM bufferNumber)
{
     3c0:	df 93       	push	r29
     3c2:	cf 93       	push	r28
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <cbuffDestroy+0x6>
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <cbuffDestroy+0x8>
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <cbuffDestroy+0xa>
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	9e 83       	std	Y+6, r25	; 0x06
     3d0:	8d 83       	std	Y+5, r24	; 0x05
    CBUFFOBJ * localCircBufferObj;
    CBUFFOBJ * previousCircBufferObj;
                                        /* Make sure there is something to    */
                                        /* remove                             */
    if (startOfCbuffObjs != (CBUFFOBJ *) 0)
     3d2:	80 91 cc 03 	lds	r24, 0x03CC
     3d6:	90 91 cd 03 	lds	r25, 0x03CD
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <cbuffDestroy+0x20>
     3de:	75 c0       	rjmp	.+234    	; 0x4ca <cbuffDestroy+0x10a>
    {
                                        /* Check if first object is the one   */
                                        /* we are looking for                 */
        if (startOfCbuffObjs->bufferNumber == bufferNumber)
     3e0:	80 91 cc 03 	lds	r24, 0x03CC
     3e4:	90 91 cd 03 	lds	r25, 0x03CD
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 85       	ldd	r18, Z+8	; 0x08
     3ec:	31 85       	ldd	r19, Z+9	; 0x09
     3ee:	8d 81       	ldd	r24, Y+5	; 0x05
     3f0:	9e 81       	ldd	r25, Y+6	; 0x06
     3f2:	28 17       	cp	r18, r24
     3f4:	39 07       	cpc	r19, r25
     3f6:	e1 f4       	brne	.+56     	; 0x430 <cbuffDestroy+0x70>
        {
                                        /* Copy where this object is pointing */
                                        /* to into startOfCbuffObjs           */
            startOfCbuffObjs = startOfCbuffObjs->nextCircBufferObj;
     3f8:	80 91 cc 03 	lds	r24, 0x03CC
     3fc:	90 91 cd 03 	lds	r25, 0x03CD
     400:	fc 01       	movw	r30, r24
     402:	83 85       	ldd	r24, Z+11	; 0x0b
     404:	94 85       	ldd	r25, Z+12	; 0x0c
     406:	90 93 cd 03 	sts	0x03CD, r25
     40a:	80 93 cc 03 	sts	0x03CC, r24
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
            activeCbuffObjs &= ~bufferNumber;
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	9e 81       	ldd	r25, Y+6	; 0x06
     412:	9c 01       	movw	r18, r24
     414:	20 95       	com	r18
     416:	30 95       	com	r19
     418:	80 91 ce 03 	lds	r24, 0x03CE
     41c:	90 91 cf 03 	lds	r25, 0x03CF
     420:	82 23       	and	r24, r18
     422:	93 23       	and	r25, r19
     424:	90 93 cf 03 	sts	0x03CF, r25
     428:	80 93 ce 03 	sts	0x03CE, r24
                                        /* Destroyed the desired object       */
            return CBUFF_DESTROY_OK;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	4e c0       	rjmp	.+156    	; 0x4cc <cbuffDestroy+0x10c>
        }
                                        /* Otherwise loop through all objects */
                                        /* if there are some                  */
        else if (startOfCbuffObjs->nextCircBufferObj != (CBUFFOBJ *) 0)
     430:	80 91 cc 03 	lds	r24, 0x03CC
     434:	90 91 cd 03 	lds	r25, 0x03CD
     438:	fc 01       	movw	r30, r24
     43a:	83 85       	ldd	r24, Z+11	; 0x0b
     43c:	94 85       	ldd	r25, Z+12	; 0x0c
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	09 f4       	brne	.+2      	; 0x444 <cbuffDestroy+0x84>
     442:	43 c0       	rjmp	.+134    	; 0x4ca <cbuffDestroy+0x10a>
        {
                                        /* Keep a copy of previous object     */
                                        /* pointer                            */
            previousCircBufferObj = startOfCbuffObjs;
     444:	80 91 cc 03 	lds	r24, 0x03CC
     448:	90 91 cd 03 	lds	r25, 0x03CD
     44c:	9c 83       	std	Y+4, r25	; 0x04
     44e:	8b 83       	std	Y+3, r24	; 0x03
                                        /* Get next object in the list        */
            localCircBufferObj = startOfCbuffObjs->nextCircBufferObj;
     450:	80 91 cc 03 	lds	r24, 0x03CC
     454:	90 91 cd 03 	lds	r25, 0x03CD
     458:	fc 01       	movw	r30, r24
     45a:	83 85       	ldd	r24, Z+11	; 0x0b
     45c:	94 85       	ldd	r25, Z+12	; 0x0c
     45e:	9a 83       	std	Y+2, r25	; 0x02
     460:	89 83       	std	Y+1, r24	; 0x01
                                        /* Loop through each item and check   */
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	fc 01       	movw	r30, r24
     468:	20 85       	ldd	r18, Z+8	; 0x08
     46a:	31 85       	ldd	r19, Z+9	; 0x09
     46c:	8d 81       	ldd	r24, Y+5	; 0x05
     46e:	9e 81       	ldd	r25, Y+6	; 0x06
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	d9 f4       	brne	.+54     	; 0x4ac <cbuffDestroy+0xec>
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
                                          localCircBufferObj->nextCircBufferObj;
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	23 85       	ldd	r18, Z+11	; 0x0b
     47e:	34 85       	ldd	r19, Z+12	; 0x0c
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
     480:	8b 81       	ldd	r24, Y+3	; 0x03
     482:	9c 81       	ldd	r25, Y+4	; 0x04
     484:	fc 01       	movw	r30, r24
     486:	34 87       	std	Z+12, r19	; 0x0c
     488:	23 87       	std	Z+11, r18	; 0x0b
                                          localCircBufferObj->nextCircBufferObj;
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
                    activeCbuffObjs &= ~bufferNumber;
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	9c 01       	movw	r18, r24
     490:	20 95       	com	r18
     492:	30 95       	com	r19
     494:	80 91 ce 03 	lds	r24, 0x03CE
     498:	90 91 cf 03 	lds	r25, 0x03CF
     49c:	82 23       	and	r24, r18
     49e:	93 23       	and	r25, r19
     4a0:	90 93 cf 03 	sts	0x03CF, r25
     4a4:	80 93 ce 03 	sts	0x03CE, r24
                                        /* Destroyed the desired object       */
                    return CBUFF_DESTROY_OK;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	10 c0       	rjmp	.+32     	; 0x4cc <cbuffDestroy+0x10c>
                }
                else
                {
                                        /* That wasn't it                     */
                                        /* Move to next object in the list    */
                    previousCircBufferObj = localCircBufferObj;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	9c 83       	std	Y+4, r25	; 0x04
     4b2:	8b 83       	std	Y+3, r24	; 0x03
                    localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	fc 01       	movw	r30, r24
     4ba:	83 85       	ldd	r24, Z+11	; 0x0b
     4bc:	94 85       	ldd	r25, Z+12	; 0x0c
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
                }
            } while (localCircBufferObj != (CBUFFOBJ *) 0);
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	61 f6       	brne	.-104    	; 0x462 <cbuffDestroy+0xa2>
        }
        
    }
                                        /* Couldn't find the desired object   */
    return CBUFF_DESTROY_FAIL;
     4ca:	80 e0       	ldi	r24, 0x00	; 0
}
     4cc:	26 96       	adiw	r28, 0x06	; 6
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	cf 91       	pop	r28
     4da:	df 91       	pop	r29
     4dc:	08 95       	ret

000004de <cbuffOpen>:
* \note
* -# Caller must have created (cbuffCreate()) at least one circular buffer
*    object before calling this function
*******************************************************************************/
HCBUFF cbuffOpen(CBUFFNUM bufferNumber)
{
     4de:	df 93       	push	r29
     4e0:	cf 93       	push	r28
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <cbuffOpen+0x6>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <cbuffOpen+0x8>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	9c 83       	std	Y+4, r25	; 0x04
     4ec:	8b 83       	std	Y+3, r24	; 0x03
	CBUFFOBJ * localCircBufferObj;

                                        /* Check that a CBUFFNUM object    */
                                        /* exists with bufferNumber           */
    localCircBufferObj = startOfCbuffObjs;
     4ee:	80 91 cc 03 	lds	r24, 0x03CC
     4f2:	90 91 cd 03 	lds	r25, 0x03CD
     4f6:	9a 83       	std	Y+2, r25	; 0x02
     4f8:	89 83       	std	Y+1, r24	; 0x01

    do
    {
	    if (localCircBufferObj->bufferNumber == bufferNumber)
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	fc 01       	movw	r30, r24
     500:	20 85       	ldd	r18, Z+8	; 0x08
     502:	31 85       	ldd	r19, Z+9	; 0x09
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	28 17       	cp	r18, r24
     50a:	39 07       	cpc	r19, r25
     50c:	d1 f4       	brne	.+52     	; 0x542 <cbuffOpen+0x64>
	    {
    	                                /* Check buffer is not already open   */
            if (!(localCircBufferObj->localFlag & CBUFF_OPEN))
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	82 85       	ldd	r24, Z+10	; 0x0a
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	80 72       	andi	r24, 0x20	; 32
     51c:	90 70       	andi	r25, 0x00	; 0
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	69 f4       	brne	.+26     	; 0x53c <cbuffOpen+0x5e>
            {
                                        /* Note that it is now in use         */
                localCircBufferObj->localFlag |= CBUFF_OPEN;
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	fc 01       	movw	r30, r24
     528:	82 85       	ldd	r24, Z+10	; 0x0a
     52a:	28 2f       	mov	r18, r24
     52c:	20 62       	ori	r18, 0x20	; 32
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	fc 01       	movw	r30, r24
     534:	22 87       	std	Z+10, r18	; 0x0a
    	                                /* Return handle to it                */
    	        return localCircBufferObj;
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	10 c0       	rjmp	.+32     	; 0x55c <cbuffOpen+0x7e>
    	    }
    	                                /* If buffer is already open, return  */
    	                                /* NULL handle pointer                */
    	    else
    	    {
        	    return (CBUFFOBJ *) 0;
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0d c0       	rjmp	.+26     	; 0x55c <cbuffOpen+0x7e>
        	}
    	}
    	else
    	{
        	localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	fc 01       	movw	r30, r24
     548:	83 85       	ldd	r24, Z+11	; 0x0b
     54a:	94 85       	ldd	r25, Z+12	; 0x0c
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
        }
	} while (localCircBufferObj != (CBUFFOBJ *) 0);
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	89 f6       	brne	.-94     	; 0x4fa <cbuffOpen+0x1c>

    	                                /* Return handle to NULL otherwise    */
    return (CBUFFOBJ *) 0;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <cbuffClose>:
* \note
* -# Caller must have 'allocated' and opened at least one circular buffer object
*    before calling this function
*******************************************************************************/
CBUFFNUM cbuffClose(HCBUFF hCircBuffer)
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <cbuffClose+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	9a 83       	std	Y+2, r25	; 0x02
     576:	89 83       	std	Y+1, r24	; 0x01
    	                                /* Check buffer is actually open      */
    if (hCircBuffer->localFlag & CBUFF_OPEN)
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	fc 01       	movw	r30, r24
     57e:	82 85       	ldd	r24, Z+10	; 0x0a
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	80 72       	andi	r24, 0x20	; 32
     586:	90 70       	andi	r25, 0x00	; 0
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	81 f0       	breq	.+32     	; 0x5ac <cbuffClose+0x42>
    {
    	                                /* Note that this buffer object is    */
    	                                /* closed                             */
        hCircBuffer->localFlag &= ~CBUFF_OPEN;
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	fc 01       	movw	r30, r24
     592:	82 85       	ldd	r24, Z+10	; 0x0a
     594:	28 2f       	mov	r18, r24
     596:	2f 7d       	andi	r18, 0xDF	; 223
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	fc 01       	movw	r30, r24
     59e:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Return buffer object's buffer      */
                                        /* number                             */
        return hCircBuffer->bufferNumber;
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 85       	ldd	r24, Z+8	; 0x08
     5a8:	91 85       	ldd	r25, Z+9	; 0x09
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <cbuffClose+0x46>
    }
                                        /* Otherwise return 0 to say that     */
                                        /* buffer object wasn't open          */
    else
    {
        return (CBUFFNUM) 0;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	08 95       	ret

000005ba <cbuffPutByte>:
* -# cbuffOpen() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned char cbuffPutByte(HCBUFF hCircBuffer,
                           CBUFF  data)
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <cbuffPutByte+0x6>
     5c0:	0f 92       	push	r0
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
     5ca:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	fc 01       	movw	r30, r24
     5d2:	82 85       	ldd	r24, Z+10	; 0x0a
     5d4:	88 23       	and	r24, r24
     5d6:	14 f4       	brge	.+4      	; 0x5dc <cbuffPutByte+0x22>
    {
        return CBUFF_PUT_FAIL;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	4e c0       	rjmp	.+156    	; 0x678 <cbuffPutByte+0xbe>
    }

    *hCircBuffer->inPointer = data;     /* Put data in buffer                 */
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	fc 01       	movw	r30, r24
     5e2:	84 81       	ldd	r24, Z+4	; 0x04
     5e4:	95 81       	ldd	r25, Z+5	; 0x05
     5e6:	2b 81       	ldd	r18, Y+3	; 0x03
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18

    hCircBuffer->inPointer++;           /* Increment pointer                  */
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	9a 81       	ldd	r25, Y+2	; 0x02
     5f0:	fc 01       	movw	r30, r24
     5f2:	84 81       	ldd	r24, Z+4	; 0x04
     5f4:	95 81       	ldd	r25, Z+5	; 0x05
     5f6:	9c 01       	movw	r18, r24
     5f8:	2f 5f       	subi	r18, 0xFF	; 255
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	fc 01       	movw	r30, r24
     602:	35 83       	std	Z+5, r19	; 0x05
     604:	24 83       	std	Z+4, r18	; 0x04

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
    if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	fc 01       	movw	r30, r24
     60c:	24 81       	ldd	r18, Z+4	; 0x04
     60e:	35 81       	ldd	r19, Z+5	; 0x05
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	fc 01       	movw	r30, r24
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	82 17       	cp	r24, r18
     61c:	93 07       	cpc	r25, r19
     61e:	50 f4       	brcc	.+20     	; 0x634 <cbuffPutByte+0x7a>
    {
        hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	fc 01       	movw	r30, r24
     626:	20 81       	ld	r18, Z
     628:	31 81       	ldd	r19, Z+1	; 0x01
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	fc 01       	movw	r30, r24
     630:	35 83       	std	Z+5, r19	; 0x05
     632:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	fc 01       	movw	r30, r24
     63a:	24 81       	ldd	r18, Z+4	; 0x04
     63c:	35 81       	ldd	r19, Z+5	; 0x05
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	fc 01       	movw	r30, r24
     644:	86 81       	ldd	r24, Z+6	; 0x06
     646:	97 81       	ldd	r25, Z+7	; 0x07
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	51 f4       	brne	.+20     	; 0x662 <cbuffPutByte+0xa8>
    {
                                        /* Set CBUFF_FULL flag so that        */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
        hCircBuffer->localFlag |= CBUFF_FULL;
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	fc 01       	movw	r30, r24
     654:	82 85       	ldd	r24, Z+10	; 0x0a
     656:	28 2f       	mov	r18, r24
     658:	20 68       	ori	r18, 0x80	; 128
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	fc 01       	movw	r30, r24
     660:	22 87       	std	Z+10, r18	; 0x0a
    }

										/* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	fc 01       	movw	r30, r24
     668:	82 85       	ldd	r24, Z+10	; 0x0a
     66a:	28 2f       	mov	r18, r24
     66c:	2f 7b       	andi	r18, 0xBF	; 191
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	fc 01       	movw	r30, r24
     674:	22 87       	std	Z+10, r18	; 0x0a

    return CBUFF_PUT_OK;
     676:	81 e0       	ldi	r24, 0x01	; 1
}
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <cbuffGetSpace>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetSpace(HCBUFF hCircBuffer)
{
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	00 d0       	rcall	.+0      	; 0x68a <cbuffGetSpace+0x6>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
#endif

                                        /* If CBUFF_FULL is              */
                                        /* set, then there is no space in     */
                                        /* buffer; simply return 0            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	fc 01       	movw	r30, r24
     698:	82 85       	ldd	r24, Z+10	; 0x0a
     69a:	88 23       	and	r24, r24
     69c:	1c f4       	brge	.+6      	; 0x6a4 <cbuffGetSpace+0x20>
    {
        return 0;
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	5a c0       	rjmp	.+180    	; 0x758 <cbuffGetSpace+0xd4>
    }
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	fc 01       	movw	r30, r24
     6aa:	82 85       	ldd	r24, Z+10	; 0x0a
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	80 74       	andi	r24, 0x40	; 64
     6b2:	90 70       	andi	r25, 0x00	; 0
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	89 f0       	breq	.+34     	; 0x6da <cbuffGetSpace+0x56>
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	fc 01       	movw	r30, r24
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	93 81       	ldd	r25, Z+3	; 0x03
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	9c 01       	movw	r18, r24
                                hCircBuffer->startOfBuffer);
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     6d0:	a9 01       	movw	r20, r18
     6d2:	48 1b       	sub	r20, r24
     6d4:	59 0b       	sbc	r21, r25
     6d6:	ca 01       	movw	r24, r20
     6d8:	3f c0       	rjmp	.+126    	; 0x758 <cbuffGetSpace+0xd4>
                                        /* If inPointer is larger than the    */
                                        /* outPointer in physical value, the  */
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	fc 01       	movw	r30, r24
     6e0:	24 81       	ldd	r18, Z+4	; 0x04
     6e2:	35 81       	ldd	r19, Z+5	; 0x05
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	fc 01       	movw	r30, r24
     6ea:	86 81       	ldd	r24, Z+6	; 0x06
     6ec:	97 81       	ldd	r25, Z+7	; 0x07
     6ee:	82 17       	cp	r24, r18
     6f0:	93 07       	cpc	r25, r19
     6f2:	18 f5       	brcc	.+70     	; 0x73a <cbuffGetSpace+0xb6>
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	fc 01       	movw	r30, r24
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     70a:	a9 01       	movw	r20, r18
     70c:	48 1b       	sub	r20, r24
     70e:	59 0b       	sbc	r21, r25
     710:	ca 01       	movw	r24, r20
     712:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
                                 hCircBuffer->outPointer));
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	fc 01       	movw	r30, r24
     71a:	86 81       	ldd	r24, Z+6	; 0x06
     71c:	97 81       	ldd	r25, Z+7	; 0x07
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
     71e:	ac 01       	movw	r20, r24
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	fc 01       	movw	r30, r24
     726:	84 81       	ldd	r24, Z+4	; 0x04
     728:	95 81       	ldd	r25, Z+5	; 0x05
     72a:	ba 01       	movw	r22, r20
     72c:	68 1b       	sub	r22, r24
     72e:	79 0b       	sbc	r23, r25
     730:	cb 01       	movw	r24, r22
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     732:	82 0f       	add	r24, r18
     734:	93 1f       	adc	r25, r19
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	0f c0       	rjmp	.+30     	; 0x758 <cbuffGetSpace+0xd4>
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	fc 01       	movw	r30, r24
     740:	86 81       	ldd	r24, Z+6	; 0x06
     742:	97 81       	ldd	r25, Z+7	; 0x07
     744:	9c 01       	movw	r18, r24
                               hCircBuffer->inPointer);
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	fc 01       	movw	r30, r24
     74c:	84 81       	ldd	r24, Z+4	; 0x04
     74e:	95 81       	ldd	r25, Z+5	; 0x05
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     750:	a9 01       	movw	r20, r18
     752:	48 1b       	sub	r20, r24
     754:	59 0b       	sbc	r21, r25
     756:	ca 01       	movw	r24, r20
#endif
#if 0
        return (localOutPointer - localInPointer);
#endif
    }
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <cbuffGetFill>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	00 d0       	rcall	.+0      	; 0x76c <cbuffGetFill+0xa>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	fc 01       	movw	r30, r24
     77a:	82 81       	ldd	r24, Z+2	; 0x02
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	9c 01       	movw	r18, r24
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	fc 01       	movw	r30, r24
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	a9 01       	movw	r20, r18
     78c:	48 1b       	sub	r20, r24
     78e:	59 0b       	sbc	r21, r25
     790:	ca 01       	movw	r24, r20
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
     792:	8c 01       	movw	r16, r24
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
     79c:	f8 01       	movw	r30, r16
     79e:	e8 1b       	sub	r30, r24
     7a0:	f9 0b       	sbc	r31, r25
     7a2:	cf 01       	movw	r24, r30
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     7a4:	01 96       	adiw	r24, 0x01	; 1
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <cbuffClearBuffer>:
* \todo Consider renaming this function to 'cbuffResetBuffer()' and using this
*       function name for the function to acutally clear all of the data in the
*       buffer.
*******************************************************************************/
void cbuffClearBuffer(HCBUFF hCircBuffer)
{
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <cbuffClearBuffer+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	89 83       	std	Y+1, r24	; 0x01
                                        /* Reset buffer pointers              */
    hCircBuffer->inPointer  = hCircBuffer->startOfBuffer;
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 81       	ld	r18, Z
     7ca:	31 81       	ldd	r19, Z+1	; 0x01
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	fc 01       	movw	r30, r24
     7d2:	35 83       	std	Z+5, r19	; 0x05
     7d4:	24 83       	std	Z+4, r18	; 0x04
    hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	fc 01       	movw	r30, r24
     7dc:	20 81       	ld	r18, Z
     7de:	31 81       	ldd	r19, Z+1	; 0x01
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	fc 01       	movw	r30, r24
     7e6:	37 83       	std	Z+7, r19	; 0x07
     7e8:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
    hCircBuffer->localFlag  = 0x00;
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
    hCircBuffer->localFlag |= CBUFF_EMPTY;
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	9a 81       	ldd	r25, Y+2	; 0x02
     7f6:	fc 01       	movw	r30, r24
     7f8:	82 85       	ldd	r24, Z+10	; 0x0a
     7fa:	28 2f       	mov	r18, r24
     7fc:	20 64       	ori	r18, 0x40	; 64
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	fc 01       	movw	r30, r24
     804:	22 87       	std	Z+10, r18	; 0x0a
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	cf 91       	pop	r28
     80c:	df 91       	pop	r29
     80e:	08 95       	ret

00000810 <cbuffGetByte>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffGetByte(HCBUFF       hCircBuffer,
                           CBUFF      * data)
{
     810:	df 93       	push	r29
     812:	cf 93       	push	r28
     814:	00 d0       	rcall	.+0      	; 0x816 <cbuffGetByte+0x6>
     816:	00 d0       	rcall	.+0      	; 0x818 <cbuffGetByte+0x8>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	7c 83       	std	Y+4, r23	; 0x04
     822:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	fc 01       	movw	r30, r24
     82a:	82 85       	ldd	r24, Z+10	; 0x0a
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	80 74       	andi	r24, 0x40	; 64
     832:	90 70       	andi	r25, 0x00	; 0
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	11 f0       	breq	.+4      	; 0x83c <cbuffGetByte+0x2c>
    {
        return CBUFF_GET_FAIL;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	51 c0       	rjmp	.+162    	; 0x8de <cbuffGetByte+0xce>
    }
                                        /* Read requested byte                */
    *data = *hCircBuffer->outPointer;
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	fc 01       	movw	r30, r24
     842:	86 81       	ldd	r24, Z+6	; 0x06
     844:	97 81       	ldd	r25, Z+7	; 0x07
     846:	fc 01       	movw	r30, r24
     848:	20 81       	ld	r18, Z
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
    hCircBuffer->outPointer++;
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	fc 01       	movw	r30, r24
     858:	86 81       	ldd	r24, Z+6	; 0x06
     85a:	97 81       	ldd	r25, Z+7	; 0x07
     85c:	9c 01       	movw	r18, r24
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	fc 01       	movw	r30, r24
     868:	37 83       	std	Z+7, r19	; 0x07
     86a:	26 83       	std	Z+6, r18	; 0x06

                                        /* Implement wrap around              */
    if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	9a 81       	ldd	r25, Y+2	; 0x02
     870:	fc 01       	movw	r30, r24
     872:	26 81       	ldd	r18, Z+6	; 0x06
     874:	37 81       	ldd	r19, Z+7	; 0x07
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	9a 81       	ldd	r25, Y+2	; 0x02
     87a:	fc 01       	movw	r30, r24
     87c:	82 81       	ldd	r24, Z+2	; 0x02
     87e:	93 81       	ldd	r25, Z+3	; 0x03
     880:	82 17       	cp	r24, r18
     882:	93 07       	cpc	r25, r19
     884:	50 f4       	brcc	.+20     	; 0x89a <cbuffGetByte+0x8a>
    {
        hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	9a 81       	ldd	r25, Y+2	; 0x02
     88a:	fc 01       	movw	r30, r24
     88c:	20 81       	ld	r18, Z
     88e:	31 81       	ldd	r19, Z+1	; 0x01
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	9a 81       	ldd	r25, Y+2	; 0x02
     894:	fc 01       	movw	r30, r24
     896:	37 83       	std	Z+7, r19	; 0x07
     898:	26 83       	std	Z+6, r18	; 0x06
    }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	fc 01       	movw	r30, r24
     8a0:	26 81       	ldd	r18, Z+6	; 0x06
     8a2:	37 81       	ldd	r19, Z+7	; 0x07
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	fc 01       	movw	r30, r24
     8aa:	84 81       	ldd	r24, Z+4	; 0x04
     8ac:	95 81       	ldd	r25, Z+5	; 0x05
     8ae:	28 17       	cp	r18, r24
     8b0:	39 07       	cpc	r19, r25
     8b2:	51 f4       	brne	.+20     	; 0x8c8 <cbuffGetByte+0xb8>
    {
                                        /* Note that the buffer is empty      */
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	fc 01       	movw	r30, r24
     8ba:	82 85       	ldd	r24, Z+10	; 0x0a
     8bc:	28 2f       	mov	r18, r24
     8be:	20 64       	ori	r18, 0x40	; 64
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	9a 81       	ldd	r25, Y+2	; 0x02
     8c4:	fc 01       	movw	r30, r24
     8c6:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	fc 01       	movw	r30, r24
     8ce:	82 85       	ldd	r24, Z+10	; 0x0a
     8d0:	28 2f       	mov	r18, r24
     8d2:	2f 77       	andi	r18, 0x7F	; 127
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	fc 01       	movw	r30, r24
     8da:	22 87       	std	Z+10, r18	; 0x0a

    return CBUFF_GET_OK;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
}
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <cbuffPeekTail>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekTail(HCBUFF   hCircBuffer,
                           CBUFF  * data)
{
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <cbuffPeekTail+0x6>
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <cbuffPeekTail+0x8>
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	89 83       	std	Y+1, r24	; 0x01
     8fc:	7c 83       	std	Y+4, r23	; 0x04
     8fe:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	fc 01       	movw	r30, r24
     906:	82 85       	ldd	r24, Z+10	; 0x0a
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	80 74       	andi	r24, 0x40	; 64
     90e:	90 70       	andi	r25, 0x00	; 0
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	69 f4       	brne	.+26     	; 0x92e <cbuffPeekTail+0x42>
    {
                                        /* Return head value in data          */
        *data = *hCircBuffer->outPointer;
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	fc 01       	movw	r30, r24
     91a:	86 81       	ldd	r24, Z+6	; 0x06
     91c:	97 81       	ldd	r25, Z+7	; 0x07
     91e:	fc 01       	movw	r30, r24
     920:	20 81       	ld	r18, Z
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18
        return CBUFF_GET_OK;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	01 c0       	rjmp	.+2      	; 0x930 <cbuffPeekTail+0x44>
    }
    else
    {
        return CBUFF_GET_FAIL;
     92e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	08 95       	ret

0000093e <cbuffPeekHead>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekHead(HCBUFF   hCircBuffer,
                            CBUFF  * data)
{
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	00 d0       	rcall	.+0      	; 0x944 <cbuffPeekHead+0x6>
     944:	00 d0       	rcall	.+0      	; 0x946 <cbuffPeekHead+0x8>
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	7c 83       	std	Y+4, r23	; 0x04
     950:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	fc 01       	movw	r30, r24
     958:	82 85       	ldd	r24, Z+10	; 0x0a
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	80 74       	andi	r24, 0x40	; 64
     960:	90 70       	andi	r25, 0x00	; 0
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	39 f5       	brne	.+78     	; 0x9b4 <cbuffPeekHead+0x76>
    {
                                        /* If inPointer doesn't point to      */
                                        /* startOfBuffer, return value at     */
                                        /* (inPointer - 1)                    */
        if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	fc 01       	movw	r30, r24
     96c:	24 81       	ldd	r18, Z+4	; 0x04
     96e:	35 81       	ldd	r19, Z+5	; 0x05
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	28 17       	cp	r18, r24
     97c:	39 07       	cpc	r19, r25
     97e:	69 f0       	breq	.+26     	; 0x99a <cbuffPeekHead+0x5c>
        {
            *data = *(hCircBuffer->inPointer - sizeof(CBUFF));
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	fc 01       	movw	r30, r24
     986:	84 81       	ldd	r24, Z+4	; 0x04
     988:	95 81       	ldd	r25, Z+5	; 0x05
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	fc 01       	movw	r30, r24
     98e:	20 81       	ld	r18, Z
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18
     998:	0b c0       	rjmp	.+22     	; 0x9b0 <cbuffPeekHead+0x72>
        }
                                        /* Otherwise handle buffer wrap       */
                                        /* situation                          */
        else
        {
            *data = *hCircBuffer->endOfBuffer;
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	fc 01       	movw	r30, r24
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	93 81       	ldd	r25, Z+3	; 0x03
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 81       	ld	r18, Z
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
        }
        return CBUFF_GET_OK;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <cbuffPeekHead+0x78>
    }
    else
    {
        return CBUFF_GET_FAIL;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	08 95       	ret

000009c4 <cbuffUnputByte>:
*    buffer is now empty, this function will fail in its attempt
* -# The data itself is not removed; only the head pointer to the buffer is
*    moved back one position
*******************************************************************************/
unsigned char cbuffUnputByte(HCBUFF  hCircBuffer)
{
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <cbuffUnputByte+0x6>
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unput at    */
                                        /* all. If buffer is empty, do        */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	fc 01       	movw	r30, r24
     9d8:	82 85       	ldd	r24, Z+10	; 0x0a
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	80 74       	andi	r24, 0x40	; 64
     9e0:	90 70       	andi	r25, 0x00	; 0
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	11 f0       	breq	.+4      	; 0x9ea <cbuffUnputByte+0x26>
    {
        return 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	47 c0       	rjmp	.+142    	; 0xa78 <cbuffUnputByte+0xb4>
    }
                                        /* unput the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	9a 81       	ldd	r25, Y+2	; 0x02
     9ee:	fc 01       	movw	r30, r24
     9f0:	24 81       	ldd	r18, Z+4	; 0x04
     9f2:	35 81       	ldd	r19, Z+5	; 0x05
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	fc 01       	movw	r30, r24
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	28 17       	cp	r18, r24
     a00:	39 07       	cpc	r19, r25
     a02:	71 f0       	breq	.+28     	; 0xa20 <cbuffUnputByte+0x5c>
    {
        hCircBuffer->inPointer--;
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	fc 01       	movw	r30, r24
     a0a:	84 81       	ldd	r24, Z+4	; 0x04
     a0c:	95 81       	ldd	r25, Z+5	; 0x05
     a0e:	9c 01       	movw	r18, r24
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	30 40       	sbci	r19, 0x00	; 0
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	fc 01       	movw	r30, r24
     a1a:	35 83       	std	Z+5, r19	; 0x05
     a1c:	24 83       	std	Z+4, r18	; 0x04
     a1e:	0a c0       	rjmp	.+20     	; 0xa34 <cbuffUnputByte+0x70>
    }
                                        /* For boundary case implent wrap-    */
                                        /* around                             */
    else
    {
        hCircBuffer->inPointer = hCircBuffer->endOfBuffer;
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	fc 01       	movw	r30, r24
     a26:	22 81       	ldd	r18, Z+2	; 0x02
     a28:	33 81       	ldd	r19, Z+3	; 0x03
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	fc 01       	movw	r30, r24
     a30:	35 83       	std	Z+5, r19	; 0x05
     a32:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check if buffer is now empty       */
    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	fc 01       	movw	r30, r24
     a3a:	24 81       	ldd	r18, Z+4	; 0x04
     a3c:	35 81       	ldd	r19, Z+5	; 0x05
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	fc 01       	movw	r30, r24
     a44:	86 81       	ldd	r24, Z+6	; 0x06
     a46:	97 81       	ldd	r25, Z+7	; 0x07
     a48:	28 17       	cp	r18, r24
     a4a:	39 07       	cpc	r19, r25
     a4c:	51 f4       	brne	.+20     	; 0xa62 <cbuffUnputByte+0x9e>
    {
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	fc 01       	movw	r30, r24
     a54:	82 85       	ldd	r24, Z+10	; 0x0a
     a56:	28 2f       	mov	r18, r24
     a58:	20 64       	ori	r18, 0x40	; 64
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	9a 81       	ldd	r25, Y+2	; 0x02
     a5e:	fc 01       	movw	r30, r24
     a60:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not full  */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	fc 01       	movw	r30, r24
     a68:	82 85       	ldd	r24, Z+10	; 0x0a
     a6a:	28 2f       	mov	r18, r24
     a6c:	2f 77       	andi	r18, 0x7F	; 127
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	fc 01       	movw	r30, r24
     a74:	22 87       	std	Z+10, r18	; 0x0a

    return 0;
     a76:	80 e0       	ldi	r24, 0x00	; 0
}
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	cf 91       	pop	r28
     a7e:	df 91       	pop	r29
     a80:	08 95       	ret

00000a82 <cbuffUngetByte>:
*    values left over after a 'cbuffClearBuffer' will be 'ungot'. The buffer
*    can still be 'ungot' until the tail pointer gets back to the point
*    where it reaches the head pointer.
*******************************************************************************/
unsigned char  cbuffUngetByte(HCBUFF  hCircBuffer)
{
     a82:	df 93       	push	r29
     a84:	cf 93       	push	r28
     a86:	00 d0       	rcall	.+0      	; 0xa88 <cbuffUngetByte+0x6>
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	9a 83       	std	Y+2, r25	; 0x02
     a8e:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unget at    */
                                        /* all. If buffer is full, do         */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	9a 81       	ldd	r25, Y+2	; 0x02
     a94:	fc 01       	movw	r30, r24
     a96:	82 85       	ldd	r24, Z+10	; 0x0a
     a98:	88 23       	and	r24, r24
     a9a:	14 f4       	brge	.+4      	; 0xaa0 <cbuffUngetByte+0x1e>
    {
        return 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	47 c0       	rjmp	.+142    	; 0xb2e <cbuffUngetByte+0xac>
    }
                                        /* unget the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->outPointer != hCircBuffer->startOfBuffer)
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	fc 01       	movw	r30, r24
     aa6:	26 81       	ldd	r18, Z+6	; 0x06
     aa8:	37 81       	ldd	r19, Z+7	; 0x07
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	28 17       	cp	r18, r24
     ab6:	39 07       	cpc	r19, r25
     ab8:	71 f0       	breq	.+28     	; 0xad6 <cbuffUngetByte+0x54>
    {
        hCircBuffer->outPointer--;
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	fc 01       	movw	r30, r24
     ac0:	86 81       	ldd	r24, Z+6	; 0x06
     ac2:	97 81       	ldd	r25, Z+7	; 0x07
     ac4:	9c 01       	movw	r18, r24
     ac6:	21 50       	subi	r18, 0x01	; 1
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	fc 01       	movw	r30, r24
     ad0:	37 83       	std	Z+7, r19	; 0x07
     ad2:	26 83       	std	Z+6, r18	; 0x06
     ad4:	0a c0       	rjmp	.+20     	; 0xaea <cbuffUngetByte+0x68>
    }
                                        /* For boundary case implementnt      */
                                        /* wraparound                         */
    else
    {
        hCircBuffer->outPointer = hCircBuffer->endOfBuffer;
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	fc 01       	movw	r30, r24
     adc:	22 81       	ldd	r18, Z+2	; 0x02
     ade:	33 81       	ldd	r19, Z+3	; 0x03
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	fc 01       	movw	r30, r24
     ae6:	37 83       	std	Z+7, r19	; 0x07
     ae8:	26 83       	std	Z+6, r18	; 0x06
    }
                                        /* Check if buffer is now full        */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	fc 01       	movw	r30, r24
     af0:	26 81       	ldd	r18, Z+6	; 0x06
     af2:	37 81       	ldd	r19, Z+7	; 0x07
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	fc 01       	movw	r30, r24
     afa:	84 81       	ldd	r24, Z+4	; 0x04
     afc:	95 81       	ldd	r25, Z+5	; 0x05
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	51 f4       	brne	.+20     	; 0xb18 <cbuffUngetByte+0x96>
    {
        hCircBuffer->localFlag |= CBUFF_FULL;
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	fc 01       	movw	r30, r24
     b0a:	82 85       	ldd	r24, Z+10	; 0x0a
     b0c:	28 2f       	mov	r18, r24
     b0e:	20 68       	ori	r18, 0x80	; 128
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	fc 01       	movw	r30, r24
     b16:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not empty */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	fc 01       	movw	r30, r24
     b1e:	82 85       	ldd	r24, Z+10	; 0x0a
     b20:	28 2f       	mov	r18, r24
     b22:	2f 7b       	andi	r18, 0xBF	; 191
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	fc 01       	movw	r30, r24
     b2a:	22 87       	std	Z+10, r18	; 0x0a
    return 0;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
}
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	cf 91       	pop	r28
     b34:	df 91       	pop	r29
     b36:	08 95       	ret

00000b38 <cbuffPutArray>:
* -# This function will not allow the buffer to overflow
*******************************************************************************/
unsigned int  cbuffPutArray(HCBUFF               hCircBuffer,
                            const CBUFF        * data,
                            unsigned int         noOfBytes)
{
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	28 97       	sbiw	r28, 0x08	; 8
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	8b 83       	std	Y+3, r24	; 0x03
     b50:	7e 83       	std	Y+6, r23	; 0x06
     b52:	6d 83       	std	Y+5, r22	; 0x05
     b54:	58 87       	std	Y+8, r21	; 0x08
     b56:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesWritten = 0;
     b58:	1a 82       	std	Y+2, r1	; 0x02
     b5a:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	9c 81       	ldd	r25, Y+4	; 0x04
     b60:	fc 01       	movw	r30, r24
     b62:	82 85       	ldd	r24, Z+10	; 0x0a
     b64:	88 23       	and	r24, r24
     b66:	0c f0       	brlt	.+2      	; 0xb6a <cbuffPutArray+0x32>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <cbuffPutArray+0xe8>
    {
        return bytesWritten;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	6e c0       	rjmp	.+220    	; 0xc4c <cbuffPutArray+0x114>


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
    {
                                        /* Put data in buffer                 */
        *hCircBuffer->inPointer = *data;
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	fc 01       	movw	r30, r24
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	95 81       	ldd	r25, Z+5	; 0x05
     b7a:	2d 81       	ldd	r18, Y+5	; 0x05
     b7c:	3e 81       	ldd	r19, Y+6	; 0x06
     b7e:	f9 01       	movw	r30, r18
     b80:	20 81       	ld	r18, Z
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18

        hCircBuffer->inPointer++;       /* Increment pointer to circular      */
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	fc 01       	movw	r30, r24
     b8c:	84 81       	ldd	r24, Z+4	; 0x04
     b8e:	95 81       	ldd	r25, Z+5	; 0x05
     b90:	9c 01       	movw	r18, r24
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	fc 01       	movw	r30, r24
     b9c:	35 83       	std	Z+5, r19	; 0x05
     b9e:	24 83       	std	Z+4, r18	; 0x04
                                        /* buffer                             */

        data++;                         /* Increment pointer to array data    */
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	9e 81       	ldd	r25, Y+6	; 0x06
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	9e 83       	std	Y+6, r25	; 0x06
     ba8:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
        if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	fc 01       	movw	r30, r24
     bb0:	24 81       	ldd	r18, Z+4	; 0x04
     bb2:	35 81       	ldd	r19, Z+5	; 0x05
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	fc 01       	movw	r30, r24
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	82 17       	cp	r24, r18
     bc0:	93 07       	cpc	r25, r19
     bc2:	50 f4       	brcc	.+20     	; 0xbd8 <cbuffPutArray+0xa0>
        {
            hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	fc 01       	movw	r30, r24
     bca:	20 81       	ld	r18, Z
     bcc:	31 81       	ldd	r19, Z+1	; 0x01
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	fc 01       	movw	r30, r24
     bd4:	35 83       	std	Z+5, r19	; 0x05
     bd6:	24 83       	std	Z+4, r18	; 0x04
        }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

        if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	fc 01       	movw	r30, r24
     bde:	24 81       	ldd	r18, Z+4	; 0x04
     be0:	35 81       	ldd	r19, Z+5	; 0x05
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	fc 01       	movw	r30, r24
     be8:	86 81       	ldd	r24, Z+6	; 0x06
     bea:	97 81       	ldd	r25, Z+7	; 0x07
     bec:	28 17       	cp	r18, r24
     bee:	39 07       	cpc	r19, r25
     bf0:	51 f4       	brne	.+20     	; 0xc06 <cbuffPutArray+0xce>
        {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
            hCircBuffer->localFlag |= CBUFF_FULL;
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	fc 01       	movw	r30, r24
     bf8:	82 85       	ldd	r24, Z+10	; 0x0a
     bfa:	28 2f       	mov	r18, r24
     bfc:	20 68       	ori	r18, 0x80	; 128
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	fc 01       	movw	r30, r24
     c04:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how much data we've written   */
        bytesWritten++;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
     c10:	29 81       	ldd	r18, Y+1	; 0x01
     c12:	3a 81       	ldd	r19, Y+2	; 0x02
     c14:	8f 81       	ldd	r24, Y+7	; 0x07
     c16:	98 85       	ldd	r25, Y+8	; 0x08
     c18:	28 17       	cp	r18, r24
     c1a:	39 07       	cpc	r19, r25
     c1c:	51 f0       	breq	.+20     	; 0xc32 <cbuffPutArray+0xfa>
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <cbuffPutArray+0xea>
    {
        return bytesWritten;
    }


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
     c20:	00 00       	nop
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	fc 01       	movw	r30, r24
     c28:	82 85       	ldd	r24, Z+10	; 0x0a
     c2a:	88 23       	and	r24, r24
     c2c:	0c f0       	brlt	.+2      	; 0xc30 <cbuffPutArray+0xf8>
     c2e:	a0 cf       	rjmp	.-192    	; 0xb70 <cbuffPutArray+0x38>
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <cbuffPutArray+0xfc>
        bytesWritten++;
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
        {
            break;
     c32:	00 00       	nop
        }
    }
                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	fc 01       	movw	r30, r24
     c3a:	82 85       	ldd	r24, Z+10	; 0x0a
     c3c:	28 2f       	mov	r18, r24
     c3e:	2f 7b       	andi	r18, 0xBF	; 191
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	fc 01       	movw	r30, r24
     c46:	22 87       	std	Z+10, r18	; 0x0a

    return bytesWritten;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c4c:	28 96       	adiw	r28, 0x08	; 8
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <cbuffGetArray>:
*    enough to accomodate noOfBytes of data
*******************************************************************************/
unsigned int  cbuffGetArray(HCBUFF               hCircBuffer,
                            CBUFF              * data,
                            unsigned int         noOfBytes)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	28 97       	sbiw	r28, 0x08	; 8
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	9c 83       	std	Y+4, r25	; 0x04
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	7e 83       	std	Y+6, r23	; 0x06
     c78:	6d 83       	std	Y+5, r22	; 0x05
     c7a:	58 87       	std	Y+8, r21	; 0x08
     c7c:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesRead = 0;
     c7e:	1a 82       	std	Y+2, r1	; 0x02
     c80:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	fc 01       	movw	r30, r24
     c88:	82 85       	ldd	r24, Z+10	; 0x0a
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	80 74       	andi	r24, 0x40	; 64
     c90:	90 70       	andi	r25, 0x00	; 0
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	09 f4       	brne	.+2      	; 0xc98 <cbuffGetArray+0x3a>
     c96:	5b c0       	rjmp	.+182    	; 0xd4e <cbuffGetArray+0xf0>
    {
        return bytesRead;
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	72 c0       	rjmp	.+228    	; 0xd82 <cbuffGetArray+0x124>
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
    {
                                        /* Read requested byte                */
        *data = *hCircBuffer->outPointer;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	fc 01       	movw	r30, r24
     ca4:	86 81       	ldd	r24, Z+6	; 0x06
     ca6:	97 81       	ldd	r25, Z+7	; 0x07
     ca8:	fc 01       	movw	r30, r24
     caa:	20 81       	ld	r18, Z
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	9e 81       	ldd	r25, Y+6	; 0x06
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
        hCircBuffer->outPointer++;
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	fc 01       	movw	r30, r24
     cba:	86 81       	ldd	r24, Z+6	; 0x06
     cbc:	97 81       	ldd	r25, Z+7	; 0x07
     cbe:	9c 01       	movw	r18, r24
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	fc 01       	movw	r30, r24
     cca:	37 83       	std	Z+7, r19	; 0x07
     ccc:	26 83       	std	Z+6, r18	; 0x06
                                        /* Increment array data pointer       */
        data++;
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement wrap around              */
        if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	fc 01       	movw	r30, r24
     cde:	26 81       	ldd	r18, Z+6	; 0x06
     ce0:	37 81       	ldd	r19, Z+7	; 0x07
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	fc 01       	movw	r30, r24
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	82 17       	cp	r24, r18
     cee:	93 07       	cpc	r25, r19
     cf0:	50 f4       	brcc	.+20     	; 0xd06 <cbuffGetArray+0xa8>
        {
            hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	fc 01       	movw	r30, r24
     d02:	37 83       	std	Z+7, r19	; 0x07
     d04:	26 83       	std	Z+6, r18	; 0x06
        }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
        if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	fc 01       	movw	r30, r24
     d0c:	26 81       	ldd	r18, Z+6	; 0x06
     d0e:	37 81       	ldd	r19, Z+7	; 0x07
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	fc 01       	movw	r30, r24
     d16:	84 81       	ldd	r24, Z+4	; 0x04
     d18:	95 81       	ldd	r25, Z+5	; 0x05
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	51 f4       	brne	.+20     	; 0xd34 <cbuffGetArray+0xd6>
        {
                                        /* Note that the buffer is empty      */
            hCircBuffer->localFlag |= CBUFF_EMPTY;
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	fc 01       	movw	r30, r24
     d26:	82 85       	ldd	r24, Z+10	; 0x0a
     d28:	28 2f       	mov	r18, r24
     d2a:	20 64       	ori	r18, 0x40	; 64
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	fc 01       	movw	r30, r24
     d32:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how many bytes we've read     */
        bytesRead++;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
     d3e:	29 81       	ldd	r18, Y+1	; 0x01
     d40:	3a 81       	ldd	r19, Y+2	; 0x02
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	98 85       	ldd	r25, Y+8	; 0x08
     d46:	28 17       	cp	r18, r24
     d48:	39 07       	cpc	r19, r25
     d4a:	71 f0       	breq	.+28     	; 0xd68 <cbuffGetArray+0x10a>
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <cbuffGetArray+0xf2>
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
        return bytesRead;
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
     d4e:	00 00       	nop
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	fc 01       	movw	r30, r24
     d56:	82 85       	ldd	r24, Z+10	; 0x0a
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	80 74       	andi	r24, 0x40	; 64
     d5e:	90 70       	andi	r25, 0x00	; 0
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	09 f4       	brne	.+2      	; 0xd66 <cbuffGetArray+0x108>
     d64:	9c cf       	rjmp	.-200    	; 0xc9e <cbuffGetArray+0x40>
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <cbuffGetArray+0x10c>

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
        {
            break;
     d68:	00 00       	nop
        }
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	fc 01       	movw	r30, r24
     d70:	82 85       	ldd	r24, Z+10	; 0x0a
     d72:	28 2f       	mov	r18, r24
     d74:	2f 77       	andi	r18, 0x7F	; 127
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	fc 01       	movw	r30, r24
     d7c:	22 87       	std	Z+10, r18	; 0x0a

    return bytesRead;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d82:	28 96       	adiw	r28, 0x08	; 8
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <main>:
*
* Notes : 
*
*******************************************************************************/
int main(void)
{
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <main+0xa>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <main+0xc>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
    CBUFFNUM    testBufferNum;
    CBUFFNUM    uartOutBufferNum;
//    volatile unsigned int x = 0;
                                        /* Initialise all used hardware and   */
                                        /* related interrupts                 */
    initLEDs();
     da4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <initLEDs>
    initUart1();
     da8:	0e 94 6c 07 	call	0xed8	; 0xed8 <initUart1>
    initTimer1();
     dac:	89 ec       	ldi	r24, 0xC9	; 201
     dae:	97 e0       	ldi	r25, 0x07	; 7
     db0:	fc 01       	movw	r30, r24
     db2:	09 95       	icall
    initInterrupts();
     db4:	0e 94 27 08 	call	0x104e	; 0x104e <initInterrupts>
    termInit();
     db8:	0e 94 c5 09 	call	0x138a	; 0x138a <termInit>
    
                                        /* Create circular buffers            */
    cbuffInit();
     dbc:	0e 94 8d 00 	call	0x11a	; 0x11a <cbuffInit>
    testBufferNum = cbuffCreate(testBuffer, TESTBUFFERSIZE, 
     dc0:	80 ed       	ldi	r24, 0xD0	; 208
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	2c ef       	ldi	r18, 0xFC	; 252
     dc6:	34 e0       	ldi	r19, 0x04	; 4
     dc8:	62 e3       	ldi	r22, 0x32	; 50
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	0e 94 ab 00 	call	0x156	; 0x156 <cbuffCreate>
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
                                    &testBufferObj);
    uartOutBufferNum = cbuffCreate(uartOutBuffer, UARTOUTBUFFERSIZE, 
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	29 e0       	ldi	r18, 0x09	; 9
     ddc:	35 e0       	ldi	r19, 0x05	; 5
     dde:	6a ef       	ldi	r22, 0xFA	; 250
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	a9 01       	movw	r20, r18
     de4:	0e 94 ab 00 	call	0x156	; 0x156 <cbuffCreate>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
                                    &uartOutBufferObj);

                                        /* Check buffers were created         */
    if (testBufferNum == 0 || uartOutBufferNum == 0)
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	21 f0       	breq	.+8      	; 0xdfc <main+0x68>
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	11 f4       	brne	.+4      	; 0xe00 <main+0x6c>
    {
        error();
     dfc:	0e 94 4f 08 	call	0x109e	; 0x109e <error>
    }    

                                        /* Get handles to buffers             */    
    hTestBuffer = cbuffOpen(testBufferNum);
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	0e 94 6f 02 	call	0x4de	; 0x4de <cbuffOpen>
     e08:	90 93 17 05 	sts	0x0517, r25
     e0c:	80 93 16 05 	sts	0x0516, r24
    hUartOutBuffer = cbuffOpen(uartOutBufferNum);
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	0e 94 6f 02 	call	0x4de	; 0x4de <cbuffOpen>
     e18:	90 93 19 05 	sts	0x0519, r25
     e1c:	80 93 18 05 	sts	0x0518, r24
                                        /* Check buffers were opened          */
    if (hTestBuffer == (HCBUFF) 0 || hUartOutBuffer == (HCBUFF) 0)
     e20:	80 91 16 05 	lds	r24, 0x0516
     e24:	90 91 17 05 	lds	r25, 0x0517
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	31 f0       	breq	.+12     	; 0xe38 <main+0xa4>
     e2c:	80 91 18 05 	lds	r24, 0x0518
     e30:	90 91 19 05 	lds	r25, 0x0519
     e34:	00 97       	sbiw	r24, 0x00	; 0
     e36:	11 f4       	brne	.+4      	; 0xe3c <main+0xa8>
    {
        error();
     e38:	0e 94 4f 08 	call	0x109e	; 0x109e <error>
    }    
                                        /* Start Timer based data generation  */
    startTimer1();                                       
     e3c:	84 ee       	ldi	r24, 0xE4	; 228
     e3e:	97 e0       	ldi	r25, 0x07	; 7
     e40:	fc 01       	movw	r30, r24
     e42:	09 95       	icall
                                        /* Output statistics                  */
    while(1)
    {
        triggerUART1(hUartOutBuffer);
     e44:	80 91 18 05 	lds	r24, 0x0518
     e48:	90 91 19 05 	lds	r25, 0x0519
     e4c:	0e 94 92 07 	call	0xf24	; 0xf24 <triggerUART1>
        
        updateStats(hTestBuffer);
     e50:	80 91 16 05 	lds	r24, 0x0516
     e54:	90 91 17 05 	lds	r25, 0x0517
     e58:	0e 94 3d 08 	call	0x107a	; 0x107a <updateStats>

        if(termIsAutomatic())
     e5c:	0e 94 0b 10 	call	0x2016	; 0x2016 <termIsAutomatic>
     e60:	88 23       	and	r24, r24
     e62:	a9 f0       	breq	.+42     	; 0xe8e <main+0xfa>
        {
            if(cbuffGetSpace(hTestBuffer) <= termGetEmptyTrigger())
     e64:	80 91 16 05 	lds	r24, 0x0516
     e68:	90 91 17 05 	lds	r25, 0x0517
     e6c:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
     e70:	8c 01       	movw	r16, r24
     e72:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <termGetEmptyTrigger>
     e76:	80 17       	cp	r24, r16
     e78:	91 07       	cpc	r25, r17
     e7a:	b8 f0       	brcs	.+46     	; 0xeaa <main+0x116>
            {
                termCheckBuffer(hTestBuffer);
     e7c:	80 91 16 05 	lds	r24, 0x0516
     e80:	90 91 17 05 	lds	r25, 0x0517
     e84:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <termCheckBuffer>
                termFullScreenUpdate();
     e88:	0e 94 1e 10 	call	0x203c	; 0x203c <termFullScreenUpdate>
     e8c:	0e c0       	rjmp	.+28     	; 0xeaa <main+0x116>
            }
        }    
        else if(emptyBuffer == 1)
     e8e:	80 91 1a 05 	lds	r24, 0x051A
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	51 f4       	brne	.+20     	; 0xeaa <main+0x116>
        {
            emptyBuffer = 0; 
     e96:	10 92 1a 05 	sts	0x051A, r1
            termCheckBuffer(hTestBuffer);
     e9a:	80 91 16 05 	lds	r24, 0x0516
     e9e:	90 91 17 05 	lds	r25, 0x0517
     ea2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <termCheckBuffer>
            termFullScreenUpdate();
     ea6:	0e 94 1e 10 	call	0x203c	; 0x203c <termFullScreenUpdate>
        }    
        
		termOutput(hUartOutBuffer);
     eaa:	80 91 18 05 	lds	r24, 0x0518
     eae:	90 91 19 05 	lds	r25, 0x0519
     eb2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <termOutput>
        else
        {
            x++;
        }    
#endif
    }    
     eb6:	c6 cf       	rjmp	.-116    	; 0xe44 <main+0xb0>

00000eb8 <initLEDs>:
*
* Notes : 
*
*******************************************************************************/
void initLEDs(void)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0x07;
     ec0:	84 e2       	ldi	r24, 0x24	; 36
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	27 e0       	ldi	r18, 0x07	; 7
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18
    PORTB = 0x00;
     eca:	85 e2       	ldi	r24, 0x25	; 37
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	fc 01       	movw	r30, r24
     ed0:	10 82       	st	Z, r1
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <initUart1>:
*
* Notes : 
*
*******************************************************************************/
void initUart1(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
                                    /* Make sure I/O clock to USART1 is enabled */
	PRR0 &= ~(1 << PRUSART1);
     ee0:	84 e6       	ldi	r24, 0x64	; 100
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	24 e6       	ldi	r18, 0x64	; 100
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	f9 01       	movw	r30, r18
     eea:	20 81       	ld	r18, Z
     eec:	2f 7e       	andi	r18, 0xEF	; 239
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
	
	/* Set baud rate to 57.6k for 11.0592MHz crystal */
	UBRR1H = 0;
     ef2:	8d ec       	ldi	r24, 0xCD	; 205
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	fc 01       	movw	r30, r24
     ef8:	10 82       	st	Z, r1
	UBRR1L = 11;
     efa:	8c ec       	ldi	r24, 0xCC	; 204
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	2b e0       	ldi	r18, 0x0B	; 11
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
	
	/* Set up functionality */	
	UCSR1A = 0x00;          /* Standard values */
     f04:	88 ec       	ldi	r24, 0xC8	; 200
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	fc 01       	movw	r30, r24
     f0a:	10 82       	st	Z, r1
	UCSR1B = 0x00;          /* Keep all interrupts and TX/RX off */
     f0c:	89 ec       	ldi	r24, 0xC9	; 201
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	10 82       	st	Z, r1
	                        /* Async mode, parity off, 1 stop-bit, 8-bit */
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10) | (0 << UCPOL1);
     f14:	8a ec       	ldi	r24, 0xCA	; 202
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	26 e0       	ldi	r18, 0x06	; 6
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <triggerUART1>:
*
* Notes : 
*
*******************************************************************************/
void triggerUART1(HCBUFF hCbuff)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <triggerUART1+0x6>
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9b 83       	std	Y+3, r25	; 0x03
     f32:	8a 83       	std	Y+2, r24	; 0x02
                                        /* Local storage for data read from   */
                                        /* cbuff                              */
    CBUFF data;
                                        /* Check if U1 TX is totally empty     */
    if((UCSR1A & (1 << UDRE1)))
     f34:	88 ec       	ldi	r24, 0xC8	; 200
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	80 72       	andi	r24, 0x20	; 32
     f42:	90 70       	andi	r25, 0x00	; 0
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	f9 f0       	breq	.+62     	; 0xf86 <triggerUART1+0x62>
    {
                                        /* Check if there is any data to send */
        if(cbuffGetFill(hCbuff) > 0)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	9b 81       	ldd	r25, Y+3	; 0x03
     f4c:	0e 94 b1 03 	call	0x762	; 0x762 <cbuffGetFill>
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	c9 f0       	breq	.+50     	; 0xf86 <triggerUART1+0x62>
        {
                                        /* Remove one byte and transmit       */
            if(cbuffGetByte(hCbuff, &data) == CBUFF_GET_OK)
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	9b 81       	ldd	r25, Y+3	; 0x03
     f58:	9e 01       	movw	r18, r28
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	b9 01       	movw	r22, r18
     f60:	0e 94 08 04 	call	0x810	; 0x810 <cbuffGetByte>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	79 f4       	brne	.+30     	; 0xf86 <triggerUART1+0x62>
            {
                UDR1 = (unsigned char) data;
     f68:	8e ec       	ldi	r24, 0xCE	; 206
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	29 81       	ldd	r18, Y+1	; 0x01
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
                PORTB ^= 0x01;
     f72:	85 e2       	ldi	r24, 0x25	; 37
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	25 e2       	ldi	r18, 0x25	; 37
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	f9 01       	movw	r30, r18
     f7c:	30 81       	ld	r19, Z
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	23 27       	eor	r18, r19
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
            }    
        }    
    }    
}    
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <initTimer1>:
*
* Notes : 
*
*******************************************************************************/
void initTimer1(void)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	                                    /* Normal Port operation, normal operation */
    TCCR1A = 0x00;
     f9a:	80 e8       	ldi	r24, 0x80	; 128
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	fc 01       	movw	r30, r24
     fa0:	10 82       	st	Z, r1
	                                    /* CTC Mode */
    TCCR1B = 0x08;
     fa2:	81 e8       	ldi	r24, 0x81	; 129
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	28 e0       	ldi	r18, 0x08	; 8
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
	                                    /* Not used */
	TCCR1C = 0x00;
     fac:	82 e8       	ldi	r24, 0x82	; 130
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	fc 01       	movw	r30, r24
     fb2:	10 82       	st	Z, r1
                                        /* Set period to ~1Hz (count of       */
                                        /* 10800/0x2A30)                      */
    OCR1A = 10800;
     fb4:	88 e8       	ldi	r24, 0x88	; 136
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	20 e3       	ldi	r18, 0x30	; 48
     fba:	3a e2       	ldi	r19, 0x2A	; 42
     fbc:	fc 01       	movw	r30, r24
     fbe:	31 83       	std	Z+1, r19	; 0x01
     fc0:	20 83       	st	Z, r18
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <startTimer1>:
*
* Notes : 
*
*******************************************************************************/
void startTimer1(void)
{   
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fd0:	84 e8       	ldi	r24, 0x84	; 132
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	11 82       	std	Z+1, r1	; 0x01
     fd8:	10 82       	st	Z, r1
	                                    /* 11.0592MHz / 124 Prescaler = 10.8kHz */
    TCCR1B |= 0x05;
     fda:	81 e8       	ldi	r24, 0x81	; 129
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	21 e8       	ldi	r18, 0x81	; 129
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	25 60       	ori	r18, 0x05	; 5
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <stopTimer1>:
*
* Notes : 
*
*******************************************************************************/
void stopTimer1(void)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
    TCCR1B &= ~0x05;
     ffa:	81 e8       	ldi	r24, 0x81	; 129
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	21 e8       	ldi	r18, 0x81	; 129
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	f9 01       	movw	r30, r18
    1004:	20 81       	ld	r18, Z
    1006:	2a 7f       	andi	r18, 0xFA	; 250
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
}  
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <setTimer1IntRate>:
*
* Notes : 
*
*******************************************************************************/
void setTimer1IntRate(void)
{
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    stopTimer1();
    101e:	0e 94 f9 07 	call	0xff2	; 0xff2 <stopTimer1>
                                            /* T2 clock speed is 10800Hz          */        
    OCR1A = (10800 / termGetFillRate());
    1022:	08 e8       	ldi	r16, 0x88	; 136
    1024:	10 e0       	ldi	r17, 0x00	; 0
    1026:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <termGetFillRate>
    102a:	9c 01       	movw	r18, r24
    102c:	80 e3       	ldi	r24, 0x30	; 48
    102e:	9a e2       	ldi	r25, 0x2A	; 42
    1030:	b9 01       	movw	r22, r18
    1032:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodhi4>
    1036:	9b 01       	movw	r18, r22
    1038:	c9 01       	movw	r24, r18
    103a:	f8 01       	movw	r30, r16
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	80 83       	st	Z, r24
    startTimer1();
    1040:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <startTimer1>
}    
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	08 95       	ret

0000104e <initInterrupts>:
*
* Notes : 
*
*******************************************************************************/
void initInterrupts(void)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
                                        /* T1 OCA Match Interrupt                 */
    TIMSK1 = (1 << OCIE1A);
    1056:	8f e6       	ldi	r24, 0x6F	; 111
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	22 e0       	ldi	r18, 0x02	; 2
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
                                        /* Enable Rx interrupt, Tx Buff Empty interrupt */
	/* Enable RX'er and TX'er */
	UCSR1B |= (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    1060:	89 ec       	ldi	r24, 0xC9	; 201
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	29 ec       	ldi	r18, 0xC9	; 201
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	f9 01       	movw	r30, r18
    106a:	20 81       	ld	r18, Z
    106c:	28 69       	ori	r18, 0x98	; 152
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
	
	/* Enable global interrupts */
	sei();	
    1072:	78 94       	sei
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <updateStats>:
*
* Notes : 
*
*******************************************************************************/
void updateStats(HCBUFF hCbuff)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <updateStats+0x6>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
    termUpdateBytesInBuffer(cbuffGetFill(hCbuff));
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	0e 94 b1 03 	call	0x762	; 0x762 <cbuffGetFill>
    1090:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <termUpdateBytesInBuffer>
}    
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <error>:
*
* Notes : 
*
*******************************************************************************/
void error(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <error+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    int count = 0;
    10a8:	1a 82       	std	Y+2, r1	; 0x02
    10aa:	19 82       	std	Y+1, r1	; 0x01
    
    PORTB = 0x05;
    10ac:	85 e2       	ldi	r24, 0x25	; 37
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	25 e0       	ldi	r18, 0x05	; 5
    10b2:	fc 01       	movw	r30, r24
    10b4:	20 83       	st	Z, r18
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <error+0x1c>
        count++;
        if (count == 0xFFFF)
        {
            PORTB = !(PORTB | 0x0F);
        }    
    }    
    10b8:	00 00       	nop
    int count = 0;
    
    PORTB = 0x05;
    while(1)
    {
        count++;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
        if (count == 0xFFFF)
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	ff ef       	ldi	r31, 0xFF	; 255
    10ca:	8f 3f       	cpi	r24, 0xFF	; 255
    10cc:	9f 07       	cpc	r25, r31
    10ce:	a1 f7       	brne	.-24     	; 0x10b8 <error+0x1a>
        {
            PORTB = !(PORTB | 0x0F);
    10d0:	85 e2       	ldi	r24, 0x25	; 37
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	fc 01       	movw	r30, r24
    10d6:	80 81       	ld	r24, Z
    10d8:	85 e2       	ldi	r24, 0x25	; 37
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	fc 01       	movw	r30, r24
    10de:	10 82       	st	Z, r1
        }    
    }    
    10e0:	ec cf       	rjmp	.-40     	; 0x10ba <error+0x1c>

000010e2 <__vector_28>:
* Notes : 
*   This interrupt does not leave the global interrupt enable bit on because 
* the hardware register UDR1 is shared with the USART1 TX vector interrupt
*******************************************************************************/
ISR(USART1_RX_vect)
{
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	00 90 5b 00 	lds	r0, 0x005B
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <__vector_28+0x2e>
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    uint8_t rxData;
    unsigned int fillRate;
    
    PORTB ^= 0x01;
    1116:	85 e2       	ldi	r24, 0x25	; 37
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	25 e2       	ldi	r18, 0x25	; 37
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	f9 01       	movw	r30, r18
    1120:	30 81       	ld	r19, Z
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	23 27       	eor	r18, r19
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
    
    rxData = UDR1;
    112a:	8e ec       	ldi	r24, 0xCE	; 206
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	fc 01       	movw	r30, r24
    1130:	80 81       	ld	r24, Z
    1132:	8b 83       	std	Y+3, r24	; 0x03
    
    if (rxData == 'M' || rxData == 'm' || rxData == 'A' || rxData == 'a')
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	8d 34       	cpi	r24, 0x4D	; 77
    1138:	49 f0       	breq	.+18     	; 0x114c <__vector_28+0x6a>
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	8d 36       	cpi	r24, 0x6D	; 109
    113e:	31 f0       	breq	.+12     	; 0x114c <__vector_28+0x6a>
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	81 34       	cpi	r24, 0x41	; 65
    1144:	19 f0       	breq	.+6      	; 0x114c <__vector_28+0x6a>
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 36       	cpi	r24, 0x61	; 97
    114a:	21 f4       	brne	.+8      	; 0x1154 <__vector_28+0x72>
    {
        termSetBufferEmptyMode((char) rxData);
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <termSetBufferEmptyMode>
    1152:	49 c0       	rjmp	.+146    	; 0x11e6 <__vector_28+0x104>
    }    
    else if (rxData >= '0' && rxData <= '9')
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	80 33       	cpi	r24, 0x30	; 48
    1158:	38 f0       	brcs	.+14     	; 0x1168 <__vector_28+0x86>
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	8a 33       	cpi	r24, 0x3A	; 58
    115e:	20 f4       	brcc	.+8      	; 0x1168 <__vector_28+0x86>
    {
        termSetEmptyTrigger((char) rxData);
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <termSetEmptyTrigger>
    1166:	3f c0       	rjmp	.+126    	; 0x11e6 <__vector_28+0x104>
    } 
    else if (rxData == '+' || rxData == ',') /* ',' for keypad + */
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	8b 32       	cpi	r24, 0x2B	; 43
    116c:	19 f0       	breq	.+6      	; 0x1174 <__vector_28+0x92>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	8c 32       	cpi	r24, 0x2C	; 44
    1172:	61 f4       	brne	.+24     	; 0x118c <__vector_28+0xaa>
    {
        fillRate = termGetFillRate() + 1;
    1174:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <termGetFillRate>
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
        termSetFillRate(fillRate);
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <termSetFillRate>
        setTimer1IntRate();
    1186:	0e 94 09 08 	call	0x1012	; 0x1012 <setTimer1IntRate>
    118a:	2d c0       	rjmp	.+90     	; 0x11e6 <__vector_28+0x104>
    }
    else if (rxData == '-' || rxData == '.') /* ',' for keypad - */
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	8d 32       	cpi	r24, 0x2D	; 45
    1190:	19 f0       	breq	.+6      	; 0x1198 <__vector_28+0xb6>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	8e 32       	cpi	r24, 0x2E	; 46
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <__vector_28+0xde>
    {
        fillRate = termGetFillRate() - 1;
    1198:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <termGetFillRate>
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
        if (fillRate == 0)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <__vector_28+0xd0>
        {
            fillRate = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
        }
        termSetFillRate(fillRate);
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <termSetFillRate>
        setTimer1IntRate();
    11ba:	0e 94 09 08 	call	0x1012	; 0x1012 <setTimer1IntRate>
    11be:	13 c0       	rjmp	.+38     	; 0x11e6 <__vector_28+0x104>
    }
    else if (rxData == 'r' || rxData == 'R')
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	82 37       	cpi	r24, 0x72	; 114
    11c4:	19 f0       	breq	.+6      	; 0x11cc <__vector_28+0xea>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	82 35       	cpi	r24, 0x52	; 82
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <__vector_28+0xf0>
    {
        termRestartTerminal();
    11cc:	0e 94 14 10 	call	0x2028	; 0x2028 <termRestartTerminal>
    11d0:	0a c0       	rjmp	.+20     	; 0x11e6 <__vector_28+0x104>
    } 
    else if (rxData == ' ')
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	80 32       	cpi	r24, 0x20	; 32
    11d6:	39 f4       	brne	.+14     	; 0x11e6 <__vector_28+0x104>
    {
        if(!termIsAutomatic())
    11d8:	0e 94 0b 10 	call	0x2016	; 0x2016 <termIsAutomatic>
    11dc:	88 23       	and	r24, r24
    11de:	19 f4       	brne	.+6      	; 0x11e6 <__vector_28+0x104>
        {
            /* Empty Buffer */
            emptyBuffer = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	80 93 1a 05 	sts	0x051A, r24
        }    
    }
        
    termFullScreenUpdate();
    11e6:	0e 94 1e 10 	call	0x203c	; 0x203c <termFullScreenUpdate>
	
	PORTB ^= 0x01;
    11ea:	85 e2       	ldi	r24, 0x25	; 37
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	25 e2       	ldi	r18, 0x25	; 37
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	f9 01       	movw	r30, r18
    11f4:	30 81       	ld	r19, Z
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	23 27       	eor	r18, r19
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
}    
    11fe:	23 96       	adiw	r28, 0x03	; 3
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	00 92 5b 00 	sts	0x005B, r0
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <__vector_30>:
*
* Notes : 
*   This interrupt leaves the global interrupt enable bit on!
*******************************************************************************/
ISR(USART1_TX_vect, ISR_NOBLOCK)
{
    1230:	78 94       	sei
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	00 90 5b 00 	lds	r0, 0x005B
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= 0x04;
    1264:	85 e2       	ldi	r24, 0x25	; 37
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	25 e2       	ldi	r18, 0x25	; 37
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	f9 01       	movw	r30, r18
    126e:	30 81       	ld	r19, Z
    1270:	24 e0       	ldi	r18, 0x04	; 4
    1272:	23 27       	eor	r18, r19
    1274:	fc 01       	movw	r30, r24
    1276:	20 83       	st	Z, r18
	
    CBUFF txData;
    
    if (cbuffGetByte(hUartOutBuffer, &txData) == CBUFF_GET_OK)
    1278:	80 91 18 05 	lds	r24, 0x0518
    127c:	90 91 19 05 	lds	r25, 0x0519
    1280:	9e 01       	movw	r18, r28
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	b9 01       	movw	r22, r18
    1288:	0e 94 08 04 	call	0x810	; 0x810 <cbuffGetByte>
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	29 f4       	brne	.+10     	; 0x129a <__vector_30+0x6a>
    {
        UDR1 = (uint8_t) txData;
    1290:	8e ec       	ldi	r24, 0xCE	; 206
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	29 81       	ldd	r18, Y+1	; 0x01
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    }       
	PORTB ^= 0x04;
    129a:	85 e2       	ldi	r24, 0x25	; 37
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	25 e2       	ldi	r18, 0x25	; 37
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	f9 01       	movw	r30, r18
    12a4:	30 81       	ld	r19, Z
    12a6:	24 e0       	ldi	r18, 0x04	; 4
    12a8:	23 27       	eor	r18, r19
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
}  
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	00 92 5b 00 	sts	0x005B, r0
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <__vector_13>:
* Notes : 
*   This interrupt does not leave the global interrupt enable bit on because 
* Timer 1 has the highest priority of all enabled interrupts.
*******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	00 90 5b 00 	lds	r0, 0x005B
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    static unsigned char testData = 'A';
    
    PORTB ^= 0x02;
    130c:	85 e2       	ldi	r24, 0x25	; 37
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	25 e2       	ldi	r18, 0x25	; 37
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	f9 01       	movw	r30, r18
    1316:	30 81       	ld	r19, Z
    1318:	22 e0       	ldi	r18, 0x02	; 2
    131a:	23 27       	eor	r18, r19
    131c:	fc 01       	movw	r30, r24
    131e:	20 83       	st	Z, r18
                                        /* Put data in the test buffer -      */
                                        /* don't care if it fails             */
    cbuffPutByte(hTestBuffer, testData);
    1320:	80 91 16 05 	lds	r24, 0x0516
    1324:	90 91 17 05 	lds	r25, 0x0517
    1328:	20 91 00 01 	lds	r18, 0x0100
    132c:	62 2f       	mov	r22, r18
    132e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                                        /* Increment testData so it stays     */
                                        /* within 'A' to 'Z'                  */
    testData++;
    1332:	80 91 00 01 	lds	r24, 0x0100
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 00 01 	sts	0x0100, r24
    if(testData == ('Z' + 1))
    133c:	80 91 00 01 	lds	r24, 0x0100
    1340:	8b 35       	cpi	r24, 0x5B	; 91
    1342:	19 f4       	brne	.+6      	; 0x134a <__vector_13+0x6e>
    {
        testData = 'A';        
    1344:	81 e4       	ldi	r24, 0x41	; 65
    1346:	80 93 00 01 	sts	0x0100, r24
    }
	
	PORTB ^= 0x02;
    134a:	85 e2       	ldi	r24, 0x25	; 37
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	25 e2       	ldi	r18, 0x25	; 37
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	f9 01       	movw	r30, r18
    1354:	30 81       	ld	r19, Z
    1356:	22 e0       	ldi	r18, 0x02	; 2
    1358:	23 27       	eor	r18, r19
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
}  
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	7f 91       	pop	r23
    1370:	6f 91       	pop	r22
    1372:	5f 91       	pop	r21
    1374:	4f 91       	pop	r20
    1376:	3f 91       	pop	r19
    1378:	2f 91       	pop	r18
    137a:	0f 90       	pop	r0
    137c:	00 92 5b 00 	sts	0x005B, r0
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <termInit>:
/*******************************************************************************
*                            LOCAL CONFIGURATION ERRORS
*******************************************************************************/

void termInit(void)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	0f 92       	push	r0
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    unsigned char loopCount;
    
    for (loopCount = 0; loopCount < 50; loopCount++)
    1394:	19 82       	std	Y+1, r1	; 0x01
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <termInit+0x24>
    {
        checkBuffer[loopCount] = ' ';
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	85 5d       	subi	r24, 0xD5	; 213
    13a0:	9a 4f       	sbci	r25, 0xFA	; 250
    13a2:	20 e2       	ldi	r18, 0x20	; 32
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18

void termInit(void)
{
    unsigned char loopCount;
    
    for (loopCount = 0; loopCount < 50; loopCount++)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	82 33       	cpi	r24, 0x32	; 50
    13b2:	90 f3       	brcs	.-28     	; 0x1398 <termInit+0xe>
    {
        checkBuffer[loopCount] = ' ';
    }
        
    termData.bytesInBuffer = 0;
    13b4:	10 92 1d 05 	sts	0x051D, r1
    13b8:	10 92 1c 05 	sts	0x051C, r1
    termData.fillRate = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	90 93 1f 05 	sts	0x051F, r25
    13c4:	80 93 1e 05 	sts	0x051E, r24
    termData.fillBarLength = 0;
    13c8:	10 92 20 05 	sts	0x0520, r1
    termData.percentFilled = 0;
    13cc:	10 92 21 05 	sts	0x0521, r1
    termData.emptyOnBytesFree = 9;
    13d0:	89 e0       	ldi	r24, 0x09	; 9
    13d2:	80 93 22 05 	sts	0x0522, r24
    termData.termMode = MANUAL;
    13d6:	10 92 23 05 	sts	0x0523, r1
    termData.bytesInBufferCheck = 0;
    13da:	10 92 25 05 	sts	0x0525, r1
    13de:	10 92 24 05 	sts	0x0524, r1
    termData.producerSpeedTooHigh = SPEED_OK;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 26 05 	sts	0x0526, r24
    termData.bufferIntegrity = INTEGRITY_OK;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	80 93 28 05 	sts	0x0528, r24
    termData.oldLastChar = 0;
    13ee:	10 92 27 05 	sts	0x0527, r1
    termData.termFullScreenUpdate = FULLSCREEN_YES;
    13f2:	10 92 29 05 	sts	0x0529, r1
}
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <termOutput>:
*
* Notes : 
*
*******************************************************************************/
void termOutput(HCBUFF hCbuff)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	28 97       	sbiw	r28, 0x08	; 8
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	98 87       	std	Y+8, r25	; 0x08
    1414:	8f 83       	std	Y+7, r24	; 0x07
    unsigned int    uiTemp;
    CBUFF           cbuffTemp;
    CBUFF           cbuffUnits;
    CBUFF           cbuffTens;
    
    if (restartTerm)
    1416:	80 91 2a 05 	lds	r24, 0x052A
    141a:	88 23       	and	r24, r24
    141c:	21 f0       	breq	.+8      	; 0x1426 <termOutput+0x28>
    {
        termState = RESET_TERMINALA;
    141e:	10 92 1b 05 	sts	0x051B, r1
        restartTerm = 0;
    1422:	10 92 2a 05 	sts	0x052A, r1
    }
        
    switch(termState)
    1426:	80 91 1b 05 	lds	r24, 0x051B
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	aa 27       	eor	r26, r26
    1430:	97 fd       	sbrc	r25, 7
    1432:	a0 95       	com	r26
    1434:	ba 2f       	mov	r27, r26
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	25 e2       	ldi	r18, 0x25	; 37
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	84 1b       	sub	r24, r20
    1440:	95 0b       	sbc	r25, r21
    1442:	28 17       	cp	r18, r24
    1444:	39 07       	cpc	r19, r25
    1446:	08 f4       	brcc	.+2      	; 0x144a <termOutput+0x4c>
    1448:	a4 c4       	rjmp	.+2376   	; 0x1d92 <termOutput+0x994>
    144a:	8a 5b       	subi	r24, 0xBA	; 186
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	fc 01       	movw	r30, r24
    1450:	ee 0f       	add	r30, r30
    1452:	ff 1f       	adc	r31, r31
    1454:	05 90       	lpm	r0, Z+
    1456:	f4 91       	lpm	r31, Z+
    1458:	e0 2d       	mov	r30, r0
    145a:	09 94       	ijmp
    {
                                        /**************************************/
                                        /* RESET TERMINAL                     */
                                        /**************************************/
        case RESET_TERMINALA:
            cbuffClearBuffer(hCbuff);
    145c:	8f 81       	ldd	r24, Y+7	; 0x07
    145e:	98 85       	ldd	r25, Y+8	; 0x08
    1460:	0e 94 da 03 	call	0x7b4	; 0x7b4 <cbuffClearBuffer>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerma))
    1464:	8f 81       	ldd	r24, Y+7	; 0x07
    1466:	98 85       	ldd	r25, Y+8	; 0x08
    1468:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    146c:	86 30       	cpi	r24, 0x06	; 6
    146e:	91 05       	cpc	r25, r1
    1470:	08 f4       	brcc	.+2      	; 0x1474 <termOutput+0x76>
    1472:	44 c4       	rjmp	.+2184   	; 0x1cfc <termOutput+0x8fe>
            {
                cbuffPutArray(hCbuff, resetTerma, sizeof(resetTerma)-1);
    1474:	8f 81       	ldd	r24, Y+7	; 0x07
    1476:	98 85       	ldd	r25, Y+8	; 0x08
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	31 e0       	ldi	r19, 0x01	; 1
    147c:	b9 01       	movw	r22, r18
    147e:	44 e0       	ldi	r20, 0x04	; 4
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALB;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    148c:	82 c4       	rjmp	.+2308   	; 0x1d92 <termOutput+0x994>
            
        case RESET_TERMINALB:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
    148e:	8f 81       	ldd	r24, Y+7	; 0x07
    1490:	98 85       	ldd	r25, Y+8	; 0x08
    1492:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1496:	85 30       	cpi	r24, 0x05	; 5
    1498:	91 05       	cpc	r25, r1
    149a:	08 f4       	brcc	.+2      	; 0x149e <termOutput+0xa0>
    149c:	31 c4       	rjmp	.+2146   	; 0x1d00 <termOutput+0x902>
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	26 e0       	ldi	r18, 0x06	; 6
    14a4:	31 e0       	ldi	r19, 0x01	; 1
    14a6:	b9 01       	movw	r22, r18
    14a8:	43 e0       	ldi	r20, 0x03	; 3
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALC;
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	80 93 1b 05 	sts	0x051B, r24
            }    
            break; 
    14b6:	6d c4       	rjmp	.+2266   	; 0x1d92 <termOutput+0x994>
            
        case RESET_TERMINALC:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermc))
    14b8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ba:	98 85       	ldd	r25, Y+8	; 0x08
    14bc:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    14c0:	87 30       	cpi	r24, 0x07	; 7
    14c2:	91 05       	cpc	r25, r1
    14c4:	08 f4       	brcc	.+2      	; 0x14c8 <termOutput+0xca>
    14c6:	1e c4       	rjmp	.+2108   	; 0x1d04 <termOutput+0x906>
            {
                cbuffPutArray(hCbuff, resetTermc, sizeof(resetTermc)-1);
    14c8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ca:	98 85       	ldd	r25, Y+8	; 0x08
    14cc:	2a e0       	ldi	r18, 0x0A	; 10
    14ce:	31 e0       	ldi	r19, 0x01	; 1
    14d0:	b9 01       	movw	r22, r18
    14d2:	45 e0       	ldi	r20, 0x05	; 5
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALD;
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;  
    14e0:	58 c4       	rjmp	.+2224   	; 0x1d92 <termOutput+0x994>
            
        case RESET_TERMINALD:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermd))
    14e2:	8f 81       	ldd	r24, Y+7	; 0x07
    14e4:	98 85       	ldd	r25, Y+8	; 0x08
    14e6:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    14ea:	89 30       	cpi	r24, 0x09	; 9
    14ec:	91 05       	cpc	r25, r1
    14ee:	08 f4       	brcc	.+2      	; 0x14f2 <termOutput+0xf4>
    14f0:	0b c4       	rjmp	.+2070   	; 0x1d08 <termOutput+0x90a>
            {
                cbuffPutArray(hCbuff, resetTermd, sizeof(resetTermd)-1);
    14f2:	8f 81       	ldd	r24, Y+7	; 0x07
    14f4:	98 85       	ldd	r25, Y+8	; 0x08
    14f6:	20 e1       	ldi	r18, 0x10	; 16
    14f8:	31 e0       	ldi	r19, 0x01	; 1
    14fa:	b9 01       	movw	r22, r18
    14fc:	47 e0       	ldi	r20, 0x07	; 7
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALE;
    1504:	84 e0       	ldi	r24, 0x04	; 4
    1506:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;   
    150a:	43 c4       	rjmp	.+2182   	; 0x1d92 <termOutput+0x994>
        
        case RESET_TERMINALE:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerme))
    150c:	8f 81       	ldd	r24, Y+7	; 0x07
    150e:	98 85       	ldd	r25, Y+8	; 0x08
    1510:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1514:	88 30       	cpi	r24, 0x08	; 8
    1516:	91 05       	cpc	r25, r1
    1518:	08 f4       	brcc	.+2      	; 0x151c <termOutput+0x11e>
    151a:	f8 c3       	rjmp	.+2032   	; 0x1d0c <termOutput+0x90e>
            {
                cbuffPutArray(hCbuff, resetTerme, sizeof(resetTerme)-1);
    151c:	8f 81       	ldd	r24, Y+7	; 0x07
    151e:	98 85       	ldd	r25, Y+8	; 0x08
    1520:	28 e1       	ldi	r18, 0x18	; 24
    1522:	31 e0       	ldi	r19, 0x01	; 1
    1524:	b9 01       	movw	r22, r18
    1526:	46 e0       	ldi	r20, 0x06	; 6
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_1;
    152e:	86 e0       	ldi	r24, 0x06	; 6
    1530:	80 93 1b 05 	sts	0x051B, r24
            }    
            break; 
    1534:	2e c4       	rjmp	.+2140   	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* HOME CURSOR                        */
                                        /**************************************/        
        case HOME_CURSOR:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
    1536:	8f 81       	ldd	r24, Y+7	; 0x07
    1538:	98 85       	ldd	r25, Y+8	; 0x08
    153a:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    153e:	85 30       	cpi	r24, 0x05	; 5
    1540:	91 05       	cpc	r25, r1
    1542:	08 f4       	brcc	.+2      	; 0x1546 <termOutput+0x148>
    1544:	e5 c3       	rjmp	.+1994   	; 0x1d10 <termOutput+0x912>
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
    1546:	8f 81       	ldd	r24, Y+7	; 0x07
    1548:	98 85       	ldd	r25, Y+8	; 0x08
    154a:	26 e0       	ldi	r18, 0x06	; 6
    154c:	31 e0       	ldi	r19, 0x01	; 1
    154e:	b9 01       	movw	r22, r18
    1550:	43 e0       	ldi	r20, 0x03	; 3
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_1;
    1558:	86 e0       	ldi	r24, 0x06	; 6
    155a:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    155e:	19 c4       	rjmp	.+2098   	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 1                      */
                                        /**************************************/
        case OUTPUT_LINE_1:
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine1)))
    1560:	8f 81       	ldd	r24, Y+7	; 0x07
    1562:	98 85       	ldd	r25, Y+8	; 0x08
    1564:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1568:	8d 32       	cpi	r24, 0x2D	; 45
    156a:	91 05       	cpc	r25, r1
    156c:	08 f4       	brcc	.+2      	; 0x1570 <termOutput+0x172>
    156e:	d2 c3       	rjmp	.+1956   	; 0x1d14 <termOutput+0x916>
            {
                cbuffPutArray(hCbuff, termLine1, sizeof(termLine1)-1);
    1570:	8f 81       	ldd	r24, Y+7	; 0x07
    1572:	98 85       	ldd	r25, Y+8	; 0x08
    1574:	2f e1       	ldi	r18, 0x1F	; 31
    1576:	31 e0       	ldi	r19, 0x01	; 1
    1578:	b9 01       	movw	r22, r18
    157a:	4b e2       	ldi	r20, 0x2B	; 43
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3A;
    1582:	88 e0       	ldi	r24, 0x08	; 8
    1584:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;  
    1588:	04 c4       	rjmp	.+2056   	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 2                      */
                                        /**************************************/
        case OUTPUT_LINE_2:
            if (cbuffGetSpace(hCbuff) > sizeof(termReturn))
    158a:	8f 81       	ldd	r24, Y+7	; 0x07
    158c:	98 85       	ldd	r25, Y+8	; 0x08
    158e:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	91 05       	cpc	r25, r1
    1596:	08 f4       	brcc	.+2      	; 0x159a <termOutput+0x19c>
    1598:	bf c3       	rjmp	.+1918   	; 0x1d18 <termOutput+0x91a>
            {
                cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
    159a:	8f 81       	ldd	r24, Y+7	; 0x07
    159c:	98 85       	ldd	r25, Y+8	; 0x08
    159e:	21 ec       	ldi	r18, 0xC1	; 193
    15a0:	32 e0       	ldi	r19, 0x02	; 2
    15a2:	b9 01       	movw	r22, r18
    15a4:	42 e0       	ldi	r20, 0x02	; 2
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3A;
    15ac:	88 e0       	ldi	r24, 0x08	; 8
    15ae:	80 93 1b 05 	sts	0x051B, r24
            }    
            break; 
    15b2:	ef c3       	rjmp	.+2014   	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 3                      */
                                        /**************************************/
        case OUTPUT_LINE_3A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3a))
    15b4:	8f 81       	ldd	r24, Y+7	; 0x07
    15b6:	98 85       	ldd	r25, Y+8	; 0x08
    15b8:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    15bc:	86 31       	cpi	r24, 0x16	; 22
    15be:	91 05       	cpc	r25, r1
    15c0:	08 f4       	brcc	.+2      	; 0x15c4 <termOutput+0x1c6>
    15c2:	ac c3       	rjmp	.+1880   	; 0x1d1c <termOutput+0x91e>
            {
                cbuffPutArray(hCbuff, termLine3a, sizeof(termLine3a)-1);
    15c4:	8f 81       	ldd	r24, Y+7	; 0x07
    15c6:	98 85       	ldd	r25, Y+8	; 0x08
    15c8:	2b e4       	ldi	r18, 0x4B	; 75
    15ca:	31 e0       	ldi	r19, 0x01	; 1
    15cc:	b9 01       	movw	r22, r18
    15ce:	44 e1       	ldi	r20, 0x14	; 20
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3B;
    15d6:	89 e0       	ldi	r24, 0x09	; 9
    15d8:	80 93 1b 05 	sts	0x051B, r24
            }    
            break; 
    15dc:	da c3       	rjmp	.+1972   	; 0x1d92 <termOutput+0x994>
            
        case OUTPUT_LINE_3B:
            if (cbuffGetSpace(hCbuff) > 3)
    15de:	8f 81       	ldd	r24, Y+7	; 0x07
    15e0:	98 85       	ldd	r25, Y+8	; 0x08
    15e2:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	91 05       	cpc	r25, r1
    15ea:	08 f4       	brcc	.+2      	; 0x15ee <termOutput+0x1f0>
    15ec:	99 c3       	rjmp	.+1842   	; 0x1d20 <termOutput+0x922>
            {
                uiTemp = termData.bytesInBuffer;
    15ee:	80 91 1c 05 	lds	r24, 0x051C
    15f2:	90 91 1d 05 	lds	r25, 0x051D
    15f6:	9b 83       	std	Y+3, r25	; 0x03
    15f8:	8a 83       	std	Y+2, r24	; 0x02
                if(uiTemp < 10)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	8a 30       	cpi	r24, 0x0A	; 10
    1600:	91 05       	cpc	r25, r1
    1602:	70 f4       	brcc	.+28     	; 0x1620 <termOutput+0x222>
                {
                    cbuffPutByte(hCbuff, ' ');
    1604:	8f 81       	ldd	r24, Y+7	; 0x07
    1606:	98 85       	ldd	r25, Y+8	; 0x08
    1608:	60 e2       	ldi	r22, 0x20	; 32
    160a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, (CBUFF)(uiTemp + '0'));
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	20 5d       	subi	r18, 0xD0	; 208
    1614:	8f 81       	ldd	r24, Y+7	; 0x07
    1616:	98 85       	ldd	r25, Y+8	; 0x08
    1618:	62 2f       	mov	r22, r18
    161a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    161e:	22 c0       	rjmp	.+68     	; 0x1664 <termOutput+0x266>
                }
                else
                {
                                        /* Convert value into two chars       */
                    cbuffTemp = (CBUFF) (uiTemp % 10);
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	2a e0       	ldi	r18, 0x0A	; 10
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	b9 01       	movw	r22, r18
    162a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodhi4>
    162e:	8c 83       	std	Y+4, r24	; 0x04
                    uiTemp = uiTemp / 10;
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	2a e0       	ldi	r18, 0x0A	; 10
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	b9 01       	movw	r22, r18
    163a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodhi4>
    163e:	9b 01       	movw	r18, r22
    1640:	3b 83       	std	Y+3, r19	; 0x03
    1642:	2a 83       	std	Y+2, r18	; 0x02
                    cbuffPutByte(hCbuff, (CBUFF)(uiTemp + '0'));
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	20 5d       	subi	r18, 0xD0	; 208
    164a:	8f 81       	ldd	r24, Y+7	; 0x07
    164c:	98 85       	ldd	r25, Y+8	; 0x08
    164e:	62 2f       	mov	r22, r18
    1650:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, cbuffTemp + '0');
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	28 2f       	mov	r18, r24
    1658:	20 5d       	subi	r18, 0xD0	; 208
    165a:	8f 81       	ldd	r24, Y+7	; 0x07
    165c:	98 85       	ldd	r25, Y+8	; 0x08
    165e:	62 2f       	mov	r22, r18
    1660:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                }    
                termState = OUTPUT_LINE_3C;
    1664:	8a e0       	ldi	r24, 0x0A	; 10
    1666:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    166a:	93 c3       	rjmp	.+1830   	; 0x1d92 <termOutput+0x994>
        
        case OUTPUT_LINE_3C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3c))
    166c:	8f 81       	ldd	r24, Y+7	; 0x07
    166e:	98 85       	ldd	r25, Y+8	; 0x08
    1670:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1674:	87 31       	cpi	r24, 0x17	; 23
    1676:	91 05       	cpc	r25, r1
    1678:	08 f4       	brcc	.+2      	; 0x167c <termOutput+0x27e>
    167a:	54 c3       	rjmp	.+1704   	; 0x1d24 <termOutput+0x926>
            {
                cbuffPutArray(hCbuff, termLine3c, sizeof(termLine3c)-1);
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	98 85       	ldd	r25, Y+8	; 0x08
    1680:	20 e6       	ldi	r18, 0x60	; 96
    1682:	31 e0       	ldi	r19, 0x01	; 1
    1684:	b9 01       	movw	r22, r18
    1686:	45 e1       	ldi	r20, 0x15	; 21
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_4A;
    168e:	8b e0       	ldi	r24, 0x0B	; 11
    1690:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1694:	7e c3       	rjmp	.+1788   	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 4                      */
                                        /**************************************/
        case OUTPUT_LINE_4A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4a))
    1696:	8f 81       	ldd	r24, Y+7	; 0x07
    1698:	98 85       	ldd	r25, Y+8	; 0x08
    169a:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <termOutput+0x2a8>
    16a4:	41 c3       	rjmp	.+1666   	; 0x1d28 <termOutput+0x92a>
            {
                cbuffPutArray(hCbuff, termLine4a, sizeof(termLine4a)-1);
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	26 e7       	ldi	r18, 0x76	; 118
    16ac:	31 e0       	ldi	r19, 0x01	; 1
    16ae:	b9 01       	movw	r22, r18
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_4B;
    16b8:	8c e0       	ldi	r24, 0x0C	; 12
    16ba:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    16be:	69 c3       	rjmp	.+1746   	; 0x1d92 <termOutput+0x994>
            
        case OUTPUT_LINE_4B:
            if (cbuffGetSpace(hCbuff) > 70)
    16c0:	8f 81       	ldd	r24, Y+7	; 0x07
    16c2:	98 85       	ldd	r25, Y+8	; 0x08
    16c4:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    16c8:	87 34       	cpi	r24, 0x47	; 71
    16ca:	91 05       	cpc	r25, r1
    16cc:	08 f4       	brcc	.+2      	; 0x16d0 <termOutput+0x2d2>
    16ce:	2e c3       	rjmp	.+1628   	; 0x1d2c <termOutput+0x92e>
            {
                unsigned char count;
                
                for (count = 0; count < 70; count++)
    16d0:	19 82       	std	Y+1, r1	; 0x01
    16d2:	13 c0       	rjmp	.+38     	; 0x16fa <termOutput+0x2fc>
                {
                    if (count < termData.fillBarLength)
    16d4:	90 91 20 05 	lds	r25, 0x0520
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	89 17       	cp	r24, r25
    16dc:	30 f4       	brcc	.+12     	; 0x16ea <termOutput+0x2ec>
                    {
                        //cbuffPutByte(hCbuff, 176);
                        cbuffPutByte(hCbuff, '#');
    16de:	8f 81       	ldd	r24, Y+7	; 0x07
    16e0:	98 85       	ldd	r25, Y+8	; 0x08
    16e2:	63 e2       	ldi	r22, 0x23	; 35
    16e4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <termOutput+0x2f6>
                    }
                    else
                    {
                        cbuffPutByte(hCbuff, ' ');
    16ea:	8f 81       	ldd	r24, Y+7	; 0x07
    16ec:	98 85       	ldd	r25, Y+8	; 0x08
    16ee:	60 e2       	ldi	r22, 0x20	; 32
    16f0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
        case OUTPUT_LINE_4B:
            if (cbuffGetSpace(hCbuff) > 70)
            {
                unsigned char count;
                
                for (count = 0; count < 70; count++)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	86 34       	cpi	r24, 0x46	; 70
    16fe:	50 f3       	brcs	.-44     	; 0x16d4 <termOutput+0x2d6>
                    else
                    {
                        cbuffPutByte(hCbuff, ' ');
                    }        
                }    
                termState = OUTPUT_LINE_4C;
    1700:	8d e0       	ldi	r24, 0x0D	; 13
    1702:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1706:	45 c3       	rjmp	.+1674   	; 0x1d92 <termOutput+0x994>
            
        case OUTPUT_LINE_4C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4c))
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
    170a:	98 85       	ldd	r25, Y+8	; 0x08
    170c:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1710:	86 30       	cpi	r24, 0x06	; 6
    1712:	91 05       	cpc	r25, r1
    1714:	08 f4       	brcc	.+2      	; 0x1718 <termOutput+0x31a>
    1716:	0c c3       	rjmp	.+1560   	; 0x1d30 <termOutput+0x932>
            {
                cbuffPutArray(hCbuff, termLine4c, sizeof(termLine4c)-1);
    1718:	8f 81       	ldd	r24, Y+7	; 0x07
    171a:	98 85       	ldd	r25, Y+8	; 0x08
    171c:	28 e7       	ldi	r18, 0x78	; 120
    171e:	31 e0       	ldi	r19, 0x01	; 1
    1720:	b9 01       	movw	r22, r18
    1722:	44 e0       	ldi	r20, 0x04	; 4
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_4D;
    172a:	8e e0       	ldi	r24, 0x0E	; 14
    172c:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1730:	30 c3       	rjmp	.+1632   	; 0x1d92 <termOutput+0x994>
        
        case OUTPUT_LINE_4D:
            if (cbuffGetSpace(hCbuff) > 4)
    1732:	8f 81       	ldd	r24, Y+7	; 0x07
    1734:	98 85       	ldd	r25, Y+8	; 0x08
    1736:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    173a:	85 30       	cpi	r24, 0x05	; 5
    173c:	91 05       	cpc	r25, r1
    173e:	08 f4       	brcc	.+2      	; 0x1742 <termOutput+0x344>
    1740:	f9 c2       	rjmp	.+1522   	; 0x1d34 <termOutput+0x936>
            {
                cbuffUnits = termData.percentFilled;
    1742:	80 91 21 05 	lds	r24, 0x0521
    1746:	8d 83       	std	Y+5, r24	; 0x05
                if(cbuffUnits < 10)
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	8a 30       	cpi	r24, 0x0A	; 10
    174c:	48 f4       	brcc	.+18     	; 0x1760 <termOutput+0x362>
                {
                    cbuffPutByte(hCbuff, (CBUFF)(cbuffUnits + '0'));
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	28 2f       	mov	r18, r24
    1752:	20 5d       	subi	r18, 0xD0	; 208
    1754:	8f 81       	ldd	r24, Y+7	; 0x07
    1756:	98 85       	ldd	r25, Y+8	; 0x08
    1758:	62 2f       	mov	r22, r18
    175a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    175e:	30 c0       	rjmp	.+96     	; 0x17c0 <termOutput+0x3c2>
                }
                else if (cbuffUnits < 100)
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	84 36       	cpi	r24, 0x64	; 100
    1764:	f0 f4       	brcc	.+60     	; 0x17a2 <termOutput+0x3a4>
                {
                                        /* Convert value into two chars       */
                    cbuffTens = cbuffUnits / 10;
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9a e0       	ldi	r25, 0x0A	; 10
    176a:	69 2f       	mov	r22, r25
    176c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__udivmodqi4>
    1770:	8e 83       	std	Y+6, r24	; 0x06
                    cbuffUnits = cbuffUnits % 10;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9a e0       	ldi	r25, 0x0A	; 10
    1776:	69 2f       	mov	r22, r25
    1778:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__udivmodqi4>
    177c:	89 2f       	mov	r24, r25
    177e:	8d 83       	std	Y+5, r24	; 0x05
                    cbuffPutByte(hCbuff, cbuffTens + '0');
    1780:	8e 81       	ldd	r24, Y+6	; 0x06
    1782:	28 2f       	mov	r18, r24
    1784:	20 5d       	subi	r18, 0xD0	; 208
    1786:	8f 81       	ldd	r24, Y+7	; 0x07
    1788:	98 85       	ldd	r25, Y+8	; 0x08
    178a:	62 2f       	mov	r22, r18
    178c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, cbuffUnits + '0');
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	28 2f       	mov	r18, r24
    1794:	20 5d       	subi	r18, 0xD0	; 208
    1796:	8f 81       	ldd	r24, Y+7	; 0x07
    1798:	98 85       	ldd	r25, Y+8	; 0x08
    179a:	62 2f       	mov	r22, r18
    179c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <termOutput+0x3c2>
                }
                else
                {
                    cbuffPutByte(hCbuff, '1');
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	61 e3       	ldi	r22, 0x31	; 49
    17a8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, '0');
    17ac:	8f 81       	ldd	r24, Y+7	; 0x07
    17ae:	98 85       	ldd	r25, Y+8	; 0x08
    17b0:	60 e3       	ldi	r22, 0x30	; 48
    17b2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, '0');
    17b6:	8f 81       	ldd	r24, Y+7	; 0x07
    17b8:	98 85       	ldd	r25, Y+8	; 0x08
    17ba:	60 e3       	ldi	r22, 0x30	; 48
    17bc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                }      
                if (termData.termFullScreenUpdate == FULLSCREEN_YES)
    17c0:	80 91 29 05 	lds	r24, 0x0529
    17c4:	88 23       	and	r24, r24
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <termOutput+0x3d8>
                {
                    termData.termFullScreenUpdate = FULLSCREEN_NO;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	80 93 29 05 	sts	0x0529, r24
                    termState = OUTPUT_LINE_4E;
    17ce:	8f e0       	ldi	r24, 0x0F	; 15
    17d0:	80 93 1b 05 	sts	0x051B, r24
                else
                {
                    termState = OUTPUT_LINE_4F;
                }    
            }    
            break;
    17d4:	de c2       	rjmp	.+1468   	; 0x1d92 <termOutput+0x994>
                    termData.termFullScreenUpdate = FULLSCREEN_NO;
                    termState = OUTPUT_LINE_4E;
                }
                else
                {
                    termState = OUTPUT_LINE_4F;
    17d6:	80 e1       	ldi	r24, 0x10	; 16
    17d8:	80 93 1b 05 	sts	0x051B, r24
                }    
            }    
            break;
    17dc:	da c2       	rjmp	.+1460   	; 0x1d92 <termOutput+0x994>
        
        case OUTPUT_LINE_4E:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4e))
    17de:	8f 81       	ldd	r24, Y+7	; 0x07
    17e0:	98 85       	ldd	r25, Y+8	; 0x08
    17e2:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    17e6:	87 30       	cpi	r24, 0x07	; 7
    17e8:	91 05       	cpc	r25, r1
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <termOutput+0x3f0>
    17ec:	a5 c2       	rjmp	.+1354   	; 0x1d38 <termOutput+0x93a>
            {
                cbuffPutArray(hCbuff, termLine4e, sizeof(termLine4e)-1);
    17ee:	8f 81       	ldd	r24, Y+7	; 0x07
    17f0:	98 85       	ldd	r25, Y+8	; 0x08
    17f2:	2d e7       	ldi	r18, 0x7D	; 125
    17f4:	31 e0       	ldi	r19, 0x01	; 1
    17f6:	b9 01       	movw	r22, r18
    17f8:	45 e0       	ldi	r20, 0x05	; 5
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_6A;
    1800:	81 e1       	ldi	r24, 0x11	; 17
    1802:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1806:	c5 c2       	rjmp	.+1418   	; 0x1d92 <termOutput+0x994>
        case OUTPUT_LINE_4F:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4f))
    1808:	8f 81       	ldd	r24, Y+7	; 0x07
    180a:	98 85       	ldd	r25, Y+8	; 0x08
    180c:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1810:	88 30       	cpi	r24, 0x08	; 8
    1812:	91 05       	cpc	r25, r1
    1814:	08 f4       	brcc	.+2      	; 0x1818 <termOutput+0x41a>
    1816:	92 c2       	rjmp	.+1316   	; 0x1d3c <termOutput+0x93e>
            {
                cbuffPutArray(hCbuff, termLine4f, sizeof(termLine4f)-1);
    1818:	8f 81       	ldd	r24, Y+7	; 0x07
    181a:	98 85       	ldd	r25, Y+8	; 0x08
    181c:	23 e8       	ldi	r18, 0x83	; 131
    181e:	31 e0       	ldi	r19, 0x01	; 1
    1820:	b9 01       	movw	r22, r18
    1822:	46 e0       	ldi	r20, 0x06	; 6
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3A;
    182a:	88 e0       	ldi	r24, 0x08	; 8
    182c:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1830:	b0 c2       	rjmp	.+1376   	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 6                      */
                                        /**************************************/
        case OUTPUT_LINE_6A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6a))
    1832:	8f 81       	ldd	r24, Y+7	; 0x07
    1834:	98 85       	ldd	r25, Y+8	; 0x08
    1836:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    183a:	82 32       	cpi	r24, 0x22	; 34
    183c:	91 05       	cpc	r25, r1
    183e:	08 f4       	brcc	.+2      	; 0x1842 <termOutput+0x444>
    1840:	7f c2       	rjmp	.+1278   	; 0x1d40 <termOutput+0x942>
            {
                cbuffPutArray(hCbuff, termLine6a, sizeof(termLine6a)-1);
    1842:	8f 81       	ldd	r24, Y+7	; 0x07
    1844:	98 85       	ldd	r25, Y+8	; 0x08
    1846:	2a e8       	ldi	r18, 0x8A	; 138
    1848:	31 e0       	ldi	r19, 0x01	; 1
    184a:	b9 01       	movw	r22, r18
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_6B;
    1854:	82 e1       	ldi	r24, 0x12	; 18
    1856:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    185a:	9b c2       	rjmp	.+1334   	; 0x1d92 <termOutput+0x994>
            
         case OUTPUT_LINE_6B:
            if (cbuffGetSpace(hCbuff) > 6)
    185c:	8f 81       	ldd	r24, Y+7	; 0x07
    185e:	98 85       	ldd	r25, Y+8	; 0x08
    1860:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1864:	87 30       	cpi	r24, 0x07	; 7
    1866:	91 05       	cpc	r25, r1
    1868:	08 f4       	brcc	.+2      	; 0x186c <termOutput+0x46e>
    186a:	6c c2       	rjmp	.+1240   	; 0x1d44 <termOutput+0x946>
            {
                if(termData.fillRate < 10)
    186c:	80 91 1e 05 	lds	r24, 0x051E
    1870:	90 91 1f 05 	lds	r25, 0x051F
    1874:	8a 30       	cpi	r24, 0x0A	; 10
    1876:	91 05       	cpc	r25, r1
    1878:	88 f4       	brcc	.+34     	; 0x189c <termOutput+0x49e>
                {
                    cbuffPutByte(hCbuff, ' ');
    187a:	8f 81       	ldd	r24, Y+7	; 0x07
    187c:	98 85       	ldd	r25, Y+8	; 0x08
    187e:	60 e2       	ldi	r22, 0x20	; 32
    1880:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, (CBUFF) termData.fillRate + '0');
    1884:	80 91 1e 05 	lds	r24, 0x051E
    1888:	90 91 1f 05 	lds	r25, 0x051F
    188c:	28 2f       	mov	r18, r24
    188e:	20 5d       	subi	r18, 0xD0	; 208
    1890:	8f 81       	ldd	r24, Y+7	; 0x07
    1892:	98 85       	ldd	r25, Y+8	; 0x08
    1894:	62 2f       	mov	r22, r18
    1896:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    189a:	31 c0       	rjmp	.+98     	; 0x18fe <termOutput+0x500>
                }
                else if (termData.fillRate < 100)
    189c:	80 91 1e 05 	lds	r24, 0x051E
    18a0:	90 91 1f 05 	lds	r25, 0x051F
    18a4:	84 36       	cpi	r24, 0x64	; 100
    18a6:	91 05       	cpc	r25, r1
    18a8:	50 f5       	brcc	.+84     	; 0x18fe <termOutput+0x500>
                {
                    cbuffTens = (CBUFF) (termData.fillRate / 10) + '0';
    18aa:	80 91 1e 05 	lds	r24, 0x051E
    18ae:	90 91 1f 05 	lds	r25, 0x051F
    18b2:	2a e0       	ldi	r18, 0x0A	; 10
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	b9 01       	movw	r22, r18
    18b8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__udivmodhi4>
    18bc:	9b 01       	movw	r18, r22
    18be:	c9 01       	movw	r24, r18
    18c0:	80 5d       	subi	r24, 0xD0	; 208
    18c2:	8e 83       	std	Y+6, r24	; 0x06
                    cbuffPutByte(hCbuff, cbuffTens);
    18c4:	8f 81       	ldd	r24, Y+7	; 0x07
    18c6:	98 85       	ldd	r25, Y+8	; 0x08
    18c8:	6e 81       	ldd	r22, Y+6	; 0x06
    18ca:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffTens = (cbuffTens - '0') * 10;
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	88 0f       	add	r24, r24
    18d2:	98 2f       	mov	r25, r24
    18d4:	99 0f       	add	r25, r25
    18d6:	99 0f       	add	r25, r25
    18d8:	89 0f       	add	r24, r25
    18da:	80 5e       	subi	r24, 0xE0	; 224
    18dc:	8e 83       	std	Y+6, r24	; 0x06
                    cbuffUnits = (CBUFF) (termData.fillRate - cbuffTens) + '0';
    18de:	80 91 1e 05 	lds	r24, 0x051E
    18e2:	90 91 1f 05 	lds	r25, 0x051F
    18e6:	98 2f       	mov	r25, r24
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	f9 2f       	mov	r31, r25
    18ec:	f8 1b       	sub	r31, r24
    18ee:	8f 2f       	mov	r24, r31
    18f0:	80 5d       	subi	r24, 0xD0	; 208
    18f2:	8d 83       	std	Y+5, r24	; 0x05
                    
                    cbuffPutByte(hCbuff, cbuffUnits);
    18f4:	8f 81       	ldd	r24, Y+7	; 0x07
    18f6:	98 85       	ldd	r25, Y+8	; 0x08
    18f8:	6d 81       	ldd	r22, Y+5	; 0x05
    18fa:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                }      
                termState = OUTPUT_LINE_6C;  
    18fe:	83 e1       	ldi	r24, 0x13	; 19
    1900:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1904:	46 c2       	rjmp	.+1164   	; 0x1d92 <termOutput+0x994>
            
         case OUTPUT_LINE_6C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6c))
    1906:	8f 81       	ldd	r24, Y+7	; 0x07
    1908:	98 85       	ldd	r25, Y+8	; 0x08
    190a:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    190e:	88 31       	cpi	r24, 0x18	; 24
    1910:	91 05       	cpc	r25, r1
    1912:	08 f4       	brcc	.+2      	; 0x1916 <termOutput+0x518>
    1914:	19 c2       	rjmp	.+1074   	; 0x1d48 <termOutput+0x94a>
            {
                cbuffPutArray(hCbuff, termLine6c, sizeof(termLine6c)-1);
    1916:	8f 81       	ldd	r24, Y+7	; 0x07
    1918:	98 85       	ldd	r25, Y+8	; 0x08
    191a:	2b ea       	ldi	r18, 0xAB	; 171
    191c:	31 e0       	ldi	r19, 0x01	; 1
    191e:	b9 01       	movw	r22, r18
    1920:	46 e1       	ldi	r20, 0x16	; 22
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_8A;
    1928:	84 e1       	ldi	r24, 0x14	; 20
    192a:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    192e:	31 c2       	rjmp	.+1122   	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 8                      */
                                        /**************************************/
        case OUTPUT_LINE_8A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8a))
    1930:	8f 81       	ldd	r24, Y+7	; 0x07
    1932:	98 85       	ldd	r25, Y+8	; 0x08
    1934:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1938:	86 31       	cpi	r24, 0x16	; 22
    193a:	91 05       	cpc	r25, r1
    193c:	08 f4       	brcc	.+2      	; 0x1940 <termOutput+0x542>
    193e:	06 c2       	rjmp	.+1036   	; 0x1d4c <termOutput+0x94e>
            {
                cbuffPutArray(hCbuff, termLine8a, sizeof(termLine8a)-1);
    1940:	8f 81       	ldd	r24, Y+7	; 0x07
    1942:	98 85       	ldd	r25, Y+8	; 0x08
    1944:	22 ec       	ldi	r18, 0xC2	; 194
    1946:	31 e0       	ldi	r19, 0x01	; 1
    1948:	b9 01       	movw	r22, r18
    194a:	44 e1       	ldi	r20, 0x14	; 20
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_8B;
    1952:	85 e1       	ldi	r24, 0x15	; 21
    1954:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1958:	1c c2       	rjmp	.+1080   	; 0x1d92 <termOutput+0x994>
        case OUTPUT_LINE_8B:
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine8b) + 2))
    195a:	8f 81       	ldd	r24, Y+7	; 0x07
    195c:	98 85       	ldd	r25, Y+8	; 0x08
    195e:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1962:	8c 30       	cpi	r24, 0x0C	; 12
    1964:	91 05       	cpc	r25, r1
    1966:	08 f4       	brcc	.+2      	; 0x196a <termOutput+0x56c>
    1968:	f3 c1       	rjmp	.+998    	; 0x1d50 <termOutput+0x952>
            {
                if(termData.termMode == MANUAL)
    196a:	80 91 23 05 	lds	r24, 0x0523
    196e:	88 23       	and	r24, r24
    1970:	b9 f4       	brne	.+46     	; 0x19a0 <termOutput+0x5a2>
                {
                    cbuffPutByte(hCbuff, '>');
    1972:	8f 81       	ldd	r24, Y+7	; 0x07
    1974:	98 85       	ldd	r25, Y+8	; 0x08
    1976:	6e e3       	ldi	r22, 0x3E	; 62
    1978:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
    197c:	8f 81       	ldd	r24, Y+7	; 0x07
    197e:	98 85       	ldd	r25, Y+8	; 0x08
    1980:	27 ed       	ldi	r18, 0xD7	; 215
    1982:	31 e0       	ldi	r19, 0x01	; 1
    1984:	b9 01       	movw	r22, r18
    1986:	48 e0       	ldi	r20, 0x08	; 8
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, '<');
    198e:	8f 81       	ldd	r24, Y+7	; 0x07
    1990:	98 85       	ldd	r25, Y+8	; 0x08
    1992:	6c e3       	ldi	r22, 0x3C	; 60
    1994:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    termState = OUTPUT_LINE_8C;
    1998:	86 e1       	ldi	r24, 0x16	; 22
    199a:	80 93 1b 05 	sts	0x051B, r24
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
                    cbuffPutByte(hCbuff, ' ');
                    termState = OUTPUT_LINE_8C;
                }        
            }    
            break;
    199e:	f9 c1       	rjmp	.+1010   	; 0x1d92 <termOutput+0x994>
                    cbuffPutByte(hCbuff, '<');
                    termState = OUTPUT_LINE_8C;
                }
                else
                {
                    cbuffPutByte(hCbuff, ' ');
    19a0:	8f 81       	ldd	r24, Y+7	; 0x07
    19a2:	98 85       	ldd	r25, Y+8	; 0x08
    19a4:	60 e2       	ldi	r22, 0x20	; 32
    19a6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
    19aa:	8f 81       	ldd	r24, Y+7	; 0x07
    19ac:	98 85       	ldd	r25, Y+8	; 0x08
    19ae:	27 ed       	ldi	r18, 0xD7	; 215
    19b0:	31 e0       	ldi	r19, 0x01	; 1
    19b2:	b9 01       	movw	r22, r18
    19b4:	48 e0       	ldi	r20, 0x08	; 8
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, ' ');
    19bc:	8f 81       	ldd	r24, Y+7	; 0x07
    19be:	98 85       	ldd	r25, Y+8	; 0x08
    19c0:	60 e2       	ldi	r22, 0x20	; 32
    19c2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    termState = OUTPUT_LINE_8C;
    19c6:	86 e1       	ldi	r24, 0x16	; 22
    19c8:	80 93 1b 05 	sts	0x051B, r24
                }        
            }    
            break;
    19cc:	e2 c1       	rjmp	.+964    	; 0x1d92 <termOutput+0x994>
        case OUTPUT_LINE_8C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8c))
    19ce:	8f 81       	ldd	r24, Y+7	; 0x07
    19d0:	98 85       	ldd	r25, Y+8	; 0x08
    19d2:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    19d6:	85 30       	cpi	r24, 0x05	; 5
    19d8:	91 05       	cpc	r25, r1
    19da:	08 f4       	brcc	.+2      	; 0x19de <termOutput+0x5e0>
    19dc:	bb c1       	rjmp	.+886    	; 0x1d54 <termOutput+0x956>
            {
                cbuffPutArray(hCbuff, termLine8c, sizeof(termLine8c)-1);
    19de:	8f 81       	ldd	r24, Y+7	; 0x07
    19e0:	98 85       	ldd	r25, Y+8	; 0x08
    19e2:	20 ee       	ldi	r18, 0xE0	; 224
    19e4:	31 e0       	ldi	r19, 0x01	; 1
    19e6:	b9 01       	movw	r22, r18
    19e8:	43 e0       	ldi	r20, 0x03	; 3
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_8D;
    19f0:	87 e1       	ldi	r24, 0x17	; 23
    19f2:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    19f6:	cd c1       	rjmp	.+922    	; 0x1d92 <termOutput+0x994>
        case OUTPUT_LINE_8D:
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine8d) + 2 
    19f8:	8f 81       	ldd	r24, Y+7	; 0x07
    19fa:	98 85       	ldd	r25, Y+8	; 0x08
    19fc:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1a00:	84 31       	cpi	r24, 0x14	; 20
    1a02:	91 05       	cpc	r25, r1
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <termOutput+0x60a>
    1a06:	a8 c1       	rjmp	.+848    	; 0x1d58 <termOutput+0x95a>
                                                + sizeof(termReturn)))
            {
                if(termData.termMode == AUTOMATIC)
    1a08:	80 91 23 05 	lds	r24, 0x0523
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	01 f5       	brne	.+64     	; 0x1a50 <termOutput+0x652>
                {
                    cbuffPutByte(hCbuff, '>');
    1a10:	8f 81       	ldd	r24, Y+7	; 0x07
    1a12:	98 85       	ldd	r25, Y+8	; 0x08
    1a14:	6e e3       	ldi	r22, 0x3E	; 62
    1a16:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8d, sizeof(termLine8d)-1);
    1a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1c:	98 85       	ldd	r25, Y+8	; 0x08
    1a1e:	24 ee       	ldi	r18, 0xE4	; 228
    1a20:	31 e0       	ldi	r19, 0x01	; 1
    1a22:	b9 01       	movw	r22, r18
    1a24:	4d e0       	ldi	r20, 0x0D	; 13
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, '<');
    1a2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2e:	98 85       	ldd	r25, Y+8	; 0x08
    1a30:	6c e3       	ldi	r22, 0x3C	; 60
    1a32:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
    1a36:	8f 81       	ldd	r24, Y+7	; 0x07
    1a38:	98 85       	ldd	r25, Y+8	; 0x08
    1a3a:	21 ec       	ldi	r18, 0xC1	; 193
    1a3c:	32 e0       	ldi	r19, 0x02	; 2
    1a3e:	b9 01       	movw	r22, r18
    1a40:	42 e0       	ldi	r20, 0x02	; 2
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    termState = OUTPUT_LINE_9A;
    1a48:	88 e1       	ldi	r24, 0x18	; 24
    1a4a:	80 93 1b 05 	sts	0x051B, r24
                    cbuffPutByte(hCbuff, ' ');
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                    termState = OUTPUT_LINE_9D;
                }        
            }    
            break;
    1a4e:	a1 c1       	rjmp	.+834    	; 0x1d92 <termOutput+0x994>
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                    termState = OUTPUT_LINE_9A;
                }
                else
                {
                    cbuffPutByte(hCbuff, ' ');
    1a50:	8f 81       	ldd	r24, Y+7	; 0x07
    1a52:	98 85       	ldd	r25, Y+8	; 0x08
    1a54:	60 e2       	ldi	r22, 0x20	; 32
    1a56:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8d, sizeof(termLine8d)-1);
    1a5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5c:	98 85       	ldd	r25, Y+8	; 0x08
    1a5e:	24 ee       	ldi	r18, 0xE4	; 228
    1a60:	31 e0       	ldi	r19, 0x01	; 1
    1a62:	b9 01       	movw	r22, r18
    1a64:	4d e0       	ldi	r20, 0x0D	; 13
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, ' ');
    1a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6e:	98 85       	ldd	r25, Y+8	; 0x08
    1a70:	60 e2       	ldi	r22, 0x20	; 32
    1a72:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	98 85       	ldd	r25, Y+8	; 0x08
    1a7a:	21 ec       	ldi	r18, 0xC1	; 193
    1a7c:	32 e0       	ldi	r19, 0x02	; 2
    1a7e:	b9 01       	movw	r22, r18
    1a80:	42 e0       	ldi	r20, 0x02	; 2
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    termState = OUTPUT_LINE_9D;
    1a88:	8b e1       	ldi	r24, 0x1B	; 27
    1a8a:	80 93 1b 05 	sts	0x051B, r24
                }        
            }    
            break;
    1a8e:	81 c1       	rjmp	.+770    	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 9                      */
                                        /**************************************/
        case OUTPUT_LINE_9A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9a))
    1a90:	8f 81       	ldd	r24, Y+7	; 0x07
    1a92:	98 85       	ldd	r25, Y+8	; 0x08
    1a94:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1a98:	8c 32       	cpi	r24, 0x2C	; 44
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <termOutput+0x6a2>
    1a9e:	5e c1       	rjmp	.+700    	; 0x1d5c <termOutput+0x95e>
            {
                cbuffPutArray(hCbuff, termLine9a, sizeof(termLine9a)-1);
    1aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa2:	98 85       	ldd	r25, Y+8	; 0x08
    1aa4:	22 ef       	ldi	r18, 0xF2	; 242
    1aa6:	31 e0       	ldi	r19, 0x01	; 1
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	4a e2       	ldi	r20, 0x2A	; 42
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_9B;
    1ab2:	89 e1       	ldi	r24, 0x19	; 25
    1ab4:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1ab8:	6c c1       	rjmp	.+728    	; 0x1d92 <termOutput+0x994>
        case OUTPUT_LINE_9B:
            if (cbuffGetSpace(hCbuff) > 1)
    1aba:	8f 81       	ldd	r24, Y+7	; 0x07
    1abc:	98 85       	ldd	r25, Y+8	; 0x08
    1abe:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	08 f4       	brcc	.+2      	; 0x1aca <termOutput+0x6cc>
    1ac8:	4b c1       	rjmp	.+662    	; 0x1d60 <termOutput+0x962>
            {
                cbuffPutByte(hCbuff, (CBUFF)termData.emptyOnBytesFree + '0');
    1aca:	80 91 22 05 	lds	r24, 0x0522
    1ace:	28 2f       	mov	r18, r24
    1ad0:	20 5d       	subi	r18, 0xD0	; 208
    1ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad4:	98 85       	ldd	r25, Y+8	; 0x08
    1ad6:	62 2f       	mov	r22, r18
    1ad8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                termState = OUTPUT_LINE_9C;
    1adc:	8a e1       	ldi	r24, 0x1A	; 26
    1ade:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1ae2:	57 c1       	rjmp	.+686    	; 0x1d92 <termOutput+0x994>
        case OUTPUT_LINE_9C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9c))
    1ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae6:	98 85       	ldd	r25, Y+8	; 0x08
    1ae8:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1aec:	81 31       	cpi	r24, 0x11	; 17
    1aee:	91 05       	cpc	r25, r1
    1af0:	08 f4       	brcc	.+2      	; 0x1af4 <termOutput+0x6f6>
    1af2:	38 c1       	rjmp	.+624    	; 0x1d64 <termOutput+0x966>
            {
                cbuffPutArray(hCbuff, termLine9c, sizeof(termLine9c)-1);
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	2d e1       	ldi	r18, 0x1D	; 29
    1afa:	32 e0       	ldi	r19, 0x02	; 2
    1afc:	b9 01       	movw	r22, r18
    1afe:	4f e0       	ldi	r20, 0x0F	; 15
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_11;
    1b06:	8c e1       	ldi	r24, 0x1C	; 28
    1b08:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1b0c:	42 c1       	rjmp	.+644    	; 0x1d92 <termOutput+0x994>
        case OUTPUT_LINE_9D:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9d))
    1b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b10:	98 85       	ldd	r25, Y+8	; 0x08
    1b12:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b16:	85 32       	cpi	r24, 0x25	; 37
    1b18:	91 05       	cpc	r25, r1
    1b1a:	08 f4       	brcc	.+2      	; 0x1b1e <termOutput+0x720>
    1b1c:	25 c1       	rjmp	.+586    	; 0x1d68 <termOutput+0x96a>
            {
                cbuffPutArray(hCbuff, termLine9d, sizeof(termLine9d)-1);
    1b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b20:	98 85       	ldd	r25, Y+8	; 0x08
    1b22:	2d e2       	ldi	r18, 0x2D	; 45
    1b24:	32 e0       	ldi	r19, 0x02	; 2
    1b26:	b9 01       	movw	r22, r18
    1b28:	43 e2       	ldi	r20, 0x23	; 35
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_11;
    1b30:	8c e1       	ldi	r24, 0x1C	; 28
    1b32:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1b36:	2d c1       	rjmp	.+602    	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 11                     */
                                        /**************************************/
        case OUTPUT_LINE_11:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine11))
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 85       	ldd	r25, Y+8	; 0x08
    1b3c:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b40:	8d 31       	cpi	r24, 0x1D	; 29
    1b42:	91 05       	cpc	r25, r1
    1b44:	08 f4       	brcc	.+2      	; 0x1b48 <termOutput+0x74a>
    1b46:	12 c1       	rjmp	.+548    	; 0x1d6c <termOutput+0x96e>
            {
                cbuffPutArray(hCbuff, termLine11, sizeof(termLine11)-1);
    1b48:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4a:	98 85       	ldd	r25, Y+8	; 0x08
    1b4c:	21 e5       	ldi	r18, 0x51	; 81
    1b4e:	32 e0       	ldi	r19, 0x02	; 2
    1b50:	b9 01       	movw	r22, r18
    1b52:	4b e1       	ldi	r20, 0x1B	; 27
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_12A;
    1b5a:	8d e1       	ldi	r24, 0x1D	; 29
    1b5c:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1b60:	18 c1       	rjmp	.+560    	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 12                     */
                                        /**************************************/
        case OUTPUT_LINE_12A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12a))
    1b62:	8f 81       	ldd	r24, Y+7	; 0x07
    1b64:	98 85       	ldd	r25, Y+8	; 0x08
    1b66:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <termOutput+0x774>
    1b70:	ff c0       	rjmp	.+510    	; 0x1d70 <termOutput+0x972>
            {
                cbuffPutArray(hCbuff, termLine12a, sizeof(termLine12a)-1);
    1b72:	8f 81       	ldd	r24, Y+7	; 0x07
    1b74:	98 85       	ldd	r25, Y+8	; 0x08
    1b76:	2d e6       	ldi	r18, 0x6D	; 109
    1b78:	32 e0       	ldi	r19, 0x02	; 2
    1b7a:	b9 01       	movw	r22, r18
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_12B;
    1b84:	8e e1       	ldi	r24, 0x1E	; 30
    1b86:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1b8a:	03 c1       	rjmp	.+518    	; 0x1d92 <termOutput+0x994>
         case OUTPUT_LINE_12B:
            if (cbuffGetSpace(hCbuff) > 50)
    1b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8e:	98 85       	ldd	r25, Y+8	; 0x08
    1b90:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b94:	83 33       	cpi	r24, 0x33	; 51
    1b96:	91 05       	cpc	r25, r1
    1b98:	08 f4       	brcc	.+2      	; 0x1b9c <termOutput+0x79e>
    1b9a:	ec c0       	rjmp	.+472    	; 0x1d74 <termOutput+0x976>
            {
                cbuffPutArray(hCbuff, checkBuffer, 50);
    1b9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ba0:	2b e2       	ldi	r18, 0x2B	; 43
    1ba2:	35 e0       	ldi	r19, 0x05	; 5
    1ba4:	b9 01       	movw	r22, r18
    1ba6:	42 e3       	ldi	r20, 0x32	; 50
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_12C;
    1bae:	8f e1       	ldi	r24, 0x1F	; 31
    1bb0:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1bb4:	ee c0       	rjmp	.+476    	; 0x1d92 <termOutput+0x994>
         case OUTPUT_LINE_12C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12c))
    1bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb8:	98 85       	ldd	r25, Y+8	; 0x08
    1bba:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1bbe:	85 30       	cpi	r24, 0x05	; 5
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <termOutput+0x7c8>
    1bc4:	d9 c0       	rjmp	.+434    	; 0x1d78 <termOutput+0x97a>
            {
                cbuffPutArray(hCbuff, termLine12c, sizeof(termLine12c)-1);
    1bc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc8:	98 85       	ldd	r25, Y+8	; 0x08
    1bca:	2f e6       	ldi	r18, 0x6F	; 111
    1bcc:	32 e0       	ldi	r19, 0x02	; 2
    1bce:	b9 01       	movw	r22, r18
    1bd0:	43 e0       	ldi	r20, 0x03	; 3
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_13A;
    1bd8:	80 e2       	ldi	r24, 0x20	; 32
    1bda:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1bde:	d9 c0       	rjmp	.+434    	; 0x1d92 <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 13                     */
                                        /**************************************/
        case OUTPUT_LINE_13A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13a))
    1be0:	8f 81       	ldd	r24, Y+7	; 0x07
    1be2:	98 85       	ldd	r25, Y+8	; 0x08
    1be4:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1be8:	84 31       	cpi	r24, 0x14	; 20
    1bea:	91 05       	cpc	r25, r1
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <termOutput+0x7f2>
    1bee:	c6 c0       	rjmp	.+396    	; 0x1d7c <termOutput+0x97e>
            {
                cbuffPutArray(hCbuff, termLine13a, sizeof(termLine13a)-1);
    1bf0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf2:	98 85       	ldd	r25, Y+8	; 0x08
    1bf4:	23 e7       	ldi	r18, 0x73	; 115
    1bf6:	32 e0       	ldi	r19, 0x02	; 2
    1bf8:	b9 01       	movw	r22, r18
    1bfa:	42 e1       	ldi	r20, 0x12	; 18
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                if (termData.bufferIntegrity == INTEGRITY_OK)
    1c02:	80 91 28 05 	lds	r24, 0x0528
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <termOutput+0x814>
                {
                    termState = OUTPUT_LINE_13B;
    1c0a:	81 e2       	ldi	r24, 0x21	; 33
    1c0c:	80 93 1b 05 	sts	0x051B, r24
                else
                {
                    termState = OUTPUT_LINE_13C;
                }    
            }    
            break;
    1c10:	c0 c0       	rjmp	.+384    	; 0x1d92 <termOutput+0x994>
                {
                    termState = OUTPUT_LINE_13B;
                }
                else
                {
                    termState = OUTPUT_LINE_13C;
    1c12:	82 e2       	ldi	r24, 0x22	; 34
    1c14:	80 93 1b 05 	sts	0x051B, r24
                }    
            }    
            break;
    1c18:	bc c0       	rjmp	.+376    	; 0x1d92 <termOutput+0x994>
         case OUTPUT_LINE_13B:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13b))
    1c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1c:	98 85       	ldd	r25, Y+8	; 0x08
    1c1e:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1c22:	8b 30       	cpi	r24, 0x0B	; 11
    1c24:	91 05       	cpc	r25, r1
    1c26:	08 f4       	brcc	.+2      	; 0x1c2a <termOutput+0x82c>
    1c28:	ab c0       	rjmp	.+342    	; 0x1d80 <termOutput+0x982>
            {
                cbuffPutArray(hCbuff, termLine13b, sizeof(termLine13b)-1);
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	98 85       	ldd	r25, Y+8	; 0x08
    1c2e:	26 e8       	ldi	r18, 0x86	; 134
    1c30:	32 e0       	ldi	r19, 0x02	; 2
    1c32:	b9 01       	movw	r22, r18
    1c34:	49 e0       	ldi	r20, 0x09	; 9
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_13D;
    1c3c:	83 e2       	ldi	r24, 0x23	; 35
    1c3e:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1c42:	a7 c0       	rjmp	.+334    	; 0x1d92 <termOutput+0x994>
         case OUTPUT_LINE_13C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13c))
    1c44:	8f 81       	ldd	r24, Y+7	; 0x07
    1c46:	98 85       	ldd	r25, Y+8	; 0x08
    1c48:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1c4c:	8b 30       	cpi	r24, 0x0B	; 11
    1c4e:	91 05       	cpc	r25, r1
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <termOutput+0x856>
    1c52:	98 c0       	rjmp	.+304    	; 0x1d84 <termOutput+0x986>
            {
                cbuffPutArray(hCbuff, termLine13c, sizeof(termLine13c)-1);
    1c54:	8f 81       	ldd	r24, Y+7	; 0x07
    1c56:	98 85       	ldd	r25, Y+8	; 0x08
    1c58:	20 e9       	ldi	r18, 0x90	; 144
    1c5a:	32 e0       	ldi	r19, 0x02	; 2
    1c5c:	b9 01       	movw	r22, r18
    1c5e:	49 e0       	ldi	r20, 0x09	; 9
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_13D;
    1c66:	83 e2       	ldi	r24, 0x23	; 35
    1c68:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1c6c:	92 c0       	rjmp	.+292    	; 0x1d92 <termOutput+0x994>
         case OUTPUT_LINE_13D:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13d))
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	98 85       	ldd	r25, Y+8	; 0x08
    1c72:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1c76:	82 31       	cpi	r24, 0x12	; 18
    1c78:	91 05       	cpc	r25, r1
    1c7a:	08 f4       	brcc	.+2      	; 0x1c7e <termOutput+0x880>
    1c7c:	85 c0       	rjmp	.+266    	; 0x1d88 <termOutput+0x98a>
            {
                cbuffPutArray(hCbuff, termLine13d, sizeof(termLine13d)-1);
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	2a e9       	ldi	r18, 0x9A	; 154
    1c84:	32 e0       	ldi	r19, 0x02	; 2
    1c86:	b9 01       	movw	r22, r18
    1c88:	40 e1       	ldi	r20, 0x10	; 16
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                if (termData.producerSpeedTooHigh == SPEED_OK)
    1c90:	80 91 26 05 	lds	r24, 0x0526
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <termOutput+0x8a2>
                {
                    termState = OUTPUT_LINE_13E;
    1c98:	84 e2       	ldi	r24, 0x24	; 36
    1c9a:	80 93 1b 05 	sts	0x051B, r24
                else
                {
                    termState = OUTPUT_LINE_13F;
                }
            }    
            break;
    1c9e:	79 c0       	rjmp	.+242    	; 0x1d92 <termOutput+0x994>
                {
                    termState = OUTPUT_LINE_13E;
                }
                else
                {
                    termState = OUTPUT_LINE_13F;
    1ca0:	85 e2       	ldi	r24, 0x25	; 37
    1ca2:	80 93 1b 05 	sts	0x051B, r24
                }
            }    
            break;
    1ca6:	75 c0       	rjmp	.+234    	; 0x1d92 <termOutput+0x994>
         case OUTPUT_LINE_13E:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13e))
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	98 85       	ldd	r25, Y+8	; 0x08
    1cac:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1cb0:	8c 30       	cpi	r24, 0x0C	; 12
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	08 f4       	brcc	.+2      	; 0x1cb8 <termOutput+0x8ba>
    1cb6:	6a c0       	rjmp	.+212    	; 0x1d8c <termOutput+0x98e>
            {
                cbuffPutArray(hCbuff, termLine13e, sizeof(termLine13e)-1);
    1cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cba:	98 85       	ldd	r25, Y+8	; 0x08
    1cbc:	2b ea       	ldi	r18, 0xAB	; 171
    1cbe:	32 e0       	ldi	r19, 0x02	; 2
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	4a e0       	ldi	r20, 0x0A	; 10
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = HOME_CURSOR;
    1cca:	85 e0       	ldi	r24, 0x05	; 5
    1ccc:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1cd0:	60 c0       	rjmp	.+192    	; 0x1d92 <termOutput+0x994>
         case OUTPUT_LINE_13F:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13f))
    1cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd4:	98 85       	ldd	r25, Y+8	; 0x08
    1cd6:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1cda:	8c 30       	cpi	r24, 0x0C	; 12
    1cdc:	91 05       	cpc	r25, r1
    1cde:	08 f4       	brcc	.+2      	; 0x1ce2 <termOutput+0x8e4>
    1ce0:	57 c0       	rjmp	.+174    	; 0x1d90 <termOutput+0x992>
            {
                cbuffPutArray(hCbuff, termLine13f, sizeof(termLine13f)-1);
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	26 eb       	ldi	r18, 0xB6	; 182
    1ce8:	32 e0       	ldi	r19, 0x02	; 2
    1cea:	b9 01       	movw	r22, r18
    1cec:	4a e0       	ldi	r20, 0x0A	; 10
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = HOME_CURSOR;
    1cf4:	85 e0       	ldi	r24, 0x05	; 5
    1cf6:	80 93 1b 05 	sts	0x051B, r24
            }    
            break;
    1cfa:	4b c0       	rjmp	.+150    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerma))
            {
                cbuffPutArray(hCbuff, resetTerma, sizeof(resetTerma)-1);
                termState = RESET_TERMINALB;
            }    
            break;
    1cfc:	00 00       	nop
    1cfe:	49 c0       	rjmp	.+146    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
                termState = RESET_TERMINALC;
            }    
            break; 
    1d00:	00 00       	nop
    1d02:	47 c0       	rjmp	.+142    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermc))
            {
                cbuffPutArray(hCbuff, resetTermc, sizeof(resetTermc)-1);
                termState = RESET_TERMINALD;
            }    
            break;  
    1d04:	00 00       	nop
    1d06:	45 c0       	rjmp	.+138    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermd))
            {
                cbuffPutArray(hCbuff, resetTermd, sizeof(resetTermd)-1);
                termState = RESET_TERMINALE;
            }    
            break;   
    1d08:	00 00       	nop
    1d0a:	43 c0       	rjmp	.+134    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerme))
            {
                cbuffPutArray(hCbuff, resetTerme, sizeof(resetTerme)-1);
                termState = OUTPUT_LINE_1;
            }    
            break; 
    1d0c:	00 00       	nop
    1d0e:	41 c0       	rjmp	.+130    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
                termState = OUTPUT_LINE_1;
            }    
            break;
    1d10:	00 00       	nop
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine1)))
            {
                cbuffPutArray(hCbuff, termLine1, sizeof(termLine1)-1);
                termState = OUTPUT_LINE_3A;
            }    
            break;  
    1d14:	00 00       	nop
    1d16:	3d c0       	rjmp	.+122    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termReturn))
            {
                cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                termState = OUTPUT_LINE_3A;
            }    
            break; 
    1d18:	00 00       	nop
    1d1a:	3b c0       	rjmp	.+118    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3a))
            {
                cbuffPutArray(hCbuff, termLine3a, sizeof(termLine3a)-1);
                termState = OUTPUT_LINE_3B;
            }    
            break; 
    1d1c:	00 00       	nop
    1d1e:	39 c0       	rjmp	.+114    	; 0x1d92 <termOutput+0x994>
                    cbuffPutByte(hCbuff, (CBUFF)(uiTemp + '0'));
                    cbuffPutByte(hCbuff, cbuffTemp + '0');
                }    
                termState = OUTPUT_LINE_3C;
            }    
            break;
    1d20:	00 00       	nop
    1d22:	37 c0       	rjmp	.+110    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3c))
            {
                cbuffPutArray(hCbuff, termLine3c, sizeof(termLine3c)-1);
                termState = OUTPUT_LINE_4A;
            }    
            break;
    1d24:	00 00       	nop
    1d26:	35 c0       	rjmp	.+106    	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4a))
            {
                cbuffPutArray(hCbuff, termLine4a, sizeof(termLine4a)-1);
                termState = OUTPUT_LINE_4B;
            }    
            break;
    1d28:	00 00       	nop
    1d2a:	33 c0       	rjmp	.+102    	; 0x1d92 <termOutput+0x994>
                        cbuffPutByte(hCbuff, ' ');
                    }        
                }    
                termState = OUTPUT_LINE_4C;
            }    
            break;
    1d2c:	00 00       	nop
    1d2e:	31 c0       	rjmp	.+98     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4c))
            {
                cbuffPutArray(hCbuff, termLine4c, sizeof(termLine4c)-1);
                termState = OUTPUT_LINE_4D;
            }    
            break;
    1d30:	00 00       	nop
    1d32:	2f c0       	rjmp	.+94     	; 0x1d92 <termOutput+0x994>
                else
                {
                    termState = OUTPUT_LINE_4F;
                }    
            }    
            break;
    1d34:	00 00       	nop
    1d36:	2d c0       	rjmp	.+90     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4e))
            {
                cbuffPutArray(hCbuff, termLine4e, sizeof(termLine4e)-1);
                termState = OUTPUT_LINE_6A;
            }    
            break;
    1d38:	00 00       	nop
    1d3a:	2b c0       	rjmp	.+86     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4f))
            {
                cbuffPutArray(hCbuff, termLine4f, sizeof(termLine4f)-1);
                termState = OUTPUT_LINE_3A;
            }    
            break;
    1d3c:	00 00       	nop
    1d3e:	29 c0       	rjmp	.+82     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6a))
            {
                cbuffPutArray(hCbuff, termLine6a, sizeof(termLine6a)-1);
                termState = OUTPUT_LINE_6B;
            }    
            break;
    1d40:	00 00       	nop
    1d42:	27 c0       	rjmp	.+78     	; 0x1d92 <termOutput+0x994>
                    
                    cbuffPutByte(hCbuff, cbuffUnits);
                }      
                termState = OUTPUT_LINE_6C;  
            }    
            break;
    1d44:	00 00       	nop
    1d46:	25 c0       	rjmp	.+74     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6c))
            {
                cbuffPutArray(hCbuff, termLine6c, sizeof(termLine6c)-1);
                termState = OUTPUT_LINE_8A;
            }    
            break;
    1d48:	00 00       	nop
    1d4a:	23 c0       	rjmp	.+70     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8a))
            {
                cbuffPutArray(hCbuff, termLine8a, sizeof(termLine8a)-1);
                termState = OUTPUT_LINE_8B;
            }    
            break;
    1d4c:	00 00       	nop
    1d4e:	21 c0       	rjmp	.+66     	; 0x1d92 <termOutput+0x994>
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
                    cbuffPutByte(hCbuff, ' ');
                    termState = OUTPUT_LINE_8C;
                }        
            }    
            break;
    1d50:	00 00       	nop
    1d52:	1f c0       	rjmp	.+62     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8c))
            {
                cbuffPutArray(hCbuff, termLine8c, sizeof(termLine8c)-1);
                termState = OUTPUT_LINE_8D;
            }    
            break;
    1d54:	00 00       	nop
    1d56:	1d c0       	rjmp	.+58     	; 0x1d92 <termOutput+0x994>
                    cbuffPutByte(hCbuff, ' ');
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                    termState = OUTPUT_LINE_9D;
                }        
            }    
            break;
    1d58:	00 00       	nop
    1d5a:	1b c0       	rjmp	.+54     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9a))
            {
                cbuffPutArray(hCbuff, termLine9a, sizeof(termLine9a)-1);
                termState = OUTPUT_LINE_9B;
            }    
            break;
    1d5c:	00 00       	nop
    1d5e:	19 c0       	rjmp	.+50     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > 1)
            {
                cbuffPutByte(hCbuff, (CBUFF)termData.emptyOnBytesFree + '0');
                termState = OUTPUT_LINE_9C;
            }    
            break;
    1d60:	00 00       	nop
    1d62:	17 c0       	rjmp	.+46     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9c))
            {
                cbuffPutArray(hCbuff, termLine9c, sizeof(termLine9c)-1);
                termState = OUTPUT_LINE_11;
            }    
            break;
    1d64:	00 00       	nop
    1d66:	15 c0       	rjmp	.+42     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9d))
            {
                cbuffPutArray(hCbuff, termLine9d, sizeof(termLine9d)-1);
                termState = OUTPUT_LINE_11;
            }    
            break;
    1d68:	00 00       	nop
    1d6a:	13 c0       	rjmp	.+38     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine11))
            {
                cbuffPutArray(hCbuff, termLine11, sizeof(termLine11)-1);
                termState = OUTPUT_LINE_12A;
            }    
            break;
    1d6c:	00 00       	nop
    1d6e:	11 c0       	rjmp	.+34     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12a))
            {
                cbuffPutArray(hCbuff, termLine12a, sizeof(termLine12a)-1);
                termState = OUTPUT_LINE_12B;
            }    
            break;
    1d70:	00 00       	nop
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > 50)
            {
                cbuffPutArray(hCbuff, checkBuffer, 50);
                termState = OUTPUT_LINE_12C;
            }    
            break;
    1d74:	00 00       	nop
    1d76:	0d c0       	rjmp	.+26     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12c))
            {
                cbuffPutArray(hCbuff, termLine12c, sizeof(termLine12c)-1);
                termState = OUTPUT_LINE_13A;
            }    
            break;
    1d78:	00 00       	nop
    1d7a:	0b c0       	rjmp	.+22     	; 0x1d92 <termOutput+0x994>
                else
                {
                    termState = OUTPUT_LINE_13C;
                }    
            }    
            break;
    1d7c:	00 00       	nop
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13b))
            {
                cbuffPutArray(hCbuff, termLine13b, sizeof(termLine13b)-1);
                termState = OUTPUT_LINE_13D;
            }    
            break;
    1d80:	00 00       	nop
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13c))
            {
                cbuffPutArray(hCbuff, termLine13c, sizeof(termLine13c)-1);
                termState = OUTPUT_LINE_13D;
            }    
            break;
    1d84:	00 00       	nop
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <termOutput+0x994>
                else
                {
                    termState = OUTPUT_LINE_13F;
                }
            }    
            break;
    1d88:	00 00       	nop
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13e))
            {
                cbuffPutArray(hCbuff, termLine13e, sizeof(termLine13e)-1);
                termState = HOME_CURSOR;
            }    
            break;
    1d8c:	00 00       	nop
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13f))
            {
                cbuffPutArray(hCbuff, termLine13f, sizeof(termLine13f)-1);
                termState = HOME_CURSOR;
            }    
            break;
    1d90:	00 00       	nop

    }        
}
    1d92:	28 96       	adiw	r28, 0x08	; 8
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <termUpdateBytesInBuffer>:

void termUpdateBytesInBuffer(unsigned int noOfBytes)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <termUpdateBytesInBuffer+0x6>
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
    termData.bytesInBuffer = noOfBytes;
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	90 93 1d 05 	sts	0x051D, r25
    1dba:	80 93 1c 05 	sts	0x051C, r24
    
    termData.fillBarLength = (unsigned char) ((float)noOfBytes * 1.45);
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	cc 01       	movw	r24, r24
    1dc4:	a0 e0       	ldi	r26, 0x00	; 0
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	bc 01       	movw	r22, r24
    1dca:	cd 01       	movw	r24, r26
    1dcc:	0e 94 77 13 	call	0x26ee	; 0x26ee <__floatunsisf>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	2a e9       	ldi	r18, 0x9A	; 154
    1dda:	39 e9       	ldi	r19, 0x99	; 153
    1ddc:	49 eb       	ldi	r20, 0xB9	; 185
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	80 93 20 05 	sts	0x0520, r24
    
    //termData.fillBarLength = (unsigned char) ((noOfBytes * 15)/10);
    
    termData.percentFilled = noOfBytes * 2;
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	88 0f       	add	r24, r24
    1dfc:	80 93 21 05 	sts	0x0521, r24
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <termSetFillRate>:

void termSetFillRate(unsigned int fillRate)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <termSetFillRate+0x6>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
    if (fillRate <=1)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	91 05       	cpc	r25, r1
    1e20:	28 f4       	brcc	.+10     	; 0x1e2c <termSetFillRate+0x22>
    {
        fillRate = 1;   
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <termSetFillRate+0x34>
    }    
    else if (fillRate >= 99)
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	83 36       	cpi	r24, 0x63	; 99
    1e32:	91 05       	cpc	r25, r1
    1e34:	20 f0       	brcs	.+8      	; 0x1e3e <termSetFillRate+0x34>
    {
        fillRate = 99;
    1e36:	83 e6       	ldi	r24, 0x63	; 99
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9a 83       	std	Y+2, r25	; 0x02
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    }
    termData.fillRate = fillRate;
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	9a 81       	ldd	r25, Y+2	; 0x02
    1e42:	90 93 1f 05 	sts	0x051F, r25
    1e46:	80 93 1e 05 	sts	0x051E, r24
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <termGetFillRate>:

unsigned int termGetFillRate(void)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    return termData.fillRate;
    1e5c:	80 91 1e 05 	lds	r24, 0x051E
    1e60:	90 91 1f 05 	lds	r25, 0x051F
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <termSetBufferEmptyMode>:

void termSetBufferEmptyMode(char mode)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	89 83       	std	Y+1, r24	; 0x01
    if (mode == 'M' || mode == 'm')
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	8d 34       	cpi	r24, 0x4D	; 77
    1e7a:	19 f0       	breq	.+6      	; 0x1e82 <termSetBufferEmptyMode+0x18>
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	8d 36       	cpi	r24, 0x6D	; 109
    1e80:	19 f4       	brne	.+6      	; 0x1e88 <termSetBufferEmptyMode+0x1e>
    {
        termData.termMode = MANUAL;
    1e82:	10 92 23 05 	sts	0x0523, r1
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <termSetBufferEmptyMode+0x30>
    }    
    else if (mode == 'A' || mode == 'a')
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	81 34       	cpi	r24, 0x41	; 65
    1e8c:	19 f0       	breq	.+6      	; 0x1e94 <termSetBufferEmptyMode+0x2a>
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	81 36       	cpi	r24, 0x61	; 97
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <termSetBufferEmptyMode+0x30>
    {
        termData.termMode = AUTOMATIC;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 23 05 	sts	0x0523, r24
    }    
}
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <termGetEmptyTrigger>:

int termGetEmptyTrigger(void)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    return (int) termData.emptyOnBytesFree;    
    1eaa:	80 91 22 05 	lds	r24, 0x0522
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
}
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <termSetEmptyTrigger>:

void termSetEmptyTrigger(char triggerNumber)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    termData.emptyOnBytesFree = (unsigned char) triggerNumber - '0';
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	80 53       	subi	r24, 0x30	; 48
    1ec8:	80 93 22 05 	sts	0x0522, r24
}    
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <termCheckBuffer>:
    
void  termCheckBuffer(HCBUFF hCbuff)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <termCheckBuffer+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <termCheckBuffer+0x8>
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <termCheckBuffer+0xa>
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    unsigned int    bufferCount;
    unsigned int    loopCount;

                                        /* Clear buffer                       */
    for (loopCount = 0; loopCount < 50; loopCount++)
    1ee6:	1a 82       	std	Y+2, r1	; 0x02
    1ee8:	19 82       	std	Y+1, r1	; 0x01
    1eea:	0c c0       	rjmp	.+24     	; 0x1f04 <termCheckBuffer+0x30>
    {
        checkBuffer[loopCount] = ' ';
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	85 5d       	subi	r24, 0xD5	; 213
    1ef2:	9a 4f       	sbci	r25, 0xFA	; 250
    1ef4:	20 e2       	ldi	r18, 0x20	; 32
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 83       	st	Z, r18
{
    unsigned int    bufferCount;
    unsigned int    loopCount;

                                        /* Clear buffer                       */
    for (loopCount = 0; loopCount < 50; loopCount++)
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	82 33       	cpi	r24, 0x32	; 50
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	78 f3       	brcs	.-34     	; 0x1eec <termCheckBuffer+0x18>
    {
        checkBuffer[loopCount] = ' ';
    }    
                                        /* Get data out of the buffer         */
    bufferCount = cbuffGetArray(hCbuff, checkBuffer, 50);
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	2b e2       	ldi	r18, 0x2B	; 43
    1f14:	35 e0       	ldi	r19, 0x05	; 5
    1f16:	b9 01       	movw	r22, r18
    1f18:	42 e3       	ldi	r20, 0x32	; 50
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <cbuffGetArray>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03

                                        /* If this is the first time we have  */
                                        /* emptied the buffer, there is no    */
                                        /* data-loss check                    */
    if(termData.oldLastChar == 0)
    1f24:	80 91 27 05 	lds	r24, 0x0527
    1f28:	88 23       	and	r24, r24
    1f2a:	51 f4       	brne	.+20     	; 0x1f40 <termCheckBuffer+0x6c>
    {
        termData.oldLastChar = checkBuffer[bufferCount-1];
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	85 5d       	subi	r24, 0xD5	; 213
    1f34:	9a 4f       	sbci	r25, 0xFA	; 250
    1f36:	fc 01       	movw	r30, r24
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 93 27 05 	sts	0x0527, r24
    1f3e:	22 c0       	rjmp	.+68     	; 0x1f84 <termCheckBuffer+0xb0>
                                        /* data lost from the producer during */
                                        /* between buffer emptying. The data  */
                                        /* always increments from A - Z       */
    else
    {
        if (termData.oldLastChar == 'Z')
    1f40:	80 91 27 05 	lds	r24, 0x0527
    1f44:	8a 35       	cpi	r24, 0x5A	; 90
    1f46:	19 f4       	brne	.+6      	; 0x1f4e <termCheckBuffer+0x7a>
        {
            termData.oldLastChar = 'A' - 1;   
    1f48:	80 e4       	ldi	r24, 0x40	; 64
    1f4a:	80 93 27 05 	sts	0x0527, r24
        }    
        if (checkBuffer[0] != termData.oldLastChar + 1)
    1f4e:	80 91 2b 05 	lds	r24, 0x052B
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	80 91 27 05 	lds	r24, 0x0527
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	28 17       	cp	r18, r24
    1f62:	39 07       	cpc	r19, r25
    1f64:	19 f0       	breq	.+6      	; 0x1f6c <termCheckBuffer+0x98>
        {
            termData.producerSpeedTooHigh = TOO_HIGH; 
    1f66:	10 92 26 05 	sts	0x0526, r1
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <termCheckBuffer+0x9e>
        }    
        else
        {
            termData.producerSpeedTooHigh = SPEED_OK;   
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	80 93 26 05 	sts	0x0526, r24
        }
        
        termData.oldLastChar = checkBuffer[bufferCount-1];    
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	85 5d       	subi	r24, 0xD5	; 213
    1f7a:	9a 4f       	sbci	r25, 0xFA	; 250
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 93 27 05 	sts	0x0527, r24
    }    
                                        /* Here we check for buffer integrity */
                                        /* to make sure that the data really  */
                                        /* got put into the buffer in order   */
                                        /* from A-Z as we expected            */
    termData.bufferIntegrity = INTEGRITY_OK;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	80 93 28 05 	sts	0x0528, r24
    
    for (loopCount = 0; loopCount < (bufferCount-1); loopCount ++)
    1f8a:	1a 82       	std	Y+2, r1	; 0x02
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	30 c0       	rjmp	.+96     	; 0x1ff0 <termCheckBuffer+0x11c>
    {
                                        /* Make sure each byte in the buffer  */
                                        /* is equal to the next byte - 1      */        
        if (checkBuffer[loopCount] != 'Z')
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	85 5d       	subi	r24, 0xD5	; 213
    1f96:	9a 4f       	sbci	r25, 0xFA	; 250
    1f98:	fc 01       	movw	r30, r24
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8a 35       	cpi	r24, 0x5A	; 90
    1f9e:	c1 f0       	breq	.+48     	; 0x1fd0 <termCheckBuffer+0xfc>
        {
            if (checkBuffer[loopCount] != (checkBuffer[loopCount+1] - 1) )
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	85 5d       	subi	r24, 0xD5	; 213
    1fa6:	9a 4f       	sbci	r25, 0xFA	; 250
    1fa8:	fc 01       	movw	r30, r24
    1faa:	80 81       	ld	r24, Z
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	85 5d       	subi	r24, 0xD5	; 213
    1fb8:	9a 4f       	sbci	r25, 0xFA	; 250
    1fba:	fc 01       	movw	r30, r24
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	28 17       	cp	r18, r24
    1fc6:	39 07       	cpc	r19, r25
    1fc8:	71 f0       	breq	.+28     	; 0x1fe6 <termCheckBuffer+0x112>
            {
                termData.bufferIntegrity = INTEGRITY_ERROR;
    1fca:	10 92 28 05 	sts	0x0528, r1
    1fce:	0b c0       	rjmp	.+22     	; 0x1fe6 <termCheckBuffer+0x112>
                                        /* Unless the byte is 'Z'; then       */
                                        /* simply check if the next byte is   */
                                        /* 'A'                                */
        else
        {
            if (checkBuffer[loopCount+1] != 'A')
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	85 5d       	subi	r24, 0xD5	; 213
    1fd8:	9a 4f       	sbci	r25, 0xFA	; 250
    1fda:	fc 01       	movw	r30, r24
    1fdc:	80 81       	ld	r24, Z
    1fde:	81 34       	cpi	r24, 0x41	; 65
    1fe0:	11 f0       	breq	.+4      	; 0x1fe6 <termCheckBuffer+0x112>
            {
                termData.bufferIntegrity = INTEGRITY_ERROR;
    1fe2:	10 92 28 05 	sts	0x0528, r1
                                        /* to make sure that the data really  */
                                        /* got put into the buffer in order   */
                                        /* from A-Z as we expected            */
    termData.bufferIntegrity = INTEGRITY_OK;
    
    for (loopCount = 0; loopCount < (bufferCount-1); loopCount ++)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	9c 01       	movw	r18, r24
    1ff6:	21 50       	subi	r18, 0x01	; 1
    1ff8:	30 40       	sbci	r19, 0x00	; 0
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	82 17       	cp	r24, r18
    2000:	93 07       	cpc	r25, r19
    2002:	30 f2       	brcs	.-116    	; 0x1f90 <termCheckBuffer+0xbc>
                termData.bufferIntegrity = INTEGRITY_ERROR;
            }
        }    
    }
    
}   
    2004:	26 96       	adiw	r28, 0x06	; 6
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <termIsAutomatic>:

unsigned char termIsAutomatic(void)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    return (unsigned char) termData.termMode;
    201e:	80 91 23 05 	lds	r24, 0x0523
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <termRestartTerminal>:

void termRestartTerminal (void)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    restartTerm = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 2a 05 	sts	0x052A, r24
}    
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <termFullScreenUpdate>:

void termFullScreenUpdate(void)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    termData.termFullScreenUpdate = FULLSCREEN_YES;
    2044:	10 92 29 05 	sts	0x0529, r1
}    
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <__fixunssfsi>:
    204e:	ef 92       	push	r14
    2050:	ff 92       	push	r15
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	7b 01       	movw	r14, r22
    2058:	8c 01       	movw	r16, r24
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	5f e4       	ldi	r21, 0x4F	; 79
    2062:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__gesf2>
    2066:	87 fd       	sbrc	r24, 7
    2068:	11 c0       	rjmp	.+34     	; 0x208c <__fixunssfsi+0x3e>
    206a:	c8 01       	movw	r24, r16
    206c:	b7 01       	movw	r22, r14
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	5f e4       	ldi	r21, 0x4F	; 79
    2076:	0e 94 ca 11 	call	0x2394	; 0x2394 <__subsf3>
    207a:	0e 94 25 13 	call	0x264a	; 0x264a <__fixsfsi>
    207e:	9b 01       	movw	r18, r22
    2080:	ac 01       	movw	r20, r24
    2082:	20 50       	subi	r18, 0x00	; 0
    2084:	30 40       	sbci	r19, 0x00	; 0
    2086:	40 40       	sbci	r20, 0x00	; 0
    2088:	50 48       	sbci	r21, 0x80	; 128
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <__fixunssfsi+0x4a>
    208c:	c8 01       	movw	r24, r16
    208e:	b7 01       	movw	r22, r14
    2090:	0e 94 25 13 	call	0x264a	; 0x264a <__fixsfsi>
    2094:	9b 01       	movw	r18, r22
    2096:	ac 01       	movw	r20, r24
    2098:	b9 01       	movw	r22, r18
    209a:	ca 01       	movw	r24, r20
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	08 95       	ret

000020a6 <_fpadd_parts>:
    20a6:	a0 e0       	ldi	r26, 0x00	; 0
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e9 e5       	ldi	r30, 0x59	; 89
    20ac:	f0 e1       	ldi	r31, 0x10	; 16
    20ae:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__prologue_saves__+0x8>
    20b2:	fc 01       	movw	r30, r24
    20b4:	ea 01       	movw	r28, r20
    20b6:	80 81       	ld	r24, Z
    20b8:	82 30       	cpi	r24, 0x02	; 2
    20ba:	08 f4       	brcc	.+2      	; 0x20be <_fpadd_parts+0x18>
    20bc:	38 c1       	rjmp	.+624    	; 0x232e <_fpadd_parts+0x288>
    20be:	db 01       	movw	r26, r22
    20c0:	9c 91       	ld	r25, X
    20c2:	92 30       	cpi	r25, 0x02	; 2
    20c4:	08 f4       	brcc	.+2      	; 0x20c8 <_fpadd_parts+0x22>
    20c6:	30 c1       	rjmp	.+608    	; 0x2328 <_fpadd_parts+0x282>
    20c8:	84 30       	cpi	r24, 0x04	; 4
    20ca:	59 f4       	brne	.+22     	; 0x20e2 <_fpadd_parts+0x3c>
    20cc:	94 30       	cpi	r25, 0x04	; 4
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <_fpadd_parts+0x2c>
    20d0:	2e c1       	rjmp	.+604    	; 0x232e <_fpadd_parts+0x288>
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	11 96       	adiw	r26, 0x01	; 1
    20d6:	8c 91       	ld	r24, X
    20d8:	11 97       	sbiw	r26, 0x01	; 1
    20da:	98 17       	cp	r25, r24
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <_fpadd_parts+0x3a>
    20de:	21 c1       	rjmp	.+578    	; 0x2322 <_fpadd_parts+0x27c>
    20e0:	26 c1       	rjmp	.+588    	; 0x232e <_fpadd_parts+0x288>
    20e2:	94 30       	cpi	r25, 0x04	; 4
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <_fpadd_parts+0x42>
    20e6:	20 c1       	rjmp	.+576    	; 0x2328 <_fpadd_parts+0x282>
    20e8:	92 30       	cpi	r25, 0x02	; 2
    20ea:	b1 f4       	brne	.+44     	; 0x2118 <_fpadd_parts+0x72>
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	09 f0       	breq	.+2      	; 0x20f2 <_fpadd_parts+0x4c>
    20f0:	1e c1       	rjmp	.+572    	; 0x232e <_fpadd_parts+0x288>
    20f2:	ca 01       	movw	r24, r20
    20f4:	af 01       	movw	r20, r30
    20f6:	28 e0       	ldi	r18, 0x08	; 8
    20f8:	da 01       	movw	r26, r20
    20fa:	0d 90       	ld	r0, X+
    20fc:	ad 01       	movw	r20, r26
    20fe:	dc 01       	movw	r26, r24
    2100:	0d 92       	st	X+, r0
    2102:	cd 01       	movw	r24, r26
    2104:	21 50       	subi	r18, 0x01	; 1
    2106:	c1 f7       	brne	.-16     	; 0x20f8 <_fpadd_parts+0x52>
    2108:	db 01       	movw	r26, r22
    210a:	11 96       	adiw	r26, 0x01	; 1
    210c:	8c 91       	ld	r24, X
    210e:	11 97       	sbiw	r26, 0x01	; 1
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	89 23       	and	r24, r25
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	0a c1       	rjmp	.+532    	; 0x232c <_fpadd_parts+0x286>
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	09 f4       	brne	.+2      	; 0x211e <_fpadd_parts+0x78>
    211c:	05 c1       	rjmp	.+522    	; 0x2328 <_fpadd_parts+0x282>
    211e:	c2 80       	ldd	r12, Z+2	; 0x02
    2120:	d3 80       	ldd	r13, Z+3	; 0x03
    2122:	db 01       	movw	r26, r22
    2124:	12 96       	adiw	r26, 0x02	; 2
    2126:	6d 90       	ld	r6, X+
    2128:	7c 90       	ld	r7, X
    212a:	13 97       	sbiw	r26, 0x03	; 3
    212c:	24 81       	ldd	r18, Z+4	; 0x04
    212e:	35 81       	ldd	r19, Z+5	; 0x05
    2130:	46 81       	ldd	r20, Z+6	; 0x06
    2132:	57 81       	ldd	r21, Z+7	; 0x07
    2134:	14 96       	adiw	r26, 0x04	; 4
    2136:	ed 90       	ld	r14, X+
    2138:	fd 90       	ld	r15, X+
    213a:	0d 91       	ld	r16, X+
    213c:	1c 91       	ld	r17, X
    213e:	17 97       	sbiw	r26, 0x07	; 7
    2140:	c6 01       	movw	r24, r12
    2142:	86 19       	sub	r24, r6
    2144:	97 09       	sbc	r25, r7
    2146:	5c 01       	movw	r10, r24
    2148:	97 ff       	sbrs	r25, 7
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <_fpadd_parts+0xae>
    214c:	aa 24       	eor	r10, r10
    214e:	bb 24       	eor	r11, r11
    2150:	a8 1a       	sub	r10, r24
    2152:	b9 0a       	sbc	r11, r25
    2154:	b0 e2       	ldi	r27, 0x20	; 32
    2156:	ab 16       	cp	r10, r27
    2158:	b1 04       	cpc	r11, r1
    215a:	0c f0       	brlt	.+2      	; 0x215e <_fpadd_parts+0xb8>
    215c:	61 c0       	rjmp	.+194    	; 0x2220 <_fpadd_parts+0x17a>
    215e:	18 16       	cp	r1, r24
    2160:	19 06       	cpc	r1, r25
    2162:	6c f5       	brge	.+90     	; 0x21be <_fpadd_parts+0x118>
    2164:	37 01       	movw	r6, r14
    2166:	48 01       	movw	r8, r16
    2168:	0a 2c       	mov	r0, r10
    216a:	04 c0       	rjmp	.+8      	; 0x2174 <_fpadd_parts+0xce>
    216c:	96 94       	lsr	r9
    216e:	87 94       	ror	r8
    2170:	77 94       	ror	r7
    2172:	67 94       	ror	r6
    2174:	0a 94       	dec	r0
    2176:	d2 f7       	brpl	.-12     	; 0x216c <_fpadd_parts+0xc6>
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e0       	ldi	r26, 0x00	; 0
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	0a 2c       	mov	r0, r10
    2182:	04 c0       	rjmp	.+8      	; 0x218c <_fpadd_parts+0xe6>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	aa 1f       	adc	r26, r26
    218a:	bb 1f       	adc	r27, r27
    218c:	0a 94       	dec	r0
    218e:	d2 f7       	brpl	.-12     	; 0x2184 <_fpadd_parts+0xde>
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	a1 09       	sbc	r26, r1
    2194:	b1 09       	sbc	r27, r1
    2196:	8e 21       	and	r24, r14
    2198:	9f 21       	and	r25, r15
    219a:	a0 23       	and	r26, r16
    219c:	b1 23       	and	r27, r17
    219e:	ee 24       	eor	r14, r14
    21a0:	ff 24       	eor	r15, r15
    21a2:	87 01       	movw	r16, r14
    21a4:	e3 94       	inc	r14
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	a1 05       	cpc	r26, r1
    21aa:	b1 05       	cpc	r27, r1
    21ac:	19 f4       	brne	.+6      	; 0x21b4 <_fpadd_parts+0x10e>
    21ae:	ee 24       	eor	r14, r14
    21b0:	ff 24       	eor	r15, r15
    21b2:	87 01       	movw	r16, r14
    21b4:	e6 28       	or	r14, r6
    21b6:	f7 28       	or	r15, r7
    21b8:	08 29       	or	r16, r8
    21ba:	19 29       	or	r17, r9
    21bc:	3c c0       	rjmp	.+120    	; 0x2236 <_fpadd_parts+0x190>
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	d1 f1       	breq	.+116    	; 0x2236 <_fpadd_parts+0x190>
    21c2:	ca 0c       	add	r12, r10
    21c4:	db 1c       	adc	r13, r11
    21c6:	39 01       	movw	r6, r18
    21c8:	4a 01       	movw	r8, r20
    21ca:	0a 2c       	mov	r0, r10
    21cc:	04 c0       	rjmp	.+8      	; 0x21d6 <_fpadd_parts+0x130>
    21ce:	96 94       	lsr	r9
    21d0:	87 94       	ror	r8
    21d2:	77 94       	ror	r7
    21d4:	67 94       	ror	r6
    21d6:	0a 94       	dec	r0
    21d8:	d2 f7       	brpl	.-12     	; 0x21ce <_fpadd_parts+0x128>
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	0a 2c       	mov	r0, r10
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <_fpadd_parts+0x148>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	aa 1f       	adc	r26, r26
    21ec:	bb 1f       	adc	r27, r27
    21ee:	0a 94       	dec	r0
    21f0:	d2 f7       	brpl	.-12     	; 0x21e6 <_fpadd_parts+0x140>
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	a1 09       	sbc	r26, r1
    21f6:	b1 09       	sbc	r27, r1
    21f8:	82 23       	and	r24, r18
    21fa:	93 23       	and	r25, r19
    21fc:	a4 23       	and	r26, r20
    21fe:	b5 23       	and	r27, r21
    2200:	21 e0       	ldi	r18, 0x01	; 1
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	a1 05       	cpc	r26, r1
    220c:	b1 05       	cpc	r27, r1
    220e:	19 f4       	brne	.+6      	; 0x2216 <_fpadd_parts+0x170>
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	a9 01       	movw	r20, r18
    2216:	26 29       	or	r18, r6
    2218:	37 29       	or	r19, r7
    221a:	48 29       	or	r20, r8
    221c:	59 29       	or	r21, r9
    221e:	0b c0       	rjmp	.+22     	; 0x2236 <_fpadd_parts+0x190>
    2220:	6c 14       	cp	r6, r12
    2222:	7d 04       	cpc	r7, r13
    2224:	24 f4       	brge	.+8      	; 0x222e <_fpadd_parts+0x188>
    2226:	ee 24       	eor	r14, r14
    2228:	ff 24       	eor	r15, r15
    222a:	87 01       	movw	r16, r14
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <_fpadd_parts+0x190>
    222e:	63 01       	movw	r12, r6
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	a9 01       	movw	r20, r18
    2236:	81 81       	ldd	r24, Z+1	; 0x01
    2238:	fb 01       	movw	r30, r22
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	89 17       	cp	r24, r25
    223e:	09 f4       	brne	.+2      	; 0x2242 <_fpadd_parts+0x19c>
    2240:	45 c0       	rjmp	.+138    	; 0x22cc <_fpadd_parts+0x226>
    2242:	88 23       	and	r24, r24
    2244:	49 f0       	breq	.+18     	; 0x2258 <_fpadd_parts+0x1b2>
    2246:	d8 01       	movw	r26, r16
    2248:	c7 01       	movw	r24, r14
    224a:	82 1b       	sub	r24, r18
    224c:	93 0b       	sbc	r25, r19
    224e:	a4 0b       	sbc	r26, r20
    2250:	b5 0b       	sbc	r27, r21
    2252:	9c 01       	movw	r18, r24
    2254:	ad 01       	movw	r20, r26
    2256:	04 c0       	rjmp	.+8      	; 0x2260 <_fpadd_parts+0x1ba>
    2258:	2e 19       	sub	r18, r14
    225a:	3f 09       	sbc	r19, r15
    225c:	40 0b       	sbc	r20, r16
    225e:	51 0b       	sbc	r21, r17
    2260:	57 fd       	sbrc	r21, 7
    2262:	04 c0       	rjmp	.+8      	; 0x226c <_fpadd_parts+0x1c6>
    2264:	19 82       	std	Y+1, r1	; 0x01
    2266:	db 82       	std	Y+3, r13	; 0x03
    2268:	ca 82       	std	Y+2, r12	; 0x02
    226a:	0b c0       	rjmp	.+22     	; 0x2282 <_fpadd_parts+0x1dc>
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	db 82       	std	Y+3, r13	; 0x03
    2272:	ca 82       	std	Y+2, r12	; 0x02
    2274:	50 95       	com	r21
    2276:	40 95       	com	r20
    2278:	30 95       	com	r19
    227a:	21 95       	neg	r18
    227c:	3f 4f       	sbci	r19, 0xFF	; 255
    227e:	4f 4f       	sbci	r20, 0xFF	; 255
    2280:	5f 4f       	sbci	r21, 0xFF	; 255
    2282:	2c 83       	std	Y+4, r18	; 0x04
    2284:	3d 83       	std	Y+5, r19	; 0x05
    2286:	4e 83       	std	Y+6, r20	; 0x06
    2288:	5f 83       	std	Y+7, r21	; 0x07
    228a:	0d c0       	rjmp	.+26     	; 0x22a6 <_fpadd_parts+0x200>
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	aa 1f       	adc	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	8c 83       	std	Y+4, r24	; 0x04
    2296:	9d 83       	std	Y+5, r25	; 0x05
    2298:	ae 83       	std	Y+6, r26	; 0x06
    229a:	bf 83       	std	Y+7, r27	; 0x07
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9b 83       	std	Y+3, r25	; 0x03
    22a4:	8a 83       	std	Y+2, r24	; 0x02
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	9d 81       	ldd	r25, Y+5	; 0x05
    22aa:	ae 81       	ldd	r26, Y+6	; 0x06
    22ac:	bf 81       	ldd	r27, Y+7	; 0x07
    22ae:	9c 01       	movw	r18, r24
    22b0:	ad 01       	movw	r20, r26
    22b2:	21 50       	subi	r18, 0x01	; 1
    22b4:	30 40       	sbci	r19, 0x00	; 0
    22b6:	40 40       	sbci	r20, 0x00	; 0
    22b8:	50 40       	sbci	r21, 0x00	; 0
    22ba:	2f 3f       	cpi	r18, 0xFF	; 255
    22bc:	ef ef       	ldi	r30, 0xFF	; 255
    22be:	3e 07       	cpc	r19, r30
    22c0:	ef ef       	ldi	r30, 0xFF	; 255
    22c2:	4e 07       	cpc	r20, r30
    22c4:	ef e3       	ldi	r30, 0x3F	; 63
    22c6:	5e 07       	cpc	r21, r30
    22c8:	08 f3       	brcs	.-62     	; 0x228c <_fpadd_parts+0x1e6>
    22ca:	0b c0       	rjmp	.+22     	; 0x22e2 <_fpadd_parts+0x23c>
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	db 82       	std	Y+3, r13	; 0x03
    22d0:	ca 82       	std	Y+2, r12	; 0x02
    22d2:	2e 0d       	add	r18, r14
    22d4:	3f 1d       	adc	r19, r15
    22d6:	40 1f       	adc	r20, r16
    22d8:	51 1f       	adc	r21, r17
    22da:	2c 83       	std	Y+4, r18	; 0x04
    22dc:	3d 83       	std	Y+5, r19	; 0x05
    22de:	4e 83       	std	Y+6, r20	; 0x06
    22e0:	5f 83       	std	Y+7, r21	; 0x07
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	88 83       	st	Y, r24
    22e6:	2c 81       	ldd	r18, Y+4	; 0x04
    22e8:	3d 81       	ldd	r19, Y+5	; 0x05
    22ea:	4e 81       	ldd	r20, Y+6	; 0x06
    22ec:	5f 81       	ldd	r21, Y+7	; 0x07
    22ee:	57 ff       	sbrs	r21, 7
    22f0:	1d c0       	rjmp	.+58     	; 0x232c <_fpadd_parts+0x286>
    22f2:	da 01       	movw	r26, r20
    22f4:	c9 01       	movw	r24, r18
    22f6:	81 70       	andi	r24, 0x01	; 1
    22f8:	90 70       	andi	r25, 0x00	; 0
    22fa:	a0 70       	andi	r26, 0x00	; 0
    22fc:	b0 70       	andi	r27, 0x00	; 0
    22fe:	56 95       	lsr	r21
    2300:	47 95       	ror	r20
    2302:	37 95       	ror	r19
    2304:	27 95       	ror	r18
    2306:	82 2b       	or	r24, r18
    2308:	93 2b       	or	r25, r19
    230a:	a4 2b       	or	r26, r20
    230c:	b5 2b       	or	r27, r21
    230e:	8c 83       	std	Y+4, r24	; 0x04
    2310:	9d 83       	std	Y+5, r25	; 0x05
    2312:	ae 83       	std	Y+6, r26	; 0x06
    2314:	bf 83       	std	Y+7, r27	; 0x07
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	01 96       	adiw	r24, 0x01	; 1
    231c:	9b 83       	std	Y+3, r25	; 0x03
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	05 c0       	rjmp	.+10     	; 0x232c <_fpadd_parts+0x286>
    2322:	e4 ec       	ldi	r30, 0xC4	; 196
    2324:	f2 e0       	ldi	r31, 0x02	; 2
    2326:	03 c0       	rjmp	.+6      	; 0x232e <_fpadd_parts+0x288>
    2328:	fb 01       	movw	r30, r22
    232a:	01 c0       	rjmp	.+2      	; 0x232e <_fpadd_parts+0x288>
    232c:	fe 01       	movw	r30, r28
    232e:	cf 01       	movw	r24, r30
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	ee e0       	ldi	r30, 0x0E	; 14
    2336:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__epilogue_restores__+0x8>

0000233a <__addsf3>:
    233a:	a0 e2       	ldi	r26, 0x20	; 32
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 ea       	ldi	r30, 0xA3	; 163
    2340:	f1 e1       	ldi	r31, 0x11	; 17
    2342:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__+0x18>
    2346:	69 83       	std	Y+1, r22	; 0x01
    2348:	7a 83       	std	Y+2, r23	; 0x02
    234a:	8b 83       	std	Y+3, r24	; 0x03
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	2d 83       	std	Y+5, r18	; 0x05
    2350:	3e 83       	std	Y+6, r19	; 0x06
    2352:	4f 83       	std	Y+7, r20	; 0x07
    2354:	58 87       	std	Y+8, r21	; 0x08
    2356:	89 e0       	ldi	r24, 0x09	; 9
    2358:	e8 2e       	mov	r14, r24
    235a:	f1 2c       	mov	r15, r1
    235c:	ec 0e       	add	r14, r28
    235e:	fd 1e       	adc	r15, r29
    2360:	ce 01       	movw	r24, r28
    2362:	01 96       	adiw	r24, 0x01	; 1
    2364:	b7 01       	movw	r22, r14
    2366:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    236a:	8e 01       	movw	r16, r28
    236c:	0f 5e       	subi	r16, 0xEF	; 239
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	ce 01       	movw	r24, r28
    2372:	05 96       	adiw	r24, 0x05	; 5
    2374:	b8 01       	movw	r22, r16
    2376:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    237a:	c7 01       	movw	r24, r14
    237c:	b8 01       	movw	r22, r16
    237e:	ae 01       	movw	r20, r28
    2380:	47 5e       	subi	r20, 0xE7	; 231
    2382:	5f 4f       	sbci	r21, 0xFF	; 255
    2384:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_fpadd_parts>
    2388:	0e 94 49 14 	call	0x2892	; 0x2892 <__pack_f>
    238c:	a0 96       	adiw	r28, 0x20	; 32
    238e:	e6 e0       	ldi	r30, 0x06	; 6
    2390:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x18>

00002394 <__subsf3>:
    2394:	a0 e2       	ldi	r26, 0x20	; 32
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e0 ed       	ldi	r30, 0xD0	; 208
    239a:	f1 e1       	ldi	r31, 0x11	; 17
    239c:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__+0x18>
    23a0:	69 83       	std	Y+1, r22	; 0x01
    23a2:	7a 83       	std	Y+2, r23	; 0x02
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	2d 83       	std	Y+5, r18	; 0x05
    23aa:	3e 83       	std	Y+6, r19	; 0x06
    23ac:	4f 83       	std	Y+7, r20	; 0x07
    23ae:	58 87       	std	Y+8, r21	; 0x08
    23b0:	8e 01       	movw	r16, r28
    23b2:	07 5f       	subi	r16, 0xF7	; 247
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	ce 01       	movw	r24, r28
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	b8 01       	movw	r22, r16
    23bc:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    23c0:	91 e1       	ldi	r25, 0x11	; 17
    23c2:	e9 2e       	mov	r14, r25
    23c4:	f1 2c       	mov	r15, r1
    23c6:	ec 0e       	add	r14, r28
    23c8:	fd 1e       	adc	r15, r29
    23ca:	ce 01       	movw	r24, r28
    23cc:	05 96       	adiw	r24, 0x05	; 5
    23ce:	b7 01       	movw	r22, r14
    23d0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    23d4:	8a 89       	ldd	r24, Y+18	; 0x12
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	89 27       	eor	r24, r25
    23da:	8a 8b       	std	Y+18, r24	; 0x12
    23dc:	c8 01       	movw	r24, r16
    23de:	b7 01       	movw	r22, r14
    23e0:	ae 01       	movw	r20, r28
    23e2:	47 5e       	subi	r20, 0xE7	; 231
    23e4:	5f 4f       	sbci	r21, 0xFF	; 255
    23e6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_fpadd_parts>
    23ea:	0e 94 49 14 	call	0x2892	; 0x2892 <__pack_f>
    23ee:	a0 96       	adiw	r28, 0x20	; 32
    23f0:	e6 e0       	ldi	r30, 0x06	; 6
    23f2:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x18>

000023f6 <__mulsf3>:
    23f6:	a0 e2       	ldi	r26, 0x20	; 32
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e1 e0       	ldi	r30, 0x01	; 1
    23fc:	f2 e1       	ldi	r31, 0x12	; 18
    23fe:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__prologue_saves__>
    2402:	69 83       	std	Y+1, r22	; 0x01
    2404:	7a 83       	std	Y+2, r23	; 0x02
    2406:	8b 83       	std	Y+3, r24	; 0x03
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	2d 83       	std	Y+5, r18	; 0x05
    240c:	3e 83       	std	Y+6, r19	; 0x06
    240e:	4f 83       	std	Y+7, r20	; 0x07
    2410:	58 87       	std	Y+8, r21	; 0x08
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	be 01       	movw	r22, r28
    2418:	67 5f       	subi	r22, 0xF7	; 247
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    2420:	ce 01       	movw	r24, r28
    2422:	05 96       	adiw	r24, 0x05	; 5
    2424:	be 01       	movw	r22, r28
    2426:	6f 5e       	subi	r22, 0xEF	; 239
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    242e:	99 85       	ldd	r25, Y+9	; 0x09
    2430:	92 30       	cpi	r25, 0x02	; 2
    2432:	78 f0       	brcs	.+30     	; 0x2452 <__mulsf3+0x5c>
    2434:	89 89       	ldd	r24, Y+17	; 0x11
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	c0 f0       	brcs	.+48     	; 0x246a <__mulsf3+0x74>
    243a:	94 30       	cpi	r25, 0x04	; 4
    243c:	19 f4       	brne	.+6      	; 0x2444 <__mulsf3+0x4e>
    243e:	82 30       	cpi	r24, 0x02	; 2
    2440:	41 f4       	brne	.+16     	; 0x2452 <__mulsf3+0x5c>
    2442:	cb c0       	rjmp	.+406    	; 0x25da <__mulsf3+0x1e4>
    2444:	84 30       	cpi	r24, 0x04	; 4
    2446:	19 f4       	brne	.+6      	; 0x244e <__mulsf3+0x58>
    2448:	92 30       	cpi	r25, 0x02	; 2
    244a:	79 f4       	brne	.+30     	; 0x246a <__mulsf3+0x74>
    244c:	c6 c0       	rjmp	.+396    	; 0x25da <__mulsf3+0x1e4>
    244e:	92 30       	cpi	r25, 0x02	; 2
    2450:	51 f4       	brne	.+20     	; 0x2466 <__mulsf3+0x70>
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	2a 85       	ldd	r18, Y+10	; 0x0a
    2456:	9a 89       	ldd	r25, Y+18	; 0x12
    2458:	29 17       	cp	r18, r25
    245a:	09 f4       	brne	.+2      	; 0x245e <__mulsf3+0x68>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	8a 87       	std	Y+10, r24	; 0x0a
    2460:	ce 01       	movw	r24, r28
    2462:	09 96       	adiw	r24, 0x09	; 9
    2464:	bc c0       	rjmp	.+376    	; 0x25de <__mulsf3+0x1e8>
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	51 f4       	brne	.+20     	; 0x247e <__mulsf3+0x88>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	2a 85       	ldd	r18, Y+10	; 0x0a
    246e:	9a 89       	ldd	r25, Y+18	; 0x12
    2470:	29 17       	cp	r18, r25
    2472:	09 f4       	brne	.+2      	; 0x2476 <__mulsf3+0x80>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	8a 8b       	std	Y+18, r24	; 0x12
    2478:	ce 01       	movw	r24, r28
    247a:	41 96       	adiw	r24, 0x11	; 17
    247c:	b0 c0       	rjmp	.+352    	; 0x25de <__mulsf3+0x1e8>
    247e:	6d 84       	ldd	r6, Y+13	; 0x0d
    2480:	7e 84       	ldd	r7, Y+14	; 0x0e
    2482:	8f 84       	ldd	r8, Y+15	; 0x0f
    2484:	98 88       	ldd	r9, Y+16	; 0x10
    2486:	ed 88       	ldd	r14, Y+21	; 0x15
    2488:	fe 88       	ldd	r15, Y+22	; 0x16
    248a:	0f 89       	ldd	r16, Y+23	; 0x17
    248c:	18 8d       	ldd	r17, Y+24	; 0x18
    248e:	e0 e2       	ldi	r30, 0x20	; 32
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	dc 01       	movw	r26, r24
    2498:	aa 24       	eor	r10, r10
    249a:	bb 24       	eor	r11, r11
    249c:	65 01       	movw	r12, r10
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	a9 01       	movw	r20, r18
    24a4:	b3 01       	movw	r22, r6
    24a6:	61 70       	andi	r22, 0x01	; 1
    24a8:	70 70       	andi	r23, 0x00	; 0
    24aa:	61 15       	cp	r22, r1
    24ac:	71 05       	cpc	r23, r1
    24ae:	d1 f0       	breq	.+52     	; 0x24e4 <__mulsf3+0xee>
    24b0:	2e 0d       	add	r18, r14
    24b2:	3f 1d       	adc	r19, r15
    24b4:	40 1f       	adc	r20, r16
    24b6:	51 1f       	adc	r21, r17
    24b8:	15 01       	movw	r2, r10
    24ba:	26 01       	movw	r4, r12
    24bc:	28 0e       	add	r2, r24
    24be:	39 1e       	adc	r3, r25
    24c0:	4a 1e       	adc	r4, r26
    24c2:	5b 1e       	adc	r5, r27
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e0       	ldi	r26, 0x00	; 0
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	2e 15       	cp	r18, r14
    24ce:	3f 05       	cpc	r19, r15
    24d0:	40 07       	cpc	r20, r16
    24d2:	51 07       	cpc	r21, r17
    24d4:	18 f0       	brcs	.+6      	; 0x24dc <__mulsf3+0xe6>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	dc 01       	movw	r26, r24
    24dc:	82 0d       	add	r24, r2
    24de:	93 1d       	adc	r25, r3
    24e0:	a4 1d       	adc	r26, r4
    24e2:	b5 1d       	adc	r27, r5
    24e4:	aa 0c       	add	r10, r10
    24e6:	bb 1c       	adc	r11, r11
    24e8:	cc 1c       	adc	r12, r12
    24ea:	dd 1c       	adc	r13, r13
    24ec:	17 ff       	sbrs	r17, 7
    24ee:	09 c0       	rjmp	.+18     	; 0x2502 <__mulsf3+0x10c>
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	26 2e       	mov	r2, r22
    24f4:	31 2c       	mov	r3, r1
    24f6:	41 2c       	mov	r4, r1
    24f8:	51 2c       	mov	r5, r1
    24fa:	a2 28       	or	r10, r2
    24fc:	b3 28       	or	r11, r3
    24fe:	c4 28       	or	r12, r4
    2500:	d5 28       	or	r13, r5
    2502:	31 97       	sbiw	r30, 0x01	; 1
    2504:	49 f0       	breq	.+18     	; 0x2518 <__mulsf3+0x122>
    2506:	ee 0c       	add	r14, r14
    2508:	ff 1c       	adc	r15, r15
    250a:	00 1f       	adc	r16, r16
    250c:	11 1f       	adc	r17, r17
    250e:	96 94       	lsr	r9
    2510:	87 94       	ror	r8
    2512:	77 94       	ror	r7
    2514:	67 94       	ror	r6
    2516:	c6 cf       	rjmp	.-116    	; 0x24a4 <__mulsf3+0xae>
    2518:	6b 89       	ldd	r22, Y+19	; 0x13
    251a:	7c 89       	ldd	r23, Y+20	; 0x14
    251c:	eb 85       	ldd	r30, Y+11	; 0x0b
    251e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2520:	6e 0f       	add	r22, r30
    2522:	7f 1f       	adc	r23, r31
    2524:	6e 5f       	subi	r22, 0xFE	; 254
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	7c 8f       	std	Y+28, r23	; 0x1c
    252a:	6b 8f       	std	Y+27, r22	; 0x1b
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2530:	7a 89       	ldd	r23, Y+18	; 0x12
    2532:	e7 17       	cp	r30, r23
    2534:	09 f4       	brne	.+2      	; 0x2538 <__mulsf3+0x142>
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	6a 8f       	std	Y+26, r22	; 0x1a
    253a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    253c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    253e:	10 c0       	rjmp	.+32     	; 0x2560 <__mulsf3+0x16a>
    2540:	fc 01       	movw	r30, r24
    2542:	e1 70       	andi	r30, 0x01	; 1
    2544:	f0 70       	andi	r31, 0x00	; 0
    2546:	30 97       	sbiw	r30, 0x00	; 0
    2548:	29 f0       	breq	.+10     	; 0x2554 <__mulsf3+0x15e>
    254a:	56 95       	lsr	r21
    254c:	47 95       	ror	r20
    254e:	37 95       	ror	r19
    2550:	27 95       	ror	r18
    2552:	50 68       	ori	r21, 0x80	; 128
    2554:	b6 95       	lsr	r27
    2556:	a7 95       	ror	r26
    2558:	97 95       	ror	r25
    255a:	87 95       	ror	r24
    255c:	6f 5f       	subi	r22, 0xFF	; 255
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	b7 fd       	sbrc	r27, 7
    2562:	ee cf       	rjmp	.-36     	; 0x2540 <__mulsf3+0x14a>
    2564:	0c c0       	rjmp	.+24     	; 0x257e <__mulsf3+0x188>
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	aa 1f       	adc	r26, r26
    256c:	bb 1f       	adc	r27, r27
    256e:	57 fd       	sbrc	r21, 7
    2570:	81 60       	ori	r24, 0x01	; 1
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	44 1f       	adc	r20, r20
    2578:	55 1f       	adc	r21, r21
    257a:	61 50       	subi	r22, 0x01	; 1
    257c:	70 40       	sbci	r23, 0x00	; 0
    257e:	80 30       	cpi	r24, 0x00	; 0
    2580:	e0 e0       	ldi	r30, 0x00	; 0
    2582:	9e 07       	cpc	r25, r30
    2584:	e0 e0       	ldi	r30, 0x00	; 0
    2586:	ae 07       	cpc	r26, r30
    2588:	e0 e4       	ldi	r30, 0x40	; 64
    258a:	be 07       	cpc	r27, r30
    258c:	60 f3       	brcs	.-40     	; 0x2566 <__mulsf3+0x170>
    258e:	6b 8f       	std	Y+27, r22	; 0x1b
    2590:	7c 8f       	std	Y+28, r23	; 0x1c
    2592:	6f e7       	ldi	r22, 0x7F	; 127
    2594:	e6 2e       	mov	r14, r22
    2596:	f1 2c       	mov	r15, r1
    2598:	01 2d       	mov	r16, r1
    259a:	11 2d       	mov	r17, r1
    259c:	e8 22       	and	r14, r24
    259e:	f9 22       	and	r15, r25
    25a0:	0a 23       	and	r16, r26
    25a2:	1b 23       	and	r17, r27
    25a4:	60 e4       	ldi	r22, 0x40	; 64
    25a6:	e6 16       	cp	r14, r22
    25a8:	f1 04       	cpc	r15, r1
    25aa:	01 05       	cpc	r16, r1
    25ac:	11 05       	cpc	r17, r1
    25ae:	61 f4       	brne	.+24     	; 0x25c8 <__mulsf3+0x1d2>
    25b0:	87 fd       	sbrc	r24, 7
    25b2:	0a c0       	rjmp	.+20     	; 0x25c8 <__mulsf3+0x1d2>
    25b4:	21 15       	cp	r18, r1
    25b6:	31 05       	cpc	r19, r1
    25b8:	41 05       	cpc	r20, r1
    25ba:	51 05       	cpc	r21, r1
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <__mulsf3+0x1d2>
    25be:	80 5c       	subi	r24, 0xC0	; 192
    25c0:	9f 4f       	sbci	r25, 0xFF	; 255
    25c2:	af 4f       	sbci	r26, 0xFF	; 255
    25c4:	bf 4f       	sbci	r27, 0xFF	; 255
    25c6:	80 78       	andi	r24, 0x80	; 128
    25c8:	8d 8f       	std	Y+29, r24	; 0x1d
    25ca:	9e 8f       	std	Y+30, r25	; 0x1e
    25cc:	af 8f       	std	Y+31, r26	; 0x1f
    25ce:	b8 a3       	std	Y+32, r27	; 0x20
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	89 8f       	std	Y+25, r24	; 0x19
    25d4:	ce 01       	movw	r24, r28
    25d6:	49 96       	adiw	r24, 0x19	; 25
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <__mulsf3+0x1e8>
    25da:	84 ec       	ldi	r24, 0xC4	; 196
    25dc:	92 e0       	ldi	r25, 0x02	; 2
    25de:	0e 94 49 14 	call	0x2892	; 0x2892 <__pack_f>
    25e2:	a0 96       	adiw	r28, 0x20	; 32
    25e4:	e2 e1       	ldi	r30, 0x12	; 18
    25e6:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__epilogue_restores__>

000025ea <__gesf2>:
    25ea:	a8 e1       	ldi	r26, 0x18	; 24
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	eb ef       	ldi	r30, 0xFB	; 251
    25f0:	f2 e1       	ldi	r31, 0x12	; 18
    25f2:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__+0x18>
    25f6:	69 83       	std	Y+1, r22	; 0x01
    25f8:	7a 83       	std	Y+2, r23	; 0x02
    25fa:	8b 83       	std	Y+3, r24	; 0x03
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	2d 83       	std	Y+5, r18	; 0x05
    2600:	3e 83       	std	Y+6, r19	; 0x06
    2602:	4f 83       	std	Y+7, r20	; 0x07
    2604:	58 87       	std	Y+8, r21	; 0x08
    2606:	8e 01       	movw	r16, r28
    2608:	07 5f       	subi	r16, 0xF7	; 247
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	ce 01       	movw	r24, r28
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	b8 01       	movw	r22, r16
    2612:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    2616:	81 e1       	ldi	r24, 0x11	; 17
    2618:	e8 2e       	mov	r14, r24
    261a:	f1 2c       	mov	r15, r1
    261c:	ec 0e       	add	r14, r28
    261e:	fd 1e       	adc	r15, r29
    2620:	ce 01       	movw	r24, r28
    2622:	05 96       	adiw	r24, 0x05	; 5
    2624:	b7 01       	movw	r22, r14
    2626:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	40 f0       	brcs	.+16     	; 0x2640 <__gesf2+0x56>
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	28 f0       	brcs	.+10     	; 0x2640 <__gesf2+0x56>
    2636:	c8 01       	movw	r24, r16
    2638:	b7 01       	movw	r22, r14
    263a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__fpcmp_parts_f>
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <__gesf2+0x58>
    2640:	8f ef       	ldi	r24, 0xFF	; 255
    2642:	68 96       	adiw	r28, 0x18	; 24
    2644:	e6 e0       	ldi	r30, 0x06	; 6
    2646:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x18>

0000264a <__fixsfsi>:
    264a:	ac e0       	ldi	r26, 0x0C	; 12
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	eb e2       	ldi	r30, 0x2B	; 43
    2650:	f3 e1       	ldi	r31, 0x13	; 19
    2652:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__prologue_saves__+0x20>
    2656:	69 83       	std	Y+1, r22	; 0x01
    2658:	7a 83       	std	Y+2, r23	; 0x02
    265a:	8b 83       	std	Y+3, r24	; 0x03
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	ce 01       	movw	r24, r28
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	be 01       	movw	r22, r28
    2664:	6b 5f       	subi	r22, 0xFB	; 251
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__unpack_f>
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	81 f1       	breq	.+96     	; 0x26d2 <__fixsfsi+0x88>
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	70 f1       	brcs	.+92     	; 0x26d2 <__fixsfsi+0x88>
    2676:	84 30       	cpi	r24, 0x04	; 4
    2678:	21 f4       	brne	.+8      	; 0x2682 <__fixsfsi+0x38>
    267a:	8e 81       	ldd	r24, Y+6	; 0x06
    267c:	88 23       	and	r24, r24
    267e:	69 f1       	breq	.+90     	; 0x26da <__fixsfsi+0x90>
    2680:	0a c0       	rjmp	.+20     	; 0x2696 <__fixsfsi+0x4c>
    2682:	2f 81       	ldd	r18, Y+7	; 0x07
    2684:	38 85       	ldd	r19, Y+8	; 0x08
    2686:	37 fd       	sbrc	r19, 7
    2688:	24 c0       	rjmp	.+72     	; 0x26d2 <__fixsfsi+0x88>
    268a:	6e 81       	ldd	r22, Y+6	; 0x06
    268c:	2f 31       	cpi	r18, 0x1F	; 31
    268e:	31 05       	cpc	r19, r1
    2690:	3c f0       	brlt	.+14     	; 0x26a0 <__fixsfsi+0x56>
    2692:	66 23       	and	r22, r22
    2694:	11 f1       	breq	.+68     	; 0x26da <__fixsfsi+0x90>
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	50 e8       	ldi	r21, 0x80	; 128
    269e:	21 c0       	rjmp	.+66     	; 0x26e2 <__fixsfsi+0x98>
    26a0:	8e e1       	ldi	r24, 0x1E	; 30
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	82 1b       	sub	r24, r18
    26a6:	93 0b       	sbc	r25, r19
    26a8:	29 85       	ldd	r18, Y+9	; 0x09
    26aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    26ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <__fixsfsi+0x70>
    26b2:	56 95       	lsr	r21
    26b4:	47 95       	ror	r20
    26b6:	37 95       	ror	r19
    26b8:	27 95       	ror	r18
    26ba:	8a 95       	dec	r24
    26bc:	d2 f7       	brpl	.-12     	; 0x26b2 <__fixsfsi+0x68>
    26be:	66 23       	and	r22, r22
    26c0:	81 f0       	breq	.+32     	; 0x26e2 <__fixsfsi+0x98>
    26c2:	50 95       	com	r21
    26c4:	40 95       	com	r20
    26c6:	30 95       	com	r19
    26c8:	21 95       	neg	r18
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	4f 4f       	sbci	r20, 0xFF	; 255
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	08 c0       	rjmp	.+16     	; 0x26e2 <__fixsfsi+0x98>
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	a9 01       	movw	r20, r18
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <__fixsfsi+0x98>
    26da:	2f ef       	ldi	r18, 0xFF	; 255
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f ef       	ldi	r20, 0xFF	; 255
    26e0:	5f e7       	ldi	r21, 0x7F	; 127
    26e2:	b9 01       	movw	r22, r18
    26e4:	ca 01       	movw	r24, r20
    26e6:	2c 96       	adiw	r28, 0x0c	; 12
    26e8:	e2 e0       	ldi	r30, 0x02	; 2
    26ea:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__epilogue_restores__+0x20>

000026ee <__floatunsisf>:
    26ee:	a8 e0       	ldi	r26, 0x08	; 8
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	ed e7       	ldi	r30, 0x7D	; 125
    26f4:	f3 e1       	ldi	r31, 0x13	; 19
    26f6:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__prologue_saves__+0x14>
    26fa:	7b 01       	movw	r14, r22
    26fc:	8c 01       	movw	r16, r24
    26fe:	1a 82       	std	Y+2, r1	; 0x02
    2700:	61 15       	cp	r22, r1
    2702:	71 05       	cpc	r23, r1
    2704:	81 05       	cpc	r24, r1
    2706:	91 05       	cpc	r25, r1
    2708:	19 f4       	brne	.+6      	; 0x2710 <__floatunsisf+0x22>
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	5f c0       	rjmp	.+190    	; 0x27ce <__floatunsisf+0xe0>
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	8e e1       	ldi	r24, 0x1E	; 30
    2716:	c8 2e       	mov	r12, r24
    2718:	d1 2c       	mov	r13, r1
    271a:	dc 82       	std	Y+4, r13	; 0x04
    271c:	cb 82       	std	Y+3, r12	; 0x03
    271e:	ed 82       	std	Y+5, r14	; 0x05
    2720:	fe 82       	std	Y+6, r15	; 0x06
    2722:	0f 83       	std	Y+7, r16	; 0x07
    2724:	18 87       	std	Y+8, r17	; 0x08
    2726:	c8 01       	movw	r24, r16
    2728:	b7 01       	movw	r22, r14
    272a:	0e 94 ef 13 	call	0x27de	; 0x27de <__clzsi2>
    272e:	fc 01       	movw	r30, r24
    2730:	31 97       	sbiw	r30, 0x01	; 1
    2732:	f7 ff       	sbrs	r31, 7
    2734:	3a c0       	rjmp	.+116    	; 0x27aa <__floatunsisf+0xbc>
    2736:	aa 27       	eor	r26, r26
    2738:	bb 27       	eor	r27, r27
    273a:	ae 1b       	sub	r26, r30
    273c:	bf 0b       	sbc	r27, r31
    273e:	21 e0       	ldi	r18, 0x01	; 1
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	0a 2e       	mov	r0, r26
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <__floatunsisf+0x64>
    274a:	22 0f       	add	r18, r18
    274c:	33 1f       	adc	r19, r19
    274e:	44 1f       	adc	r20, r20
    2750:	55 1f       	adc	r21, r21
    2752:	0a 94       	dec	r0
    2754:	d2 f7       	brpl	.-12     	; 0x274a <__floatunsisf+0x5c>
    2756:	21 50       	subi	r18, 0x01	; 1
    2758:	30 40       	sbci	r19, 0x00	; 0
    275a:	40 40       	sbci	r20, 0x00	; 0
    275c:	50 40       	sbci	r21, 0x00	; 0
    275e:	2e 21       	and	r18, r14
    2760:	3f 21       	and	r19, r15
    2762:	40 23       	and	r20, r16
    2764:	51 23       	and	r21, r17
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	21 15       	cp	r18, r1
    2770:	31 05       	cpc	r19, r1
    2772:	41 05       	cpc	r20, r1
    2774:	51 05       	cpc	r21, r1
    2776:	19 f4       	brne	.+6      	; 0x277e <__floatunsisf+0x90>
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	cb 01       	movw	r24, r22
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <__floatunsisf+0x9a>
    2780:	16 95       	lsr	r17
    2782:	07 95       	ror	r16
    2784:	f7 94       	ror	r15
    2786:	e7 94       	ror	r14
    2788:	aa 95       	dec	r26
    278a:	d2 f7       	brpl	.-12     	; 0x2780 <__floatunsisf+0x92>
    278c:	e6 2a       	or	r14, r22
    278e:	f7 2a       	or	r15, r23
    2790:	08 2b       	or	r16, r24
    2792:	19 2b       	or	r17, r25
    2794:	ed 82       	std	Y+5, r14	; 0x05
    2796:	fe 82       	std	Y+6, r15	; 0x06
    2798:	0f 83       	std	Y+7, r16	; 0x07
    279a:	18 87       	std	Y+8, r17	; 0x08
    279c:	8e e1       	ldi	r24, 0x1E	; 30
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	8e 1b       	sub	r24, r30
    27a2:	9f 0b       	sbc	r25, r31
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
    27a8:	12 c0       	rjmp	.+36     	; 0x27ce <__floatunsisf+0xe0>
    27aa:	30 97       	sbiw	r30, 0x00	; 0
    27ac:	81 f0       	breq	.+32     	; 0x27ce <__floatunsisf+0xe0>
    27ae:	0e 2e       	mov	r0, r30
    27b0:	04 c0       	rjmp	.+8      	; 0x27ba <__floatunsisf+0xcc>
    27b2:	ee 0c       	add	r14, r14
    27b4:	ff 1c       	adc	r15, r15
    27b6:	00 1f       	adc	r16, r16
    27b8:	11 1f       	adc	r17, r17
    27ba:	0a 94       	dec	r0
    27bc:	d2 f7       	brpl	.-12     	; 0x27b2 <__floatunsisf+0xc4>
    27be:	ed 82       	std	Y+5, r14	; 0x05
    27c0:	fe 82       	std	Y+6, r15	; 0x06
    27c2:	0f 83       	std	Y+7, r16	; 0x07
    27c4:	18 87       	std	Y+8, r17	; 0x08
    27c6:	ce 1a       	sub	r12, r30
    27c8:	df 0a       	sbc	r13, r31
    27ca:	dc 82       	std	Y+4, r13	; 0x04
    27cc:	cb 82       	std	Y+3, r12	; 0x03
    27ce:	ce 01       	movw	r24, r28
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	0e 94 49 14 	call	0x2892	; 0x2892 <__pack_f>
    27d6:	28 96       	adiw	r28, 0x08	; 8
    27d8:	e8 e0       	ldi	r30, 0x08	; 8
    27da:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__epilogue_restores__+0x14>

000027de <__clzsi2>:
    27de:	af 92       	push	r10
    27e0:	bf 92       	push	r11
    27e2:	cf 92       	push	r12
    27e4:	df 92       	push	r13
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	7b 01       	movw	r14, r22
    27f0:	8c 01       	movw	r16, r24
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	e8 16       	cp	r14, r24
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	f8 06       	cpc	r15, r24
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	08 07       	cpc	r16, r24
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	18 07       	cpc	r17, r24
    2802:	58 f4       	brcc	.+22     	; 0x281a <__clzsi2+0x3c>
    2804:	ef ef       	ldi	r30, 0xFF	; 255
    2806:	ee 16       	cp	r14, r30
    2808:	f1 04       	cpc	r15, r1
    280a:	01 05       	cpc	r16, r1
    280c:	11 05       	cpc	r17, r1
    280e:	09 f0       	breq	.+2      	; 0x2812 <__clzsi2+0x34>
    2810:	90 f4       	brcc	.+36     	; 0x2836 <__clzsi2+0x58>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	dc 01       	movw	r26, r24
    2818:	17 c0       	rjmp	.+46     	; 0x2848 <__clzsi2+0x6a>
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	ef 16       	cp	r14, r31
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	ff 06       	cpc	r15, r31
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	0f 07       	cpc	r16, r31
    2826:	f1 e0       	ldi	r31, 0x01	; 1
    2828:	1f 07       	cpc	r17, r31
    282a:	50 f4       	brcc	.+20     	; 0x2840 <__clzsi2+0x62>
    282c:	80 e1       	ldi	r24, 0x10	; 16
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e0       	ldi	r26, 0x00	; 0
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	09 c0       	rjmp	.+18     	; 0x2848 <__clzsi2+0x6a>
    2836:	88 e0       	ldi	r24, 0x08	; 8
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	04 c0       	rjmp	.+8      	; 0x2848 <__clzsi2+0x6a>
    2840:	88 e1       	ldi	r24, 0x18	; 24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e0       	ldi	r26, 0x00	; 0
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	20 e2       	ldi	r18, 0x20	; 32
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	28 1b       	sub	r18, r24
    2852:	39 0b       	sbc	r19, r25
    2854:	4a 0b       	sbc	r20, r26
    2856:	5b 0b       	sbc	r21, r27
    2858:	57 01       	movw	r10, r14
    285a:	68 01       	movw	r12, r16
    285c:	04 c0       	rjmp	.+8      	; 0x2866 <__clzsi2+0x88>
    285e:	d6 94       	lsr	r13
    2860:	c7 94       	ror	r12
    2862:	b7 94       	ror	r11
    2864:	a7 94       	ror	r10
    2866:	8a 95       	dec	r24
    2868:	d2 f7       	brpl	.-12     	; 0x285e <__clzsi2+0x80>
    286a:	d6 01       	movw	r26, r12
    286c:	c5 01       	movw	r24, r10
    286e:	84 53       	subi	r24, 0x34	; 52
    2870:	9d 4f       	sbci	r25, 0xFD	; 253
    2872:	fc 01       	movw	r30, r24
    2874:	80 81       	ld	r24, Z
    2876:	28 1b       	sub	r18, r24
    2878:	31 09       	sbc	r19, r1
    287a:	41 09       	sbc	r20, r1
    287c:	51 09       	sbc	r21, r1
    287e:	c9 01       	movw	r24, r18
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	ff 90       	pop	r15
    2886:	ef 90       	pop	r14
    2888:	df 90       	pop	r13
    288a:	cf 90       	pop	r12
    288c:	bf 90       	pop	r11
    288e:	af 90       	pop	r10
    2890:	08 95       	ret

00002892 <__pack_f>:
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	fc 01       	movw	r30, r24
    28a0:	24 81       	ldd	r18, Z+4	; 0x04
    28a2:	35 81       	ldd	r19, Z+5	; 0x05
    28a4:	46 81       	ldd	r20, Z+6	; 0x06
    28a6:	57 81       	ldd	r21, Z+7	; 0x07
    28a8:	61 81       	ldd	r22, Z+1	; 0x01
    28aa:	80 81       	ld	r24, Z
    28ac:	82 30       	cpi	r24, 0x02	; 2
    28ae:	20 f4       	brcc	.+8      	; 0x28b8 <__pack_f+0x26>
    28b0:	40 61       	ori	r20, 0x10	; 16
    28b2:	ef ef       	ldi	r30, 0xFF	; 255
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	a3 c0       	rjmp	.+326    	; 0x29fe <__pack_f+0x16c>
    28b8:	84 30       	cpi	r24, 0x04	; 4
    28ba:	09 f4       	brne	.+2      	; 0x28be <__pack_f+0x2c>
    28bc:	9b c0       	rjmp	.+310    	; 0x29f4 <__pack_f+0x162>
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <__pack_f+0x32>
    28c2:	92 c0       	rjmp	.+292    	; 0x29e8 <__pack_f+0x156>
    28c4:	21 15       	cp	r18, r1
    28c6:	31 05       	cpc	r19, r1
    28c8:	41 05       	cpc	r20, r1
    28ca:	51 05       	cpc	r21, r1
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <__pack_f+0x3e>
    28ce:	8f c0       	rjmp	.+286    	; 0x29ee <__pack_f+0x15c>
    28d0:	02 80       	ldd	r0, Z+2	; 0x02
    28d2:	f3 81       	ldd	r31, Z+3	; 0x03
    28d4:	e0 2d       	mov	r30, r0
    28d6:	8f ef       	ldi	r24, 0xFF	; 255
    28d8:	e2 38       	cpi	r30, 0x82	; 130
    28da:	f8 07       	cpc	r31, r24
    28dc:	0c f0       	brlt	.+2      	; 0x28e0 <__pack_f+0x4e>
    28de:	5a c0       	rjmp	.+180    	; 0x2994 <__pack_f+0x102>
    28e0:	c2 e8       	ldi	r28, 0x82	; 130
    28e2:	df ef       	ldi	r29, 0xFF	; 255
    28e4:	ce 1b       	sub	r28, r30
    28e6:	df 0b       	sbc	r29, r31
    28e8:	ca 31       	cpi	r28, 0x1A	; 26
    28ea:	d1 05       	cpc	r29, r1
    28ec:	6c f5       	brge	.+90     	; 0x2948 <__pack_f+0xb6>
    28ee:	79 01       	movw	r14, r18
    28f0:	8a 01       	movw	r16, r20
    28f2:	0c 2e       	mov	r0, r28
    28f4:	04 c0       	rjmp	.+8      	; 0x28fe <__pack_f+0x6c>
    28f6:	16 95       	lsr	r17
    28f8:	07 95       	ror	r16
    28fa:	f7 94       	ror	r15
    28fc:	e7 94       	ror	r14
    28fe:	0a 94       	dec	r0
    2900:	d2 f7       	brpl	.-12     	; 0x28f6 <__pack_f+0x64>
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e0       	ldi	r26, 0x00	; 0
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	0c 2e       	mov	r0, r28
    290c:	04 c0       	rjmp	.+8      	; 0x2916 <__pack_f+0x84>
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	aa 1f       	adc	r26, r26
    2914:	bb 1f       	adc	r27, r27
    2916:	0a 94       	dec	r0
    2918:	d2 f7       	brpl	.-12     	; 0x290e <__pack_f+0x7c>
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	a1 09       	sbc	r26, r1
    291e:	b1 09       	sbc	r27, r1
    2920:	82 23       	and	r24, r18
    2922:	93 23       	and	r25, r19
    2924:	a4 23       	and	r26, r20
    2926:	b5 23       	and	r27, r21
    2928:	21 e0       	ldi	r18, 0x01	; 1
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	a1 05       	cpc	r26, r1
    2934:	b1 05       	cpc	r27, r1
    2936:	19 f4       	brne	.+6      	; 0x293e <__pack_f+0xac>
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	a9 01       	movw	r20, r18
    293e:	2e 29       	or	r18, r14
    2940:	3f 29       	or	r19, r15
    2942:	40 2b       	or	r20, r16
    2944:	51 2b       	or	r21, r17
    2946:	03 c0       	rjmp	.+6      	; 0x294e <__pack_f+0xbc>
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	a9 01       	movw	r20, r18
    294e:	da 01       	movw	r26, r20
    2950:	c9 01       	movw	r24, r18
    2952:	8f 77       	andi	r24, 0x7F	; 127
    2954:	90 70       	andi	r25, 0x00	; 0
    2956:	a0 70       	andi	r26, 0x00	; 0
    2958:	b0 70       	andi	r27, 0x00	; 0
    295a:	80 34       	cpi	r24, 0x40	; 64
    295c:	91 05       	cpc	r25, r1
    295e:	a1 05       	cpc	r26, r1
    2960:	b1 05       	cpc	r27, r1
    2962:	39 f4       	brne	.+14     	; 0x2972 <__pack_f+0xe0>
    2964:	27 ff       	sbrs	r18, 7
    2966:	09 c0       	rjmp	.+18     	; 0x297a <__pack_f+0xe8>
    2968:	20 5c       	subi	r18, 0xC0	; 192
    296a:	3f 4f       	sbci	r19, 0xFF	; 255
    296c:	4f 4f       	sbci	r20, 0xFF	; 255
    296e:	5f 4f       	sbci	r21, 0xFF	; 255
    2970:	04 c0       	rjmp	.+8      	; 0x297a <__pack_f+0xe8>
    2972:	21 5c       	subi	r18, 0xC1	; 193
    2974:	3f 4f       	sbci	r19, 0xFF	; 255
    2976:	4f 4f       	sbci	r20, 0xFF	; 255
    2978:	5f 4f       	sbci	r21, 0xFF	; 255
    297a:	e1 e0       	ldi	r30, 0x01	; 1
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	20 30       	cpi	r18, 0x00	; 0
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	38 07       	cpc	r19, r24
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	48 07       	cpc	r20, r24
    2988:	80 e4       	ldi	r24, 0x40	; 64
    298a:	58 07       	cpc	r21, r24
    298c:	28 f5       	brcc	.+74     	; 0x29d8 <__pack_f+0x146>
    298e:	e0 e0       	ldi	r30, 0x00	; 0
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	22 c0       	rjmp	.+68     	; 0x29d8 <__pack_f+0x146>
    2994:	e0 38       	cpi	r30, 0x80	; 128
    2996:	f1 05       	cpc	r31, r1
    2998:	6c f5       	brge	.+90     	; 0x29f4 <__pack_f+0x162>
    299a:	e1 58       	subi	r30, 0x81	; 129
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	da 01       	movw	r26, r20
    29a0:	c9 01       	movw	r24, r18
    29a2:	8f 77       	andi	r24, 0x7F	; 127
    29a4:	90 70       	andi	r25, 0x00	; 0
    29a6:	a0 70       	andi	r26, 0x00	; 0
    29a8:	b0 70       	andi	r27, 0x00	; 0
    29aa:	80 34       	cpi	r24, 0x40	; 64
    29ac:	91 05       	cpc	r25, r1
    29ae:	a1 05       	cpc	r26, r1
    29b0:	b1 05       	cpc	r27, r1
    29b2:	39 f4       	brne	.+14     	; 0x29c2 <__pack_f+0x130>
    29b4:	27 ff       	sbrs	r18, 7
    29b6:	09 c0       	rjmp	.+18     	; 0x29ca <__pack_f+0x138>
    29b8:	20 5c       	subi	r18, 0xC0	; 192
    29ba:	3f 4f       	sbci	r19, 0xFF	; 255
    29bc:	4f 4f       	sbci	r20, 0xFF	; 255
    29be:	5f 4f       	sbci	r21, 0xFF	; 255
    29c0:	04 c0       	rjmp	.+8      	; 0x29ca <__pack_f+0x138>
    29c2:	21 5c       	subi	r18, 0xC1	; 193
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	4f 4f       	sbci	r20, 0xFF	; 255
    29c8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ca:	57 ff       	sbrs	r21, 7
    29cc:	05 c0       	rjmp	.+10     	; 0x29d8 <__pack_f+0x146>
    29ce:	56 95       	lsr	r21
    29d0:	47 95       	ror	r20
    29d2:	37 95       	ror	r19
    29d4:	27 95       	ror	r18
    29d6:	31 96       	adiw	r30, 0x01	; 1
    29d8:	87 e0       	ldi	r24, 0x07	; 7
    29da:	56 95       	lsr	r21
    29dc:	47 95       	ror	r20
    29de:	37 95       	ror	r19
    29e0:	27 95       	ror	r18
    29e2:	8a 95       	dec	r24
    29e4:	d1 f7       	brne	.-12     	; 0x29da <__pack_f+0x148>
    29e6:	0b c0       	rjmp	.+22     	; 0x29fe <__pack_f+0x16c>
    29e8:	e0 e0       	ldi	r30, 0x00	; 0
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	05 c0       	rjmp	.+10     	; 0x29f8 <__pack_f+0x166>
    29ee:	e0 e0       	ldi	r30, 0x00	; 0
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	05 c0       	rjmp	.+10     	; 0x29fe <__pack_f+0x16c>
    29f4:	ef ef       	ldi	r30, 0xFF	; 255
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	a9 01       	movw	r20, r18
    29fe:	8e 2f       	mov	r24, r30
    2a00:	87 95       	ror	r24
    2a02:	88 27       	eor	r24, r24
    2a04:	87 95       	ror	r24
    2a06:	94 2f       	mov	r25, r20
    2a08:	9f 77       	andi	r25, 0x7F	; 127
    2a0a:	67 95       	ror	r22
    2a0c:	66 27       	eor	r22, r22
    2a0e:	67 95       	ror	r22
    2a10:	e6 95       	lsr	r30
    2a12:	e2 2e       	mov	r14, r18
    2a14:	a9 2f       	mov	r26, r25
    2a16:	a8 2b       	or	r26, r24
    2a18:	fe 2f       	mov	r31, r30
    2a1a:	f6 2b       	or	r31, r22
    2a1c:	62 2f       	mov	r22, r18
    2a1e:	73 2f       	mov	r23, r19
    2a20:	8a 2f       	mov	r24, r26
    2a22:	9f 2f       	mov	r25, r31
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	e6 e0       	ldi	r30, 0x06	; 6
    2a2a:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x18>

00002a2e <__unpack_f>:
    2a2e:	dc 01       	movw	r26, r24
    2a30:	fb 01       	movw	r30, r22
    2a32:	2c 91       	ld	r18, X
    2a34:	11 96       	adiw	r26, 0x01	; 1
    2a36:	3c 91       	ld	r19, X
    2a38:	11 97       	sbiw	r26, 0x01	; 1
    2a3a:	12 96       	adiw	r26, 0x02	; 2
    2a3c:	8c 91       	ld	r24, X
    2a3e:	12 97       	sbiw	r26, 0x02	; 2
    2a40:	48 2f       	mov	r20, r24
    2a42:	4f 77       	andi	r20, 0x7F	; 127
    2a44:	50 e0       	ldi	r21, 0x00	; 0
    2a46:	98 2f       	mov	r25, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	99 27       	eor	r25, r25
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	13 96       	adiw	r26, 0x03	; 3
    2a50:	6c 91       	ld	r22, X
    2a52:	13 97       	sbiw	r26, 0x03	; 3
    2a54:	86 2f       	mov	r24, r22
    2a56:	88 0f       	add	r24, r24
    2a58:	89 2b       	or	r24, r25
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	66 1f       	adc	r22, r22
    2a5e:	66 27       	eor	r22, r22
    2a60:	66 1f       	adc	r22, r22
    2a62:	61 83       	std	Z+1, r22	; 0x01
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	39 f5       	brne	.+78     	; 0x2ab6 <__unpack_f+0x88>
    2a68:	21 15       	cp	r18, r1
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	41 05       	cpc	r20, r1
    2a6e:	51 05       	cpc	r21, r1
    2a70:	11 f4       	brne	.+4      	; 0x2a76 <__unpack_f+0x48>
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	29 c0       	rjmp	.+82     	; 0x2ac8 <__unpack_f+0x9a>
    2a76:	82 e8       	ldi	r24, 0x82	; 130
    2a78:	9f ef       	ldi	r25, 0xFF	; 255
    2a7a:	93 83       	std	Z+3, r25	; 0x03
    2a7c:	82 83       	std	Z+2, r24	; 0x02
    2a7e:	67 e0       	ldi	r22, 0x07	; 7
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	44 1f       	adc	r20, r20
    2a86:	55 1f       	adc	r21, r21
    2a88:	6a 95       	dec	r22
    2a8a:	d1 f7       	brne	.-12     	; 0x2a80 <__unpack_f+0x52>
    2a8c:	83 e0       	ldi	r24, 0x03	; 3
    2a8e:	80 83       	st	Z, r24
    2a90:	09 c0       	rjmp	.+18     	; 0x2aa4 <__unpack_f+0x76>
    2a92:	22 0f       	add	r18, r18
    2a94:	33 1f       	adc	r19, r19
    2a96:	44 1f       	adc	r20, r20
    2a98:	55 1f       	adc	r21, r21
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	93 83       	std	Z+3, r25	; 0x03
    2aa2:	82 83       	std	Z+2, r24	; 0x02
    2aa4:	20 30       	cpi	r18, 0x00	; 0
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	38 07       	cpc	r19, r24
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	48 07       	cpc	r20, r24
    2aae:	80 e4       	ldi	r24, 0x40	; 64
    2ab0:	58 07       	cpc	r21, r24
    2ab2:	78 f3       	brcs	.-34     	; 0x2a92 <__unpack_f+0x64>
    2ab4:	20 c0       	rjmp	.+64     	; 0x2af6 <__unpack_f+0xc8>
    2ab6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab8:	91 05       	cpc	r25, r1
    2aba:	79 f4       	brne	.+30     	; 0x2ada <__unpack_f+0xac>
    2abc:	21 15       	cp	r18, r1
    2abe:	31 05       	cpc	r19, r1
    2ac0:	41 05       	cpc	r20, r1
    2ac2:	51 05       	cpc	r21, r1
    2ac4:	19 f4       	brne	.+6      	; 0x2acc <__unpack_f+0x9e>
    2ac6:	84 e0       	ldi	r24, 0x04	; 4
    2ac8:	80 83       	st	Z, r24
    2aca:	08 95       	ret
    2acc:	44 ff       	sbrs	r20, 4
    2ace:	03 c0       	rjmp	.+6      	; 0x2ad6 <__unpack_f+0xa8>
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	80 83       	st	Z, r24
    2ad4:	10 c0       	rjmp	.+32     	; 0x2af6 <__unpack_f+0xc8>
    2ad6:	10 82       	st	Z, r1
    2ad8:	0e c0       	rjmp	.+28     	; 0x2af6 <__unpack_f+0xc8>
    2ada:	8f 57       	subi	r24, 0x7F	; 127
    2adc:	90 40       	sbci	r25, 0x00	; 0
    2ade:	93 83       	std	Z+3, r25	; 0x03
    2ae0:	82 83       	std	Z+2, r24	; 0x02
    2ae2:	83 e0       	ldi	r24, 0x03	; 3
    2ae4:	80 83       	st	Z, r24
    2ae6:	87 e0       	ldi	r24, 0x07	; 7
    2ae8:	22 0f       	add	r18, r18
    2aea:	33 1f       	adc	r19, r19
    2aec:	44 1f       	adc	r20, r20
    2aee:	55 1f       	adc	r21, r21
    2af0:	8a 95       	dec	r24
    2af2:	d1 f7       	brne	.-12     	; 0x2ae8 <__unpack_f+0xba>
    2af4:	50 64       	ori	r21, 0x40	; 64
    2af6:	24 83       	std	Z+4, r18	; 0x04
    2af8:	35 83       	std	Z+5, r19	; 0x05
    2afa:	46 83       	std	Z+6, r20	; 0x06
    2afc:	57 83       	std	Z+7, r21	; 0x07
    2afe:	08 95       	ret

00002b00 <__fpcmp_parts_f>:
    2b00:	fc 01       	movw	r30, r24
    2b02:	db 01       	movw	r26, r22
    2b04:	90 81       	ld	r25, Z
    2b06:	92 30       	cpi	r25, 0x02	; 2
    2b08:	08 f4       	brcc	.+2      	; 0x2b0c <__fpcmp_parts_f+0xc>
    2b0a:	49 c0       	rjmp	.+146    	; 0x2b9e <__fpcmp_parts_f+0x9e>
    2b0c:	8c 91       	ld	r24, X
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	08 f4       	brcc	.+2      	; 0x2b14 <__fpcmp_parts_f+0x14>
    2b12:	45 c0       	rjmp	.+138    	; 0x2b9e <__fpcmp_parts_f+0x9e>
    2b14:	94 30       	cpi	r25, 0x04	; 4
    2b16:	51 f4       	brne	.+20     	; 0x2b2c <__fpcmp_parts_f+0x2c>
    2b18:	61 81       	ldd	r22, Z+1	; 0x01
    2b1a:	84 30       	cpi	r24, 0x04	; 4
    2b1c:	b1 f5       	brne	.+108    	; 0x2b8a <__fpcmp_parts_f+0x8a>
    2b1e:	11 96       	adiw	r26, 0x01	; 1
    2b20:	2c 91       	ld	r18, X
    2b22:	11 97       	sbiw	r26, 0x01	; 1
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	26 1b       	sub	r18, r22
    2b28:	31 09       	sbc	r19, r1
    2b2a:	41 c0       	rjmp	.+130    	; 0x2bae <__fpcmp_parts_f+0xae>
    2b2c:	84 30       	cpi	r24, 0x04	; 4
    2b2e:	21 f0       	breq	.+8      	; 0x2b38 <__fpcmp_parts_f+0x38>
    2b30:	92 30       	cpi	r25, 0x02	; 2
    2b32:	41 f4       	brne	.+16     	; 0x2b44 <__fpcmp_parts_f+0x44>
    2b34:	82 30       	cpi	r24, 0x02	; 2
    2b36:	b1 f1       	breq	.+108    	; 0x2ba4 <__fpcmp_parts_f+0xa4>
    2b38:	11 96       	adiw	r26, 0x01	; 1
    2b3a:	8c 91       	ld	r24, X
    2b3c:	11 97       	sbiw	r26, 0x01	; 1
    2b3e:	88 23       	and	r24, r24
    2b40:	a1 f1       	breq	.+104    	; 0x2baa <__fpcmp_parts_f+0xaa>
    2b42:	2d c0       	rjmp	.+90     	; 0x2b9e <__fpcmp_parts_f+0x9e>
    2b44:	61 81       	ldd	r22, Z+1	; 0x01
    2b46:	82 30       	cpi	r24, 0x02	; 2
    2b48:	01 f1       	breq	.+64     	; 0x2b8a <__fpcmp_parts_f+0x8a>
    2b4a:	11 96       	adiw	r26, 0x01	; 1
    2b4c:	8c 91       	ld	r24, X
    2b4e:	11 97       	sbiw	r26, 0x01	; 1
    2b50:	68 17       	cp	r22, r24
    2b52:	d9 f4       	brne	.+54     	; 0x2b8a <__fpcmp_parts_f+0x8a>
    2b54:	22 81       	ldd	r18, Z+2	; 0x02
    2b56:	33 81       	ldd	r19, Z+3	; 0x03
    2b58:	12 96       	adiw	r26, 0x02	; 2
    2b5a:	8d 91       	ld	r24, X+
    2b5c:	9c 91       	ld	r25, X
    2b5e:	13 97       	sbiw	r26, 0x03	; 3
    2b60:	82 17       	cp	r24, r18
    2b62:	93 07       	cpc	r25, r19
    2b64:	94 f0       	brlt	.+36     	; 0x2b8a <__fpcmp_parts_f+0x8a>
    2b66:	28 17       	cp	r18, r24
    2b68:	39 07       	cpc	r19, r25
    2b6a:	bc f0       	brlt	.+46     	; 0x2b9a <__fpcmp_parts_f+0x9a>
    2b6c:	24 81       	ldd	r18, Z+4	; 0x04
    2b6e:	35 81       	ldd	r19, Z+5	; 0x05
    2b70:	46 81       	ldd	r20, Z+6	; 0x06
    2b72:	57 81       	ldd	r21, Z+7	; 0x07
    2b74:	14 96       	adiw	r26, 0x04	; 4
    2b76:	8d 91       	ld	r24, X+
    2b78:	9d 91       	ld	r25, X+
    2b7a:	0d 90       	ld	r0, X+
    2b7c:	bc 91       	ld	r27, X
    2b7e:	a0 2d       	mov	r26, r0
    2b80:	82 17       	cp	r24, r18
    2b82:	93 07       	cpc	r25, r19
    2b84:	a4 07       	cpc	r26, r20
    2b86:	b5 07       	cpc	r27, r21
    2b88:	18 f4       	brcc	.+6      	; 0x2b90 <__fpcmp_parts_f+0x90>
    2b8a:	66 23       	and	r22, r22
    2b8c:	41 f0       	breq	.+16     	; 0x2b9e <__fpcmp_parts_f+0x9e>
    2b8e:	0d c0       	rjmp	.+26     	; 0x2baa <__fpcmp_parts_f+0xaa>
    2b90:	28 17       	cp	r18, r24
    2b92:	39 07       	cpc	r19, r25
    2b94:	4a 07       	cpc	r20, r26
    2b96:	5b 07       	cpc	r21, r27
    2b98:	28 f4       	brcc	.+10     	; 0x2ba4 <__fpcmp_parts_f+0xa4>
    2b9a:	66 23       	and	r22, r22
    2b9c:	31 f0       	breq	.+12     	; 0x2baa <__fpcmp_parts_f+0xaa>
    2b9e:	21 e0       	ldi	r18, 0x01	; 1
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	05 c0       	rjmp	.+10     	; 0x2bae <__fpcmp_parts_f+0xae>
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <__fpcmp_parts_f+0xae>
    2baa:	2f ef       	ldi	r18, 0xFF	; 255
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	c9 01       	movw	r24, r18
    2bb0:	08 95       	ret

00002bb2 <__udivmodqi4>:
    2bb2:	99 1b       	sub	r25, r25
    2bb4:	79 e0       	ldi	r23, 0x09	; 9
    2bb6:	04 c0       	rjmp	.+8      	; 0x2bc0 <__udivmodqi4_ep>

00002bb8 <__udivmodqi4_loop>:
    2bb8:	99 1f       	adc	r25, r25
    2bba:	96 17       	cp	r25, r22
    2bbc:	08 f0       	brcs	.+2      	; 0x2bc0 <__udivmodqi4_ep>
    2bbe:	96 1b       	sub	r25, r22

00002bc0 <__udivmodqi4_ep>:
    2bc0:	88 1f       	adc	r24, r24
    2bc2:	7a 95       	dec	r23
    2bc4:	c9 f7       	brne	.-14     	; 0x2bb8 <__udivmodqi4_loop>
    2bc6:	80 95       	com	r24
    2bc8:	08 95       	ret

00002bca <__udivmodhi4>:
    2bca:	aa 1b       	sub	r26, r26
    2bcc:	bb 1b       	sub	r27, r27
    2bce:	51 e1       	ldi	r21, 0x11	; 17
    2bd0:	07 c0       	rjmp	.+14     	; 0x2be0 <__udivmodhi4_ep>

00002bd2 <__udivmodhi4_loop>:
    2bd2:	aa 1f       	adc	r26, r26
    2bd4:	bb 1f       	adc	r27, r27
    2bd6:	a6 17       	cp	r26, r22
    2bd8:	b7 07       	cpc	r27, r23
    2bda:	10 f0       	brcs	.+4      	; 0x2be0 <__udivmodhi4_ep>
    2bdc:	a6 1b       	sub	r26, r22
    2bde:	b7 0b       	sbc	r27, r23

00002be0 <__udivmodhi4_ep>:
    2be0:	88 1f       	adc	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	5a 95       	dec	r21
    2be6:	a9 f7       	brne	.-22     	; 0x2bd2 <__udivmodhi4_loop>
    2be8:	80 95       	com	r24
    2bea:	90 95       	com	r25
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	08 95       	ret

00002bf2 <__prologue_saves__>:
    2bf2:	2f 92       	push	r2
    2bf4:	3f 92       	push	r3
    2bf6:	4f 92       	push	r4
    2bf8:	5f 92       	push	r5
    2bfa:	6f 92       	push	r6
    2bfc:	7f 92       	push	r7
    2bfe:	8f 92       	push	r8
    2c00:	9f 92       	push	r9
    2c02:	af 92       	push	r10
    2c04:	bf 92       	push	r11
    2c06:	cf 92       	push	r12
    2c08:	df 92       	push	r13
    2c0a:	ef 92       	push	r14
    2c0c:	ff 92       	push	r15
    2c0e:	0f 93       	push	r16
    2c10:	1f 93       	push	r17
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	ca 1b       	sub	r28, r26
    2c1c:	db 0b       	sbc	r29, r27
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	09 94       	ijmp

00002c2a <__epilogue_restores__>:
    2c2a:	2a 88       	ldd	r2, Y+18	; 0x12
    2c2c:	39 88       	ldd	r3, Y+17	; 0x11
    2c2e:	48 88       	ldd	r4, Y+16	; 0x10
    2c30:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c32:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c34:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c36:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c38:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c3c:	b9 84       	ldd	r11, Y+9	; 0x09
    2c3e:	c8 84       	ldd	r12, Y+8	; 0x08
    2c40:	df 80       	ldd	r13, Y+7	; 0x07
    2c42:	ee 80       	ldd	r14, Y+6	; 0x06
    2c44:	fd 80       	ldd	r15, Y+5	; 0x05
    2c46:	0c 81       	ldd	r16, Y+4	; 0x04
    2c48:	1b 81       	ldd	r17, Y+3	; 0x03
    2c4a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c4c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c4e:	ce 0f       	add	r28, r30
    2c50:	d1 1d       	adc	r29, r1
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	ed 01       	movw	r28, r26
    2c5e:	08 95       	ret

00002c60 <_exit>:
    2c60:	f8 94       	cli

00002c62 <__stop_program>:
    2c62:	ff cf       	rjmp	.-2      	; 0x2c62 <__stop_program>
