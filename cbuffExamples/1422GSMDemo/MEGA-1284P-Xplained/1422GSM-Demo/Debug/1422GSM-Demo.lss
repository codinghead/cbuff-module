
1422GSM-Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002cc  00800100  00002c2c  00002ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c2c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028b  008003cc  008003cc  00002fac  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000006cc  00000000  00000000  00002fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000085  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001a0  00000000  00000000  00003701  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006cb  00000000  00000000  000038a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002f68  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001163  00000000  00000000  00006ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000288b  00000000  00000000  00008037  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000440  00000000  00000000  0000a8c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d8f  00000000  00000000  0000ad04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000b31  00000000  00000000  0000ba93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000686  00000000  00000000  0000c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  0000cc4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_13>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_28>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_30>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	12 0a       	sbc	r1, r18
      8e:	2b 0a       	sbc	r2, r27
      90:	40 0a       	sbc	r4, r16
      92:	55 0a       	sbc	r5, r21
      94:	6a 0a       	sbc	r6, r26
      96:	7f 0a       	sbc	r7, r31
      98:	94 0a       	sbc	r9, r20
      9a:	a9 0a       	sbc	r10, r25
      9c:	be 0a       	sbc	r11, r30
      9e:	d3 0a       	sbc	r13, r19
      a0:	1a 0b       	sbc	r17, r26
      a2:	2f 0b       	sbc	r18, r31
      a4:	44 0b       	sbc	r20, r20
      a6:	68 0b       	sbc	r22, r24
      a8:	7d 0b       	sbc	r23, r29
      aa:	d3 0b       	sbc	r29, r19
      ac:	e8 0b       	sbc	r30, r24
      ae:	fd 0b       	sbc	r31, r29
      b0:	12 0c       	add	r1, r2
      b2:	67 0c       	add	r6, r7
      b4:	7c 0c       	add	r7, r12
      b6:	91 0c       	add	r9, r1
      b8:	cb 0c       	add	r12, r11
      ba:	e0 0c       	add	r14, r0
      bc:	2c 0d       	add	r18, r12
      be:	41 0d       	add	r20, r1
      c0:	56 0d       	add	r21, r6
      c2:	6b 0d       	add	r22, r11
      c4:	80 0d       	add	r24, r0
      c6:	95 0d       	add	r25, r5
      c8:	aa 0d       	add	r26, r10
      ca:	bf 0d       	add	r27, r15
      cc:	d4 0d       	add	r29, r4
      ce:	f1 0d       	add	r31, r1
      d0:	06 0e       	add	r0, r22
      d2:	1b 0e       	add	r1, r27
      d4:	38 0e       	add	r3, r24
      d6:	4d 0e       	add	r4, r29

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	13 e0       	ldi	r17, 0x03	; 3
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	ec e2       	ldi	r30, 0x2C	; 44
      ec:	fc e2       	ldi	r31, 0x2C	; 44
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ac 3c       	cpi	r26, 0xCC	; 204
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	16 e0       	ldi	r17, 0x06	; 6
     100:	ac ec       	ldi	r26, 0xCC	; 204
     102:	b3 e0       	ldi	r27, 0x03	; 3
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a7 35       	cpi	r26, 0x57	; 87
     10a:	b1 07       	cpc	r27, r17
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 ca 06 	call	0xd94	; 0xd94 <main>
     112:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <cbuffInit>:
* \note
* -# Must be called before using any functions in the CBUFF module
*
*******************************************************************************/
void cbuffInit(void)
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
                                        /* Initialise the linked list pointer */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     122:	10 92 cd 03 	sts	0x03CD, r1
     126:	10 92 cc 03 	sts	0x03CC, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     12a:	10 92 cf 03 	sts	0x03CF, r1
     12e:	10 92 ce 03 	sts	0x03CE, r1
}
     132:	cf 91       	pop	r28
     134:	df 91       	pop	r29
     136:	08 95       	ret

00000138 <cbuffDeinit>:
* - The content of any buffers will remain in memory after this function is
*   called. If you have any data there that you don't want other to see, ensure
*   that you clear the buffer's contents before deinitialising this module.
*******************************************************************************/
void cbuffDeinit(void)
{
     138:	df 93       	push	r29
     13a:	cf 93       	push	r28
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
                                        /* Clear the linked list pointer      */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     140:	10 92 cd 03 	sts	0x03CD, r1
     144:	10 92 cc 03 	sts	0x03CC, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     148:	10 92 cf 03 	sts	0x03CF, r1
     14c:	10 92 ce 03 	sts	0x03CE, r1
}
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <cbuffCreate>:
*    greater to be useful. This will, however, not be checked by this function.
*******************************************************************************/
CBUFFNUM   cbuffCreate(CBUFF        * buffer,
                       unsigned int   sizeOfBuffer,
                       CBUFFOBJ     * newCircBufferObj)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	2a 97       	sbiw	r28, 0x0a	; 10
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	9e 83       	std	Y+6, r25	; 0x06
     16c:	8d 83       	std	Y+5, r24	; 0x05
     16e:	78 87       	std	Y+8, r23	; 0x08
     170:	6f 83       	std	Y+7, r22	; 0x07
     172:	5a 87       	std	Y+10, r21	; 0x0a
     174:	49 87       	std	Y+9, r20	; 0x09
    CBUFFOBJ * localCircBufferObj;
    CBUFFNUM circBuffNum = 0x0001;      /* Assign starting buffer number, 1,  */
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9a 83       	std	Y+2, r25	; 0x02
     17c:	89 83       	std	Y+1, r24	; 0x01
                                        /* next free buffer number            */
                                        /* 0 reserved for alloc failed!       */

                                        /* Ensure there is a buffer and it    */
                                        /* has size                           */
    if ((buffer != (unsigned char *) 0) && (sizeOfBuffer != 0))
     17e:	8d 81       	ldd	r24, Y+5	; 0x05
     180:	9e 81       	ldd	r25, Y+6	; 0x06
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	09 f4       	brne	.+2      	; 0x188 <cbuffCreate+0x32>
     186:	11 c1       	rjmp	.+546    	; 0x3aa <cbuffCreate+0x254>
     188:	8f 81       	ldd	r24, Y+7	; 0x07
     18a:	98 85       	ldd	r25, Y+8	; 0x08
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	09 f4       	brne	.+2      	; 0x192 <cbuffCreate+0x3c>
     190:	0c c1       	rjmp	.+536    	; 0x3aa <cbuffCreate+0x254>
    {
                                        /* Ensure we got somewhere to create  */
                                        /* our buffer object                  */
        if (newCircBufferObj != (CBUFFOBJ *) 0)
     192:	89 85       	ldd	r24, Y+9	; 0x09
     194:	9a 85       	ldd	r25, Y+10	; 0x0a
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	09 f4       	brne	.+2      	; 0x19c <cbuffCreate+0x46>
     19a:	07 c1       	rjmp	.+526    	; 0x3aa <cbuffCreate+0x254>
                                        /* Find place for buffer object in    */
                                        /* the linked list and assign number  */
                                        /* If there is nothing in the list,   */
                                        /* just put this object in the first  */
                                        /* position                           */
            if (activeCbuffObjs == 0 && startOfCbuffObjs == (CBUFFOBJ *) 0)
     19c:	80 91 ce 03 	lds	r24, 0x03CE
     1a0:	90 91 cf 03 	lds	r25, 0x03CF
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	09 f0       	breq	.+2      	; 0x1aa <cbuffCreate+0x54>
     1a8:	6e c0       	rjmp	.+220    	; 0x286 <cbuffCreate+0x130>
     1aa:	80 91 cc 03 	lds	r24, 0x03CC
     1ae:	90 91 cd 03 	lds	r25, 0x03CD
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <cbuffCreate+0x62>
     1b6:	67 c0       	rjmp	.+206    	; 0x286 <cbuffCreate+0x130>
            {
                                        /* Insert buffer object at start of   */
                                        /* list                               */
                startOfCbuffObjs = newCircBufferObj;
     1b8:	89 85       	ldd	r24, Y+9	; 0x09
     1ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     1bc:	90 93 cd 03 	sts	0x03CD, r25
     1c0:	80 93 cc 03 	sts	0x03CC, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     1c4:	80 91 cc 03 	lds	r24, 0x03CC
     1c8:	90 91 cd 03 	lds	r25, 0x03CD
     1cc:	2d 81       	ldd	r18, Y+5	; 0x05
     1ce:	3e 81       	ldd	r19, Y+6	; 0x06
     1d0:	fc 01       	movw	r30, r24
     1d2:	31 83       	std	Z+1, r19	; 0x01
     1d4:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     1d6:	80 91 cc 03 	lds	r24, 0x03CC
     1da:	90 91 cd 03 	lds	r25, 0x03CD
     1de:	2f 81       	ldd	r18, Y+7	; 0x07
     1e0:	38 85       	ldd	r19, Y+8	; 0x08
     1e2:	21 50       	subi	r18, 0x01	; 1
     1e4:	30 40       	sbci	r19, 0x00	; 0
     1e6:	4d 81       	ldd	r20, Y+5	; 0x05
     1e8:	5e 81       	ldd	r21, Y+6	; 0x06
     1ea:	24 0f       	add	r18, r20
     1ec:	35 1f       	adc	r19, r21
     1ee:	fc 01       	movw	r30, r24
     1f0:	33 83       	std	Z+3, r19	; 0x03
     1f2:	22 83       	std	Z+2, r18	; 0x02
                                              (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     1f4:	80 91 cc 03 	lds	r24, 0x03CC
     1f8:	90 91 cd 03 	lds	r25, 0x03CD
     1fc:	2d 81       	ldd	r18, Y+5	; 0x05
     1fe:	3e 81       	ldd	r19, Y+6	; 0x06
     200:	fc 01       	movw	r30, r24
     202:	35 83       	std	Z+5, r19	; 0x05
     204:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     206:	80 91 cc 03 	lds	r24, 0x03CC
     20a:	90 91 cd 03 	lds	r25, 0x03CD
     20e:	2d 81       	ldd	r18, Y+5	; 0x05
     210:	3e 81       	ldd	r19, Y+6	; 0x06
     212:	fc 01       	movw	r30, r24
     214:	37 83       	std	Z+7, r19	; 0x07
     216:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     218:	80 91 cc 03 	lds	r24, 0x03CC
     21c:	90 91 cd 03 	lds	r25, 0x03CD
     220:	fc 01       	movw	r30, r24
     222:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     224:	80 91 cc 03 	lds	r24, 0x03CC
     228:	90 91 cd 03 	lds	r25, 0x03CD
     22c:	20 91 cc 03 	lds	r18, 0x03CC
     230:	30 91 cd 03 	lds	r19, 0x03CD
     234:	f9 01       	movw	r30, r18
     236:	22 85       	ldd	r18, Z+10	; 0x0a
     238:	20 64       	ori	r18, 0x40	; 64
     23a:	fc 01       	movw	r30, r24
     23c:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to NULL            */
                startOfCbuffObjs->nextCircBufferObj = (CBUFFOBJ *) 0;
     23e:	80 91 cc 03 	lds	r24, 0x03CC
     242:	90 91 cd 03 	lds	r25, 0x03CD
     246:	fc 01       	movw	r30, r24
     248:	14 86       	std	Z+12, r1	; 0x0c
     24a:	13 86       	std	Z+11, r1	; 0x0b
                                        /* Assign it a number                 */
                activeCbuffObjs |= circBuffNum;
     24c:	20 91 ce 03 	lds	r18, 0x03CE
     250:	30 91 cf 03 	lds	r19, 0x03CF
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	82 2b       	or	r24, r18
     25a:	93 2b       	or	r25, r19
     25c:	90 93 cf 03 	sts	0x03CF, r25
     260:	80 93 ce 03 	sts	0x03CE, r24
                startOfCbuffObjs->bufferNumber = circBuffNum;
     264:	80 91 cc 03 	lds	r24, 0x03CC
     268:	90 91 cd 03 	lds	r25, 0x03CD
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	3a 81       	ldd	r19, Y+2	; 0x02
     270:	fc 01       	movw	r30, r24
     272:	31 87       	std	Z+9, r19	; 0x09
     274:	20 87       	std	Z+8, r18	; 0x08
                                        /* Return buffer number               */
                return startOfCbuffObjs->bufferNumber;
     276:	80 91 cc 03 	lds	r24, 0x03CC
     27a:	90 91 cd 03 	lds	r25, 0x03CD
     27e:	fc 01       	movw	r30, r24
     280:	80 85       	ldd	r24, Z+8	; 0x08
     282:	91 85       	ldd	r25, Z+9	; 0x09
     284:	94 c0       	rjmp	.+296    	; 0x3ae <cbuffCreate+0x258>
            }
                                        /* Otherwise, if we haven't allocated */
                                        /* all the cbuff objects we can       */
                                        /* support, insert another            */
            else if (activeCbuffObjs != 0xFFFF)
     286:	80 91 ce 03 	lds	r24, 0x03CE
     28a:	90 91 cf 03 	lds	r25, 0x03CF
     28e:	ff ef       	ldi	r31, 0xFF	; 255
     290:	8f 3f       	cpi	r24, 0xFF	; 255
     292:	9f 07       	cpc	r25, r31
     294:	09 f4       	brne	.+2      	; 0x298 <cbuffCreate+0x142>
     296:	89 c0       	rjmp	.+274    	; 0x3aa <cbuffCreate+0x254>
            {
                                        /* Insert this object at the start of */
                                        /* the list                           */
                localCircBufferObj = startOfCbuffObjs;
     298:	80 91 cc 03 	lds	r24, 0x03CC
     29c:	90 91 cd 03 	lds	r25, 0x03CD
     2a0:	9c 83       	std	Y+4, r25	; 0x04
     2a2:	8b 83       	std	Y+3, r24	; 0x03
                startOfCbuffObjs = newCircBufferObj;
     2a4:	89 85       	ldd	r24, Y+9	; 0x09
     2a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2a8:	90 93 cd 03 	sts	0x03CD, r25
     2ac:	80 93 cc 03 	sts	0x03CC, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     2b0:	80 91 cc 03 	lds	r24, 0x03CC
     2b4:	90 91 cd 03 	lds	r25, 0x03CD
     2b8:	2d 81       	ldd	r18, Y+5	; 0x05
     2ba:	3e 81       	ldd	r19, Y+6	; 0x06
     2bc:	fc 01       	movw	r30, r24
     2be:	31 83       	std	Z+1, r19	; 0x01
     2c0:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     2c2:	80 91 cc 03 	lds	r24, 0x03CC
     2c6:	90 91 cd 03 	lds	r25, 0x03CD
     2ca:	2f 81       	ldd	r18, Y+7	; 0x07
     2cc:	38 85       	ldd	r19, Y+8	; 0x08
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	4d 81       	ldd	r20, Y+5	; 0x05
     2d4:	5e 81       	ldd	r21, Y+6	; 0x06
     2d6:	24 0f       	add	r18, r20
     2d8:	35 1f       	adc	r19, r21
     2da:	fc 01       	movw	r30, r24
     2dc:	33 83       	std	Z+3, r19	; 0x03
     2de:	22 83       	std	Z+2, r18	; 0x02
                                                  (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     2e0:	80 91 cc 03 	lds	r24, 0x03CC
     2e4:	90 91 cd 03 	lds	r25, 0x03CD
     2e8:	2d 81       	ldd	r18, Y+5	; 0x05
     2ea:	3e 81       	ldd	r19, Y+6	; 0x06
     2ec:	fc 01       	movw	r30, r24
     2ee:	35 83       	std	Z+5, r19	; 0x05
     2f0:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     2f2:	80 91 cc 03 	lds	r24, 0x03CC
     2f6:	90 91 cd 03 	lds	r25, 0x03CD
     2fa:	2d 81       	ldd	r18, Y+5	; 0x05
     2fc:	3e 81       	ldd	r19, Y+6	; 0x06
     2fe:	fc 01       	movw	r30, r24
     300:	37 83       	std	Z+7, r19	; 0x07
     302:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     304:	80 91 cc 03 	lds	r24, 0x03CC
     308:	90 91 cd 03 	lds	r25, 0x03CD
     30c:	fc 01       	movw	r30, r24
     30e:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     310:	80 91 cc 03 	lds	r24, 0x03CC
     314:	90 91 cd 03 	lds	r25, 0x03CD
     318:	20 91 cc 03 	lds	r18, 0x03CC
     31c:	30 91 cd 03 	lds	r19, 0x03CD
     320:	f9 01       	movw	r30, r18
     322:	22 85       	ldd	r18, Z+10	; 0x0a
     324:	20 64       	ori	r18, 0x40	; 64
     326:	fc 01       	movw	r30, r24
     328:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to next buffer     */
                                        /* object                             */
                startOfCbuffObjs->nextCircBufferObj = localCircBufferObj;
     32a:	80 91 cc 03 	lds	r24, 0x03CC
     32e:	90 91 cd 03 	lds	r25, 0x03CD
     332:	2b 81       	ldd	r18, Y+3	; 0x03
     334:	3c 81       	ldd	r19, Y+4	; 0x04
     336:	fc 01       	movw	r30, r24
     338:	34 87       	std	Z+12, r19	; 0x0c
     33a:	23 87       	std	Z+11, r18	; 0x0b
                                        /* Find a free cbuff number for this  */
                                        /* buffer                             */
                                        /* Cbuff Number '1' is assigned, so   */
                                        /* start looking from '2' for a free  */
                                        /* number                             */
                circBuffNum <<= 1;
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	9a 81       	ldd	r25, Y+2	; 0x02
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	89 83       	std	Y+1, r24	; 0x01
                
                do
                {
                    if (!(activeCbuffObjs & circBuffNum))
     348:	20 91 ce 03 	lds	r18, 0x03CE
     34c:	30 91 cf 03 	lds	r19, 0x03CF
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	82 23       	and	r24, r18
     356:	93 23       	and	r25, r19
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	e9 f4       	brne	.+58     	; 0x396 <cbuffCreate+0x240>
                    {
                                        /* Assign the buffer number           */
                        activeCbuffObjs |= circBuffNum;
     35c:	20 91 ce 03 	lds	r18, 0x03CE
     360:	30 91 cf 03 	lds	r19, 0x03CF
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	82 2b       	or	r24, r18
     36a:	93 2b       	or	r25, r19
     36c:	90 93 cf 03 	sts	0x03CF, r25
     370:	80 93 ce 03 	sts	0x03CE, r24
                        startOfCbuffObjs->bufferNumber = circBuffNum;
     374:	80 91 cc 03 	lds	r24, 0x03CC
     378:	90 91 cd 03 	lds	r25, 0x03CD
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	3a 81       	ldd	r19, Y+2	; 0x02
     380:	fc 01       	movw	r30, r24
     382:	31 87       	std	Z+9, r19	; 0x09
     384:	20 87       	std	Z+8, r18	; 0x08
                        return startOfCbuffObjs->bufferNumber;
     386:	80 91 cc 03 	lds	r24, 0x03CC
     38a:	90 91 cd 03 	lds	r25, 0x03CD
     38e:	fc 01       	movw	r30, r24
     390:	80 85       	ldd	r24, Z+8	; 0x08
     392:	91 85       	ldd	r25, Z+9	; 0x09
     394:	0c c0       	rjmp	.+24     	; 0x3ae <cbuffCreate+0x258>
                    }
                                        /* That wasn't free; try next bit     */
                    circBuffNum <<= 1;
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
                                        /* Mask just in case unsigned int is  */
                                        /* bigger than 16-bits                */
                    circBuffNum &= 0xFFFF;
                } while(circBuffNum != 0x0000);
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	9a 81       	ldd	r25, Y+2	; 0x02
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	79 f6       	brne	.-98     	; 0x348 <cbuffCreate+0x1f2>
            }
        }
	}
                                        /* If buffer allocation failed,       */
                                        /* return 0 to callee                 */
    return 0;
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
}
     3ae:	2a 96       	adiw	r28, 0x0a	; 10
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	cf 91       	pop	r28
     3bc:	df 91       	pop	r29
     3be:	08 95       	ret

000003c0 <cbuffDestroy>:
* -# Destroying a buffer object does not delete the buffer's content, nor free
*   the associated CBUFFOBJ memory used
* -# An open buffer cannot be destroyed. Such a case returns a FAIL
*******************************************************************************/
unsigned char cbuffDestroy(CBUFFNUM bufferNumber)
{
     3c0:	df 93       	push	r29
     3c2:	cf 93       	push	r28
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <cbuffDestroy+0x6>
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <cbuffDestroy+0x8>
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <cbuffDestroy+0xa>
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	9e 83       	std	Y+6, r25	; 0x06
     3d0:	8d 83       	std	Y+5, r24	; 0x05
    CBUFFOBJ * localCircBufferObj;
    CBUFFOBJ * previousCircBufferObj;
                                        /* Make sure there is something to    */
                                        /* remove                             */
    if (startOfCbuffObjs != (CBUFFOBJ *) 0)
     3d2:	80 91 cc 03 	lds	r24, 0x03CC
     3d6:	90 91 cd 03 	lds	r25, 0x03CD
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <cbuffDestroy+0x20>
     3de:	75 c0       	rjmp	.+234    	; 0x4ca <cbuffDestroy+0x10a>
    {
                                        /* Check if first object is the one   */
                                        /* we are looking for                 */
        if (startOfCbuffObjs->bufferNumber == bufferNumber)
     3e0:	80 91 cc 03 	lds	r24, 0x03CC
     3e4:	90 91 cd 03 	lds	r25, 0x03CD
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 85       	ldd	r18, Z+8	; 0x08
     3ec:	31 85       	ldd	r19, Z+9	; 0x09
     3ee:	8d 81       	ldd	r24, Y+5	; 0x05
     3f0:	9e 81       	ldd	r25, Y+6	; 0x06
     3f2:	28 17       	cp	r18, r24
     3f4:	39 07       	cpc	r19, r25
     3f6:	e1 f4       	brne	.+56     	; 0x430 <cbuffDestroy+0x70>
        {
                                        /* Copy where this object is pointing */
                                        /* to into startOfCbuffObjs           */
            startOfCbuffObjs = startOfCbuffObjs->nextCircBufferObj;
     3f8:	80 91 cc 03 	lds	r24, 0x03CC
     3fc:	90 91 cd 03 	lds	r25, 0x03CD
     400:	fc 01       	movw	r30, r24
     402:	83 85       	ldd	r24, Z+11	; 0x0b
     404:	94 85       	ldd	r25, Z+12	; 0x0c
     406:	90 93 cd 03 	sts	0x03CD, r25
     40a:	80 93 cc 03 	sts	0x03CC, r24
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
            activeCbuffObjs &= ~bufferNumber;
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	9e 81       	ldd	r25, Y+6	; 0x06
     412:	9c 01       	movw	r18, r24
     414:	20 95       	com	r18
     416:	30 95       	com	r19
     418:	80 91 ce 03 	lds	r24, 0x03CE
     41c:	90 91 cf 03 	lds	r25, 0x03CF
     420:	82 23       	and	r24, r18
     422:	93 23       	and	r25, r19
     424:	90 93 cf 03 	sts	0x03CF, r25
     428:	80 93 ce 03 	sts	0x03CE, r24
                                        /* Destroyed the desired object       */
            return CBUFF_DESTROY_OK;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	4e c0       	rjmp	.+156    	; 0x4cc <cbuffDestroy+0x10c>
        }
                                        /* Otherwise loop through all objects */
                                        /* if there are some                  */
        else if (startOfCbuffObjs->nextCircBufferObj != (CBUFFOBJ *) 0)
     430:	80 91 cc 03 	lds	r24, 0x03CC
     434:	90 91 cd 03 	lds	r25, 0x03CD
     438:	fc 01       	movw	r30, r24
     43a:	83 85       	ldd	r24, Z+11	; 0x0b
     43c:	94 85       	ldd	r25, Z+12	; 0x0c
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	09 f4       	brne	.+2      	; 0x444 <cbuffDestroy+0x84>
     442:	43 c0       	rjmp	.+134    	; 0x4ca <cbuffDestroy+0x10a>
        {
                                        /* Keep a copy of previous object     */
                                        /* pointer                            */
            previousCircBufferObj = startOfCbuffObjs;
     444:	80 91 cc 03 	lds	r24, 0x03CC
     448:	90 91 cd 03 	lds	r25, 0x03CD
     44c:	9c 83       	std	Y+4, r25	; 0x04
     44e:	8b 83       	std	Y+3, r24	; 0x03
                                        /* Get next object in the list        */
            localCircBufferObj = startOfCbuffObjs->nextCircBufferObj;
     450:	80 91 cc 03 	lds	r24, 0x03CC
     454:	90 91 cd 03 	lds	r25, 0x03CD
     458:	fc 01       	movw	r30, r24
     45a:	83 85       	ldd	r24, Z+11	; 0x0b
     45c:	94 85       	ldd	r25, Z+12	; 0x0c
     45e:	9a 83       	std	Y+2, r25	; 0x02
     460:	89 83       	std	Y+1, r24	; 0x01
                                        /* Loop through each item and check   */
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	fc 01       	movw	r30, r24
     468:	20 85       	ldd	r18, Z+8	; 0x08
     46a:	31 85       	ldd	r19, Z+9	; 0x09
     46c:	8d 81       	ldd	r24, Y+5	; 0x05
     46e:	9e 81       	ldd	r25, Y+6	; 0x06
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	d9 f4       	brne	.+54     	; 0x4ac <cbuffDestroy+0xec>
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
                                          localCircBufferObj->nextCircBufferObj;
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	23 85       	ldd	r18, Z+11	; 0x0b
     47e:	34 85       	ldd	r19, Z+12	; 0x0c
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
     480:	8b 81       	ldd	r24, Y+3	; 0x03
     482:	9c 81       	ldd	r25, Y+4	; 0x04
     484:	fc 01       	movw	r30, r24
     486:	34 87       	std	Z+12, r19	; 0x0c
     488:	23 87       	std	Z+11, r18	; 0x0b
                                          localCircBufferObj->nextCircBufferObj;
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
                    activeCbuffObjs &= ~bufferNumber;
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	9c 01       	movw	r18, r24
     490:	20 95       	com	r18
     492:	30 95       	com	r19
     494:	80 91 ce 03 	lds	r24, 0x03CE
     498:	90 91 cf 03 	lds	r25, 0x03CF
     49c:	82 23       	and	r24, r18
     49e:	93 23       	and	r25, r19
     4a0:	90 93 cf 03 	sts	0x03CF, r25
     4a4:	80 93 ce 03 	sts	0x03CE, r24
                                        /* Destroyed the desired object       */
                    return CBUFF_DESTROY_OK;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	10 c0       	rjmp	.+32     	; 0x4cc <cbuffDestroy+0x10c>
                }
                else
                {
                                        /* That wasn't it                     */
                                        /* Move to next object in the list    */
                    previousCircBufferObj = localCircBufferObj;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	9c 83       	std	Y+4, r25	; 0x04
     4b2:	8b 83       	std	Y+3, r24	; 0x03
                    localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	fc 01       	movw	r30, r24
     4ba:	83 85       	ldd	r24, Z+11	; 0x0b
     4bc:	94 85       	ldd	r25, Z+12	; 0x0c
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
                }
            } while (localCircBufferObj != (CBUFFOBJ *) 0);
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	61 f6       	brne	.-104    	; 0x462 <cbuffDestroy+0xa2>
        }
        
    }
                                        /* Couldn't find the desired object   */
    return CBUFF_DESTROY_FAIL;
     4ca:	80 e0       	ldi	r24, 0x00	; 0
}
     4cc:	26 96       	adiw	r28, 0x06	; 6
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	cf 91       	pop	r28
     4da:	df 91       	pop	r29
     4dc:	08 95       	ret

000004de <cbuffOpen>:
* \note
* -# Caller must have created (cbuffCreate()) at least one circular buffer
*    object before calling this function
*******************************************************************************/
HCBUFF cbuffOpen(CBUFFNUM bufferNumber)
{
     4de:	df 93       	push	r29
     4e0:	cf 93       	push	r28
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <cbuffOpen+0x6>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <cbuffOpen+0x8>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	9c 83       	std	Y+4, r25	; 0x04
     4ec:	8b 83       	std	Y+3, r24	; 0x03
	CBUFFOBJ * localCircBufferObj;

                                        /* Check that a CBUFFNUM object    */
                                        /* exists with bufferNumber           */
    localCircBufferObj = startOfCbuffObjs;
     4ee:	80 91 cc 03 	lds	r24, 0x03CC
     4f2:	90 91 cd 03 	lds	r25, 0x03CD
     4f6:	9a 83       	std	Y+2, r25	; 0x02
     4f8:	89 83       	std	Y+1, r24	; 0x01

    do
    {
	    if (localCircBufferObj->bufferNumber == bufferNumber)
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	fc 01       	movw	r30, r24
     500:	20 85       	ldd	r18, Z+8	; 0x08
     502:	31 85       	ldd	r19, Z+9	; 0x09
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	28 17       	cp	r18, r24
     50a:	39 07       	cpc	r19, r25
     50c:	d1 f4       	brne	.+52     	; 0x542 <cbuffOpen+0x64>
	    {
    	                                /* Check buffer is not already open   */
            if (!(localCircBufferObj->localFlag & CBUFF_OPEN))
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	82 85       	ldd	r24, Z+10	; 0x0a
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	80 72       	andi	r24, 0x20	; 32
     51c:	90 70       	andi	r25, 0x00	; 0
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	69 f4       	brne	.+26     	; 0x53c <cbuffOpen+0x5e>
            {
                                        /* Note that it is now in use         */
                localCircBufferObj->localFlag |= CBUFF_OPEN;
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	fc 01       	movw	r30, r24
     528:	82 85       	ldd	r24, Z+10	; 0x0a
     52a:	28 2f       	mov	r18, r24
     52c:	20 62       	ori	r18, 0x20	; 32
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	fc 01       	movw	r30, r24
     534:	22 87       	std	Z+10, r18	; 0x0a
    	                                /* Return handle to it                */
    	        return localCircBufferObj;
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	10 c0       	rjmp	.+32     	; 0x55c <cbuffOpen+0x7e>
    	    }
    	                                /* If buffer is already open, return  */
    	                                /* NULL handle pointer                */
    	    else
    	    {
        	    return (CBUFFOBJ *) 0;
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0d c0       	rjmp	.+26     	; 0x55c <cbuffOpen+0x7e>
        	}
    	}
    	else
    	{
        	localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	fc 01       	movw	r30, r24
     548:	83 85       	ldd	r24, Z+11	; 0x0b
     54a:	94 85       	ldd	r25, Z+12	; 0x0c
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
        }
	} while (localCircBufferObj != (CBUFFOBJ *) 0);
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	89 f6       	brne	.-94     	; 0x4fa <cbuffOpen+0x1c>

    	                                /* Return handle to NULL otherwise    */
    return (CBUFFOBJ *) 0;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <cbuffClose>:
* \note
* -# Caller must have 'allocated' and opened at least one circular buffer object
*    before calling this function
*******************************************************************************/
CBUFFNUM cbuffClose(HCBUFF hCircBuffer)
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <cbuffClose+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	9a 83       	std	Y+2, r25	; 0x02
     576:	89 83       	std	Y+1, r24	; 0x01
    	                                /* Check buffer is actually open      */
    if (hCircBuffer->localFlag & CBUFF_OPEN)
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	fc 01       	movw	r30, r24
     57e:	82 85       	ldd	r24, Z+10	; 0x0a
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	80 72       	andi	r24, 0x20	; 32
     586:	90 70       	andi	r25, 0x00	; 0
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	81 f0       	breq	.+32     	; 0x5ac <cbuffClose+0x42>
    {
    	                                /* Note that this buffer object is    */
    	                                /* closed                             */
        hCircBuffer->localFlag &= ~CBUFF_OPEN;
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	fc 01       	movw	r30, r24
     592:	82 85       	ldd	r24, Z+10	; 0x0a
     594:	28 2f       	mov	r18, r24
     596:	2f 7d       	andi	r18, 0xDF	; 223
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	fc 01       	movw	r30, r24
     59e:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Return buffer object's buffer      */
                                        /* number                             */
        return hCircBuffer->bufferNumber;
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 85       	ldd	r24, Z+8	; 0x08
     5a8:	91 85       	ldd	r25, Z+9	; 0x09
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <cbuffClose+0x46>
    }
                                        /* Otherwise return 0 to say that     */
                                        /* buffer object wasn't open          */
    else
    {
        return (CBUFFNUM) 0;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	08 95       	ret

000005ba <cbuffPutByte>:
* -# cbuffOpen() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned char cbuffPutByte(HCBUFF hCircBuffer,
                           CBUFF  data)
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <cbuffPutByte+0x6>
     5c0:	0f 92       	push	r0
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
     5ca:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	fc 01       	movw	r30, r24
     5d2:	82 85       	ldd	r24, Z+10	; 0x0a
     5d4:	88 23       	and	r24, r24
     5d6:	14 f4       	brge	.+4      	; 0x5dc <cbuffPutByte+0x22>
    {
        return CBUFF_PUT_FAIL;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	4e c0       	rjmp	.+156    	; 0x678 <cbuffPutByte+0xbe>
    }

    *hCircBuffer->inPointer = data;     /* Put data in buffer                 */
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	fc 01       	movw	r30, r24
     5e2:	84 81       	ldd	r24, Z+4	; 0x04
     5e4:	95 81       	ldd	r25, Z+5	; 0x05
     5e6:	2b 81       	ldd	r18, Y+3	; 0x03
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18

    hCircBuffer->inPointer++;           /* Increment pointer                  */
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	9a 81       	ldd	r25, Y+2	; 0x02
     5f0:	fc 01       	movw	r30, r24
     5f2:	84 81       	ldd	r24, Z+4	; 0x04
     5f4:	95 81       	ldd	r25, Z+5	; 0x05
     5f6:	9c 01       	movw	r18, r24
     5f8:	2f 5f       	subi	r18, 0xFF	; 255
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	fc 01       	movw	r30, r24
     602:	35 83       	std	Z+5, r19	; 0x05
     604:	24 83       	std	Z+4, r18	; 0x04

                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	9a 81       	ldd	r25, Y+2	; 0x02
     60a:	fc 01       	movw	r30, r24
     60c:	82 85       	ldd	r24, Z+10	; 0x0a
     60e:	28 2f       	mov	r18, r24
     610:	2f 7b       	andi	r18, 0xBF	; 191
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	fc 01       	movw	r30, r24
     618:	22 87       	std	Z+10, r18	; 0x0a

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
    if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	fc 01       	movw	r30, r24
     620:	24 81       	ldd	r18, Z+4	; 0x04
     622:	35 81       	ldd	r19, Z+5	; 0x05
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	9a 81       	ldd	r25, Y+2	; 0x02
     628:	fc 01       	movw	r30, r24
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	93 81       	ldd	r25, Z+3	; 0x03
     62e:	82 17       	cp	r24, r18
     630:	93 07       	cpc	r25, r19
     632:	50 f4       	brcc	.+20     	; 0x648 <cbuffPutByte+0x8e>
    {
        hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	fc 01       	movw	r30, r24
     63a:	20 81       	ld	r18, Z
     63c:	31 81       	ldd	r19, Z+1	; 0x01
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	fc 01       	movw	r30, r24
     644:	35 83       	std	Z+5, r19	; 0x05
     646:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	fc 01       	movw	r30, r24
     64e:	24 81       	ldd	r18, Z+4	; 0x04
     650:	35 81       	ldd	r19, Z+5	; 0x05
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	9a 81       	ldd	r25, Y+2	; 0x02
     656:	fc 01       	movw	r30, r24
     658:	86 81       	ldd	r24, Z+6	; 0x06
     65a:	97 81       	ldd	r25, Z+7	; 0x07
     65c:	28 17       	cp	r18, r24
     65e:	39 07       	cpc	r19, r25
     660:	51 f4       	brne	.+20     	; 0x676 <cbuffPutByte+0xbc>
    {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
        hCircBuffer->localFlag |= CBUFF_FULL;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	fc 01       	movw	r30, r24
     668:	82 85       	ldd	r24, Z+10	; 0x0a
     66a:	28 2f       	mov	r18, r24
     66c:	20 68       	ori	r18, 0x80	; 128
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	fc 01       	movw	r30, r24
     674:	22 87       	std	Z+10, r18	; 0x0a
    }

    return CBUFF_PUT_OK;
     676:	81 e0       	ldi	r24, 0x01	; 1
}
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <cbuffGetSpace>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetSpace(HCBUFF hCircBuffer)
{
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	00 d0       	rcall	.+0      	; 0x68a <cbuffGetSpace+0x6>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
#endif

                                        /* If CBUFF_FULL is              */
                                        /* set, then there is no space in     */
                                        /* buffer; simply return 0            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	fc 01       	movw	r30, r24
     698:	82 85       	ldd	r24, Z+10	; 0x0a
     69a:	88 23       	and	r24, r24
     69c:	1c f4       	brge	.+6      	; 0x6a4 <cbuffGetSpace+0x20>
    {
        return 0;
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	5a c0       	rjmp	.+180    	; 0x758 <cbuffGetSpace+0xd4>
    }
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	fc 01       	movw	r30, r24
     6aa:	82 85       	ldd	r24, Z+10	; 0x0a
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	80 74       	andi	r24, 0x40	; 64
     6b2:	90 70       	andi	r25, 0x00	; 0
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	89 f0       	breq	.+34     	; 0x6da <cbuffGetSpace+0x56>
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	fc 01       	movw	r30, r24
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	93 81       	ldd	r25, Z+3	; 0x03
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	9c 01       	movw	r18, r24
                                hCircBuffer->startOfBuffer);
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     6d0:	a9 01       	movw	r20, r18
     6d2:	48 1b       	sub	r20, r24
     6d4:	59 0b       	sbc	r21, r25
     6d6:	ca 01       	movw	r24, r20
     6d8:	3f c0       	rjmp	.+126    	; 0x758 <cbuffGetSpace+0xd4>
                                        /* If inPointer is larger than the    */
                                        /* outPointer in physical value, the  */
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	fc 01       	movw	r30, r24
     6e0:	24 81       	ldd	r18, Z+4	; 0x04
     6e2:	35 81       	ldd	r19, Z+5	; 0x05
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	fc 01       	movw	r30, r24
     6ea:	86 81       	ldd	r24, Z+6	; 0x06
     6ec:	97 81       	ldd	r25, Z+7	; 0x07
     6ee:	82 17       	cp	r24, r18
     6f0:	93 07       	cpc	r25, r19
     6f2:	18 f5       	brcc	.+70     	; 0x73a <cbuffGetSpace+0xb6>
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	fc 01       	movw	r30, r24
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     70a:	a9 01       	movw	r20, r18
     70c:	48 1b       	sub	r20, r24
     70e:	59 0b       	sbc	r21, r25
     710:	ca 01       	movw	r24, r20
     712:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
                                 hCircBuffer->outPointer));
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	fc 01       	movw	r30, r24
     71a:	86 81       	ldd	r24, Z+6	; 0x06
     71c:	97 81       	ldd	r25, Z+7	; 0x07
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
     71e:	ac 01       	movw	r20, r24
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	fc 01       	movw	r30, r24
     726:	84 81       	ldd	r24, Z+4	; 0x04
     728:	95 81       	ldd	r25, Z+5	; 0x05
     72a:	ba 01       	movw	r22, r20
     72c:	68 1b       	sub	r22, r24
     72e:	79 0b       	sbc	r23, r25
     730:	cb 01       	movw	r24, r22
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     732:	82 0f       	add	r24, r18
     734:	93 1f       	adc	r25, r19
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	0f c0       	rjmp	.+30     	; 0x758 <cbuffGetSpace+0xd4>
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	fc 01       	movw	r30, r24
     740:	86 81       	ldd	r24, Z+6	; 0x06
     742:	97 81       	ldd	r25, Z+7	; 0x07
     744:	9c 01       	movw	r18, r24
                               hCircBuffer->inPointer);
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	fc 01       	movw	r30, r24
     74c:	84 81       	ldd	r24, Z+4	; 0x04
     74e:	95 81       	ldd	r25, Z+5	; 0x05
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     750:	a9 01       	movw	r20, r18
     752:	48 1b       	sub	r20, r24
     754:	59 0b       	sbc	r21, r25
     756:	ca 01       	movw	r24, r20
#endif
#if 0
        return (localOutPointer - localInPointer);
#endif
    }
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <cbuffGetFill>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	00 d0       	rcall	.+0      	; 0x76c <cbuffGetFill+0xa>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	fc 01       	movw	r30, r24
     77a:	82 81       	ldd	r24, Z+2	; 0x02
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	9c 01       	movw	r18, r24
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	fc 01       	movw	r30, r24
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	a9 01       	movw	r20, r18
     78c:	48 1b       	sub	r20, r24
     78e:	59 0b       	sbc	r21, r25
     790:	ca 01       	movw	r24, r20
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
     792:	8c 01       	movw	r16, r24
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
     79c:	f8 01       	movw	r30, r16
     79e:	e8 1b       	sub	r30, r24
     7a0:	f9 0b       	sbc	r31, r25
     7a2:	cf 01       	movw	r24, r30
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     7a4:	01 96       	adiw	r24, 0x01	; 1
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <cbuffClearBuffer>:
* \todo Consider renaming this function to 'cbuffResetBuffer()' and using this
*       function name for the function to acutally clear all of the data in the
*       buffer.
*******************************************************************************/
void cbuffClearBuffer(HCBUFF hCircBuffer)
{
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <cbuffClearBuffer+0x6>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	89 83       	std	Y+1, r24	; 0x01
                                        /* Reset buffer pointers              */
    hCircBuffer->inPointer  = hCircBuffer->startOfBuffer;
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 81       	ld	r18, Z
     7ca:	31 81       	ldd	r19, Z+1	; 0x01
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	fc 01       	movw	r30, r24
     7d2:	35 83       	std	Z+5, r19	; 0x05
     7d4:	24 83       	std	Z+4, r18	; 0x04
    hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	fc 01       	movw	r30, r24
     7dc:	20 81       	ld	r18, Z
     7de:	31 81       	ldd	r19, Z+1	; 0x01
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	fc 01       	movw	r30, r24
     7e6:	37 83       	std	Z+7, r19	; 0x07
     7e8:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
    hCircBuffer->localFlag  = 0x00;
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
    hCircBuffer->localFlag |= CBUFF_EMPTY;
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	9a 81       	ldd	r25, Y+2	; 0x02
     7f6:	fc 01       	movw	r30, r24
     7f8:	82 85       	ldd	r24, Z+10	; 0x0a
     7fa:	28 2f       	mov	r18, r24
     7fc:	20 64       	ori	r18, 0x40	; 64
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	fc 01       	movw	r30, r24
     804:	22 87       	std	Z+10, r18	; 0x0a
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	cf 91       	pop	r28
     80c:	df 91       	pop	r29
     80e:	08 95       	ret

00000810 <cbuffGetByte>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffGetByte(HCBUFF       hCircBuffer,
                           CBUFF      * data)
{
     810:	df 93       	push	r29
     812:	cf 93       	push	r28
     814:	00 d0       	rcall	.+0      	; 0x816 <cbuffGetByte+0x6>
     816:	00 d0       	rcall	.+0      	; 0x818 <cbuffGetByte+0x8>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	7c 83       	std	Y+4, r23	; 0x04
     822:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	fc 01       	movw	r30, r24
     82a:	82 85       	ldd	r24, Z+10	; 0x0a
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	80 74       	andi	r24, 0x40	; 64
     832:	90 70       	andi	r25, 0x00	; 0
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	11 f0       	breq	.+4      	; 0x83c <cbuffGetByte+0x2c>
    {
        return CBUFF_GET_FAIL;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	51 c0       	rjmp	.+162    	; 0x8de <cbuffGetByte+0xce>
    }
                                        /* Read requested byte                */
    *data = *hCircBuffer->outPointer;
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	fc 01       	movw	r30, r24
     842:	86 81       	ldd	r24, Z+6	; 0x06
     844:	97 81       	ldd	r25, Z+7	; 0x07
     846:	fc 01       	movw	r30, r24
     848:	20 81       	ld	r18, Z
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	fc 01       	movw	r30, r24
     850:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
    hCircBuffer->outPointer++;
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	fc 01       	movw	r30, r24
     858:	86 81       	ldd	r24, Z+6	; 0x06
     85a:	97 81       	ldd	r25, Z+7	; 0x07
     85c:	9c 01       	movw	r18, r24
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	fc 01       	movw	r30, r24
     868:	37 83       	std	Z+7, r19	; 0x07
     86a:	26 83       	std	Z+6, r18	; 0x06

                                        /* Implement wrap around              */
    if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	9a 81       	ldd	r25, Y+2	; 0x02
     870:	fc 01       	movw	r30, r24
     872:	26 81       	ldd	r18, Z+6	; 0x06
     874:	37 81       	ldd	r19, Z+7	; 0x07
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	9a 81       	ldd	r25, Y+2	; 0x02
     87a:	fc 01       	movw	r30, r24
     87c:	82 81       	ldd	r24, Z+2	; 0x02
     87e:	93 81       	ldd	r25, Z+3	; 0x03
     880:	82 17       	cp	r24, r18
     882:	93 07       	cpc	r25, r19
     884:	50 f4       	brcc	.+20     	; 0x89a <cbuffGetByte+0x8a>
    {
        hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	9a 81       	ldd	r25, Y+2	; 0x02
     88a:	fc 01       	movw	r30, r24
     88c:	20 81       	ld	r18, Z
     88e:	31 81       	ldd	r19, Z+1	; 0x01
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	9a 81       	ldd	r25, Y+2	; 0x02
     894:	fc 01       	movw	r30, r24
     896:	37 83       	std	Z+7, r19	; 0x07
     898:	26 83       	std	Z+6, r18	; 0x06
    }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	fc 01       	movw	r30, r24
     8a0:	26 81       	ldd	r18, Z+6	; 0x06
     8a2:	37 81       	ldd	r19, Z+7	; 0x07
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	fc 01       	movw	r30, r24
     8aa:	84 81       	ldd	r24, Z+4	; 0x04
     8ac:	95 81       	ldd	r25, Z+5	; 0x05
     8ae:	28 17       	cp	r18, r24
     8b0:	39 07       	cpc	r19, r25
     8b2:	51 f4       	brne	.+20     	; 0x8c8 <cbuffGetByte+0xb8>
    {
                                        /* Note that the buffer is empty      */
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	fc 01       	movw	r30, r24
     8ba:	82 85       	ldd	r24, Z+10	; 0x0a
     8bc:	28 2f       	mov	r18, r24
     8be:	20 64       	ori	r18, 0x40	; 64
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	9a 81       	ldd	r25, Y+2	; 0x02
     8c4:	fc 01       	movw	r30, r24
     8c6:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	fc 01       	movw	r30, r24
     8ce:	82 85       	ldd	r24, Z+10	; 0x0a
     8d0:	28 2f       	mov	r18, r24
     8d2:	2f 77       	andi	r18, 0x7F	; 127
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	fc 01       	movw	r30, r24
     8da:	22 87       	std	Z+10, r18	; 0x0a

    return CBUFF_GET_OK;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
}
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <cbuffPeekTail>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekTail(HCBUFF   hCircBuffer,
                           CBUFF  * data)
{
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <cbuffPeekTail+0x6>
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <cbuffPeekTail+0x8>
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	89 83       	std	Y+1, r24	; 0x01
     8fc:	7c 83       	std	Y+4, r23	; 0x04
     8fe:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	fc 01       	movw	r30, r24
     906:	82 85       	ldd	r24, Z+10	; 0x0a
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	80 74       	andi	r24, 0x40	; 64
     90e:	90 70       	andi	r25, 0x00	; 0
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	69 f4       	brne	.+26     	; 0x92e <cbuffPeekTail+0x42>
    {
                                        /* Return head value in data          */
        *data = *hCircBuffer->outPointer;
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	fc 01       	movw	r30, r24
     91a:	86 81       	ldd	r24, Z+6	; 0x06
     91c:	97 81       	ldd	r25, Z+7	; 0x07
     91e:	fc 01       	movw	r30, r24
     920:	20 81       	ld	r18, Z
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18
        return CBUFF_GET_OK;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	01 c0       	rjmp	.+2      	; 0x930 <cbuffPeekTail+0x44>
    }
    else
    {
        return CBUFF_GET_FAIL;
     92e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	cf 91       	pop	r28
     93a:	df 91       	pop	r29
     93c:	08 95       	ret

0000093e <cbuffPeekHead>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekHead(HCBUFF   hCircBuffer,
                            CBUFF  * data)
{
     93e:	df 93       	push	r29
     940:	cf 93       	push	r28
     942:	00 d0       	rcall	.+0      	; 0x944 <cbuffPeekHead+0x6>
     944:	00 d0       	rcall	.+0      	; 0x946 <cbuffPeekHead+0x8>
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	7c 83       	std	Y+4, r23	; 0x04
     950:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	fc 01       	movw	r30, r24
     958:	82 85       	ldd	r24, Z+10	; 0x0a
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	80 74       	andi	r24, 0x40	; 64
     960:	90 70       	andi	r25, 0x00	; 0
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	39 f5       	brne	.+78     	; 0x9b4 <cbuffPeekHead+0x76>
    {
                                        /* If inPointer doesn't point to      */
                                        /* startOfBuffer, return value at     */
                                        /* (inPointer - 1)                    */
        if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	fc 01       	movw	r30, r24
     96c:	24 81       	ldd	r18, Z+4	; 0x04
     96e:	35 81       	ldd	r19, Z+5	; 0x05
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	fc 01       	movw	r30, r24
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	28 17       	cp	r18, r24
     97c:	39 07       	cpc	r19, r25
     97e:	69 f0       	breq	.+26     	; 0x99a <cbuffPeekHead+0x5c>
        {
            *data = *(hCircBuffer->inPointer - sizeof(CBUFF));
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	fc 01       	movw	r30, r24
     986:	84 81       	ldd	r24, Z+4	; 0x04
     988:	95 81       	ldd	r25, Z+5	; 0x05
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	fc 01       	movw	r30, r24
     98e:	20 81       	ld	r18, Z
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18
     998:	0b c0       	rjmp	.+22     	; 0x9b0 <cbuffPeekHead+0x72>
        }
                                        /* Otherwise handle buffer wrap       */
                                        /* situation                          */
        else
        {
            *data = *hCircBuffer->endOfBuffer;
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	fc 01       	movw	r30, r24
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	93 81       	ldd	r25, Z+3	; 0x03
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 81       	ld	r18, Z
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
        }
        return CBUFF_GET_OK;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <cbuffPeekHead+0x78>
    }
    else
    {
        return CBUFF_GET_FAIL;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	08 95       	ret

000009c4 <cbuffUnputByte>:
*    buffer is now empty, this function will fail in its attempt
* -# The data itself is not removed; only the head pointer to the buffer is
*    moved back one position
*******************************************************************************/
unsigned char cbuffUnputByte(HCBUFF  hCircBuffer)
{
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <cbuffUnputByte+0x6>
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unput at    */
                                        /* all. If buffer is empty, do        */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	fc 01       	movw	r30, r24
     9d8:	82 85       	ldd	r24, Z+10	; 0x0a
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	80 74       	andi	r24, 0x40	; 64
     9e0:	90 70       	andi	r25, 0x00	; 0
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	11 f0       	breq	.+4      	; 0x9ea <cbuffUnputByte+0x26>
    {
        return 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	47 c0       	rjmp	.+142    	; 0xa78 <cbuffUnputByte+0xb4>
    }
                                        /* unput the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	9a 81       	ldd	r25, Y+2	; 0x02
     9ee:	fc 01       	movw	r30, r24
     9f0:	24 81       	ldd	r18, Z+4	; 0x04
     9f2:	35 81       	ldd	r19, Z+5	; 0x05
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	fc 01       	movw	r30, r24
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	28 17       	cp	r18, r24
     a00:	39 07       	cpc	r19, r25
     a02:	71 f0       	breq	.+28     	; 0xa20 <cbuffUnputByte+0x5c>
    {
        hCircBuffer->inPointer--;
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	fc 01       	movw	r30, r24
     a0a:	84 81       	ldd	r24, Z+4	; 0x04
     a0c:	95 81       	ldd	r25, Z+5	; 0x05
     a0e:	9c 01       	movw	r18, r24
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	30 40       	sbci	r19, 0x00	; 0
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	fc 01       	movw	r30, r24
     a1a:	35 83       	std	Z+5, r19	; 0x05
     a1c:	24 83       	std	Z+4, r18	; 0x04
     a1e:	0a c0       	rjmp	.+20     	; 0xa34 <cbuffUnputByte+0x70>
    }
                                        /* For boundary case implent wrap-    */
                                        /* around                             */
    else
    {
        hCircBuffer->inPointer = hCircBuffer->endOfBuffer;
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	fc 01       	movw	r30, r24
     a26:	22 81       	ldd	r18, Z+2	; 0x02
     a28:	33 81       	ldd	r19, Z+3	; 0x03
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	fc 01       	movw	r30, r24
     a30:	35 83       	std	Z+5, r19	; 0x05
     a32:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check if buffer is now empty       */
    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	fc 01       	movw	r30, r24
     a3a:	24 81       	ldd	r18, Z+4	; 0x04
     a3c:	35 81       	ldd	r19, Z+5	; 0x05
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	fc 01       	movw	r30, r24
     a44:	86 81       	ldd	r24, Z+6	; 0x06
     a46:	97 81       	ldd	r25, Z+7	; 0x07
     a48:	28 17       	cp	r18, r24
     a4a:	39 07       	cpc	r19, r25
     a4c:	51 f4       	brne	.+20     	; 0xa62 <cbuffUnputByte+0x9e>
    {
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	fc 01       	movw	r30, r24
     a54:	82 85       	ldd	r24, Z+10	; 0x0a
     a56:	28 2f       	mov	r18, r24
     a58:	20 64       	ori	r18, 0x40	; 64
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	9a 81       	ldd	r25, Y+2	; 0x02
     a5e:	fc 01       	movw	r30, r24
     a60:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not full  */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	fc 01       	movw	r30, r24
     a68:	82 85       	ldd	r24, Z+10	; 0x0a
     a6a:	28 2f       	mov	r18, r24
     a6c:	2f 77       	andi	r18, 0x7F	; 127
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	fc 01       	movw	r30, r24
     a74:	22 87       	std	Z+10, r18	; 0x0a

    return 0;
     a76:	80 e0       	ldi	r24, 0x00	; 0
}
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	cf 91       	pop	r28
     a7e:	df 91       	pop	r29
     a80:	08 95       	ret

00000a82 <cbuffUngetByte>:
*    values left over after a 'cbuffClearBuffer' will be 'ungot'. The buffer
*    can still be 'ungot' until the tail pointer gets back to the point
*    where it reaches the head pointer.
*******************************************************************************/
unsigned char  cbuffUngetByte(HCBUFF  hCircBuffer)
{
     a82:	df 93       	push	r29
     a84:	cf 93       	push	r28
     a86:	00 d0       	rcall	.+0      	; 0xa88 <cbuffUngetByte+0x6>
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	9a 83       	std	Y+2, r25	; 0x02
     a8e:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unget at    */
                                        /* all. If buffer is full, do         */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	9a 81       	ldd	r25, Y+2	; 0x02
     a94:	fc 01       	movw	r30, r24
     a96:	82 85       	ldd	r24, Z+10	; 0x0a
     a98:	88 23       	and	r24, r24
     a9a:	14 f4       	brge	.+4      	; 0xaa0 <cbuffUngetByte+0x1e>
    {
        return 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	47 c0       	rjmp	.+142    	; 0xb2e <cbuffUngetByte+0xac>
    }
                                        /* unget the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->outPointer != hCircBuffer->startOfBuffer)
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	fc 01       	movw	r30, r24
     aa6:	26 81       	ldd	r18, Z+6	; 0x06
     aa8:	37 81       	ldd	r19, Z+7	; 0x07
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	28 17       	cp	r18, r24
     ab6:	39 07       	cpc	r19, r25
     ab8:	71 f0       	breq	.+28     	; 0xad6 <cbuffUngetByte+0x54>
    {
        hCircBuffer->outPointer--;
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	fc 01       	movw	r30, r24
     ac0:	86 81       	ldd	r24, Z+6	; 0x06
     ac2:	97 81       	ldd	r25, Z+7	; 0x07
     ac4:	9c 01       	movw	r18, r24
     ac6:	21 50       	subi	r18, 0x01	; 1
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	fc 01       	movw	r30, r24
     ad0:	37 83       	std	Z+7, r19	; 0x07
     ad2:	26 83       	std	Z+6, r18	; 0x06
     ad4:	0a c0       	rjmp	.+20     	; 0xaea <cbuffUngetByte+0x68>
    }
                                        /* For boundary case implementnt      */
                                        /* wraparound                         */
    else
    {
        hCircBuffer->outPointer = hCircBuffer->endOfBuffer;
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	fc 01       	movw	r30, r24
     adc:	22 81       	ldd	r18, Z+2	; 0x02
     ade:	33 81       	ldd	r19, Z+3	; 0x03
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	fc 01       	movw	r30, r24
     ae6:	37 83       	std	Z+7, r19	; 0x07
     ae8:	26 83       	std	Z+6, r18	; 0x06
    }
                                        /* Check if buffer is now full        */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	fc 01       	movw	r30, r24
     af0:	26 81       	ldd	r18, Z+6	; 0x06
     af2:	37 81       	ldd	r19, Z+7	; 0x07
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	fc 01       	movw	r30, r24
     afa:	84 81       	ldd	r24, Z+4	; 0x04
     afc:	95 81       	ldd	r25, Z+5	; 0x05
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	51 f4       	brne	.+20     	; 0xb18 <cbuffUngetByte+0x96>
    {
        hCircBuffer->localFlag |= CBUFF_FULL;
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	fc 01       	movw	r30, r24
     b0a:	82 85       	ldd	r24, Z+10	; 0x0a
     b0c:	28 2f       	mov	r18, r24
     b0e:	20 68       	ori	r18, 0x80	; 128
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	fc 01       	movw	r30, r24
     b16:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not empty */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	fc 01       	movw	r30, r24
     b1e:	82 85       	ldd	r24, Z+10	; 0x0a
     b20:	28 2f       	mov	r18, r24
     b22:	2f 7b       	andi	r18, 0xBF	; 191
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	fc 01       	movw	r30, r24
     b2a:	22 87       	std	Z+10, r18	; 0x0a
    return 0;
     b2c:	80 e0       	ldi	r24, 0x00	; 0
}
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	cf 91       	pop	r28
     b34:	df 91       	pop	r29
     b36:	08 95       	ret

00000b38 <cbuffPutArray>:
* -# This function will not allow the buffer to overflow
*******************************************************************************/
unsigned int  cbuffPutArray(HCBUFF               hCircBuffer,
                            const CBUFF        * data,
                            unsigned int         noOfBytes)
{
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	28 97       	sbiw	r28, 0x08	; 8
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	8b 83       	std	Y+3, r24	; 0x03
     b50:	7e 83       	std	Y+6, r23	; 0x06
     b52:	6d 83       	std	Y+5, r22	; 0x05
     b54:	58 87       	std	Y+8, r21	; 0x08
     b56:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesWritten = 0;
     b58:	1a 82       	std	Y+2, r1	; 0x02
     b5a:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	9c 81       	ldd	r25, Y+4	; 0x04
     b60:	fc 01       	movw	r30, r24
     b62:	82 85       	ldd	r24, Z+10	; 0x0a
     b64:	88 23       	and	r24, r24
     b66:	0c f0       	brlt	.+2      	; 0xb6a <cbuffPutArray+0x32>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <cbuffPutArray+0xe8>
    {
        return bytesWritten;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	6e c0       	rjmp	.+220    	; 0xc4c <cbuffPutArray+0x114>


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
    {
                                        /* Put data in buffer                 */
        *hCircBuffer->inPointer = *data;
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	fc 01       	movw	r30, r24
     b76:	84 81       	ldd	r24, Z+4	; 0x04
     b78:	95 81       	ldd	r25, Z+5	; 0x05
     b7a:	2d 81       	ldd	r18, Y+5	; 0x05
     b7c:	3e 81       	ldd	r19, Y+6	; 0x06
     b7e:	f9 01       	movw	r30, r18
     b80:	20 81       	ld	r18, Z
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18

        hCircBuffer->inPointer++;       /* Increment pointer to circular      */
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	fc 01       	movw	r30, r24
     b8c:	84 81       	ldd	r24, Z+4	; 0x04
     b8e:	95 81       	ldd	r25, Z+5	; 0x05
     b90:	9c 01       	movw	r18, r24
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	fc 01       	movw	r30, r24
     b9c:	35 83       	std	Z+5, r19	; 0x05
     b9e:	24 83       	std	Z+4, r18	; 0x04
                                        /* buffer                             */

        data++;                         /* Increment pointer to array data    */
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	9e 81       	ldd	r25, Y+6	; 0x06
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	9e 83       	std	Y+6, r25	; 0x06
     ba8:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
        if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	fc 01       	movw	r30, r24
     bb0:	24 81       	ldd	r18, Z+4	; 0x04
     bb2:	35 81       	ldd	r19, Z+5	; 0x05
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	fc 01       	movw	r30, r24
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	82 17       	cp	r24, r18
     bc0:	93 07       	cpc	r25, r19
     bc2:	50 f4       	brcc	.+20     	; 0xbd8 <cbuffPutArray+0xa0>
        {
            hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	fc 01       	movw	r30, r24
     bca:	20 81       	ld	r18, Z
     bcc:	31 81       	ldd	r19, Z+1	; 0x01
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	fc 01       	movw	r30, r24
     bd4:	35 83       	std	Z+5, r19	; 0x05
     bd6:	24 83       	std	Z+4, r18	; 0x04
        }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

        if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	fc 01       	movw	r30, r24
     bde:	24 81       	ldd	r18, Z+4	; 0x04
     be0:	35 81       	ldd	r19, Z+5	; 0x05
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	fc 01       	movw	r30, r24
     be8:	86 81       	ldd	r24, Z+6	; 0x06
     bea:	97 81       	ldd	r25, Z+7	; 0x07
     bec:	28 17       	cp	r18, r24
     bee:	39 07       	cpc	r19, r25
     bf0:	51 f4       	brne	.+20     	; 0xc06 <cbuffPutArray+0xce>
        {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
            hCircBuffer->localFlag |= CBUFF_FULL;
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	fc 01       	movw	r30, r24
     bf8:	82 85       	ldd	r24, Z+10	; 0x0a
     bfa:	28 2f       	mov	r18, r24
     bfc:	20 68       	ori	r18, 0x80	; 128
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	fc 01       	movw	r30, r24
     c04:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how much data we've written   */
        bytesWritten++;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
     c10:	29 81       	ldd	r18, Y+1	; 0x01
     c12:	3a 81       	ldd	r19, Y+2	; 0x02
     c14:	8f 81       	ldd	r24, Y+7	; 0x07
     c16:	98 85       	ldd	r25, Y+8	; 0x08
     c18:	28 17       	cp	r18, r24
     c1a:	39 07       	cpc	r19, r25
     c1c:	51 f0       	breq	.+20     	; 0xc32 <cbuffPutArray+0xfa>
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <cbuffPutArray+0xea>
    {
        return bytesWritten;
    }


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
     c20:	00 00       	nop
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	fc 01       	movw	r30, r24
     c28:	82 85       	ldd	r24, Z+10	; 0x0a
     c2a:	88 23       	and	r24, r24
     c2c:	0c f0       	brlt	.+2      	; 0xc30 <cbuffPutArray+0xf8>
     c2e:	a0 cf       	rjmp	.-192    	; 0xb70 <cbuffPutArray+0x38>
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <cbuffPutArray+0xfc>
        bytesWritten++;
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
        {
            break;
     c32:	00 00       	nop
        }
    }
                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	fc 01       	movw	r30, r24
     c3a:	82 85       	ldd	r24, Z+10	; 0x0a
     c3c:	28 2f       	mov	r18, r24
     c3e:	2f 7b       	andi	r18, 0xBF	; 191
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	fc 01       	movw	r30, r24
     c46:	22 87       	std	Z+10, r18	; 0x0a

    return bytesWritten;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c4c:	28 96       	adiw	r28, 0x08	; 8
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <cbuffGetArray>:
*    enough to accomodate noOfBytes of data
*******************************************************************************/
unsigned int  cbuffGetArray(HCBUFF               hCircBuffer,
                            CBUFF              * data,
                            unsigned int         noOfBytes)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	28 97       	sbiw	r28, 0x08	; 8
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	9c 83       	std	Y+4, r25	; 0x04
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	7e 83       	std	Y+6, r23	; 0x06
     c78:	6d 83       	std	Y+5, r22	; 0x05
     c7a:	58 87       	std	Y+8, r21	; 0x08
     c7c:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesRead = 0;
     c7e:	1a 82       	std	Y+2, r1	; 0x02
     c80:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	fc 01       	movw	r30, r24
     c88:	82 85       	ldd	r24, Z+10	; 0x0a
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	80 74       	andi	r24, 0x40	; 64
     c90:	90 70       	andi	r25, 0x00	; 0
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	09 f4       	brne	.+2      	; 0xc98 <cbuffGetArray+0x3a>
     c96:	5b c0       	rjmp	.+182    	; 0xd4e <cbuffGetArray+0xf0>
    {
        return bytesRead;
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	72 c0       	rjmp	.+228    	; 0xd82 <cbuffGetArray+0x124>
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
    {
                                        /* Read requested byte                */
        *data = *hCircBuffer->outPointer;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	fc 01       	movw	r30, r24
     ca4:	86 81       	ldd	r24, Z+6	; 0x06
     ca6:	97 81       	ldd	r25, Z+7	; 0x07
     ca8:	fc 01       	movw	r30, r24
     caa:	20 81       	ld	r18, Z
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	9e 81       	ldd	r25, Y+6	; 0x06
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
        hCircBuffer->outPointer++;
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	fc 01       	movw	r30, r24
     cba:	86 81       	ldd	r24, Z+6	; 0x06
     cbc:	97 81       	ldd	r25, Z+7	; 0x07
     cbe:	9c 01       	movw	r18, r24
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	fc 01       	movw	r30, r24
     cca:	37 83       	std	Z+7, r19	; 0x07
     ccc:	26 83       	std	Z+6, r18	; 0x06
                                        /* Increment array data pointer       */
        data++;
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement wrap around              */
        if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	fc 01       	movw	r30, r24
     cde:	26 81       	ldd	r18, Z+6	; 0x06
     ce0:	37 81       	ldd	r19, Z+7	; 0x07
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	fc 01       	movw	r30, r24
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	82 17       	cp	r24, r18
     cee:	93 07       	cpc	r25, r19
     cf0:	50 f4       	brcc	.+20     	; 0xd06 <cbuffGetArray+0xa8>
        {
            hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	fc 01       	movw	r30, r24
     d02:	37 83       	std	Z+7, r19	; 0x07
     d04:	26 83       	std	Z+6, r18	; 0x06
        }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
        if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	fc 01       	movw	r30, r24
     d0c:	26 81       	ldd	r18, Z+6	; 0x06
     d0e:	37 81       	ldd	r19, Z+7	; 0x07
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	fc 01       	movw	r30, r24
     d16:	84 81       	ldd	r24, Z+4	; 0x04
     d18:	95 81       	ldd	r25, Z+5	; 0x05
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	51 f4       	brne	.+20     	; 0xd34 <cbuffGetArray+0xd6>
        {
                                        /* Note that the buffer is empty      */
            hCircBuffer->localFlag |= CBUFF_EMPTY;
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	fc 01       	movw	r30, r24
     d26:	82 85       	ldd	r24, Z+10	; 0x0a
     d28:	28 2f       	mov	r18, r24
     d2a:	20 64       	ori	r18, 0x40	; 64
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	fc 01       	movw	r30, r24
     d32:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how many bytes we've read     */
        bytesRead++;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
     d3e:	29 81       	ldd	r18, Y+1	; 0x01
     d40:	3a 81       	ldd	r19, Y+2	; 0x02
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	98 85       	ldd	r25, Y+8	; 0x08
     d46:	28 17       	cp	r18, r24
     d48:	39 07       	cpc	r19, r25
     d4a:	71 f0       	breq	.+28     	; 0xd68 <cbuffGetArray+0x10a>
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <cbuffGetArray+0xf2>
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
        return bytesRead;
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
     d4e:	00 00       	nop
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	fc 01       	movw	r30, r24
     d56:	82 85       	ldd	r24, Z+10	; 0x0a
     d58:	88 2f       	mov	r24, r24
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	80 74       	andi	r24, 0x40	; 64
     d5e:	90 70       	andi	r25, 0x00	; 0
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	09 f4       	brne	.+2      	; 0xd66 <cbuffGetArray+0x108>
     d64:	9c cf       	rjmp	.-200    	; 0xc9e <cbuffGetArray+0x40>
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <cbuffGetArray+0x10c>

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
        {
            break;
     d68:	00 00       	nop
        }
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	fc 01       	movw	r30, r24
     d70:	82 85       	ldd	r24, Z+10	; 0x0a
     d72:	28 2f       	mov	r18, r24
     d74:	2f 77       	andi	r18, 0x7F	; 127
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	fc 01       	movw	r30, r24
     d7c:	22 87       	std	Z+10, r18	; 0x0a

    return bytesRead;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d82:	28 96       	adiw	r28, 0x08	; 8
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <main>:
*
* Notes : 
*
*******************************************************************************/
int main(void)
{
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <main+0xa>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <main+0xc>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <main+0xe>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
    CBUFFNUM    testBufferNum;
    CBUFFNUM    uartOutBufferNum;
    volatile unsigned int x = 0;
     da6:	1e 82       	std	Y+6, r1	; 0x06
     da8:	1d 82       	std	Y+5, r1	; 0x05
                                        /* Initialise all used hardware and   */
                                        /* related interrupts                 */
    initLEDs();
     daa:	0e 94 69 07 	call	0xed2	; 0xed2 <initLEDs>
    initUart2();
     dae:	0e 94 79 07 	call	0xef2	; 0xef2 <initUart2>
    initTimer2();
     db2:	0e 94 d6 07 	call	0xfac	; 0xfac <initTimer2>
    initInterrupts();
     db6:	0e 94 34 08 	call	0x1068	; 0x1068 <initInterrupts>
    termInit();
     dba:	0e 94 a9 09 	call	0x1352	; 0x1352 <termInit>
    
                                        /* Create circular buffers            */
    cbuffInit();
     dbe:	0e 94 8d 00 	call	0x11a	; 0x11a <cbuffInit>
    testBufferNum = cbuffCreate(testBuffer, TESTBUFFERSIZE, 
     dc2:	80 ed       	ldi	r24, 0xD0	; 208
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	26 ef       	ldi	r18, 0xF6	; 246
     dc8:	35 e0       	ldi	r19, 0x05	; 5
     dca:	62 e3       	ldi	r22, 0x32	; 50
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	0e 94 ab 00 	call	0x156	; 0x156 <cbuffCreate>
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
                                    &testBufferObj);
    uartOutBufferNum = cbuffCreate(uartOutBuffer, UARTOUTBUFFERSIZE, 
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	94 e0       	ldi	r25, 0x04	; 4
     ddc:	23 e0       	ldi	r18, 0x03	; 3
     dde:	36 e0       	ldi	r19, 0x06	; 6
     de0:	64 ef       	ldi	r22, 0xF4	; 244
     de2:	71 e0       	ldi	r23, 0x01	; 1
     de4:	a9 01       	movw	r20, r18
     de6:	0e 94 ab 00 	call	0x156	; 0x156 <cbuffCreate>
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03
                                    &uartOutBufferObj);

                                        /* Check buffers were created         */
    if (testBufferNum == 0 || uartOutBufferNum == 0)
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	21 f0       	breq	.+8      	; 0xdfe <main+0x6a>
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	11 f4       	brne	.+4      	; 0xe02 <main+0x6e>
    {
        error();
     dfe:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <error>
    }    

                                        /* Get handles to buffers             */    
    hTestBuffer = cbuffOpen(testBufferNum);
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	0e 94 6f 02 	call	0x4de	; 0x4de <cbuffOpen>
     e0a:	90 93 11 06 	sts	0x0611, r25
     e0e:	80 93 10 06 	sts	0x0610, r24
    hUartOutBuffer = cbuffOpen(uartOutBufferNum);
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	0e 94 6f 02 	call	0x4de	; 0x4de <cbuffOpen>
     e1a:	90 93 13 06 	sts	0x0613, r25
     e1e:	80 93 12 06 	sts	0x0612, r24
                                        /* Check buffers were opened          */
    if (hTestBuffer == (HCBUFF) 0 || hUartOutBuffer == (HCBUFF) 0)
     e22:	80 91 10 06 	lds	r24, 0x0610
     e26:	90 91 11 06 	lds	r25, 0x0611
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	31 f0       	breq	.+12     	; 0xe3a <main+0xa6>
     e2e:	80 91 12 06 	lds	r24, 0x0612
     e32:	90 91 13 06 	lds	r25, 0x0613
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	11 f4       	brne	.+4      	; 0xe3e <main+0xaa>
    {
        error();
     e3a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <error>
    }    
                                        /* Start Timer based data generation  */
    startTimer2();                                       
     e3e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <startTimer2>
                                        /* Output statistics                  */
    while(1)
    {
        triggerUART2(hUartOutBuffer);
     e42:	80 91 12 06 	lds	r24, 0x0612
     e46:	90 91 13 06 	lds	r25, 0x0613
     e4a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <triggerUART2>
        
        updateStats(hTestBuffer);
     e4e:	80 91 10 06 	lds	r24, 0x0610
     e52:	90 91 11 06 	lds	r25, 0x0611
     e56:	0e 94 4a 08 	call	0x1094	; 0x1094 <updateStats>
        
        //termOutput(hUartOutBuffer);

        if(termIsAutomatic())
     e5a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <termIsAutomatic>
     e5e:	88 23       	and	r24, r24
     e60:	a9 f0       	breq	.+42     	; 0xe8c <main+0xf8>
        {
            if(cbuffGetSpace(hTestBuffer) <= termGetEmptyTrigger())
     e62:	80 91 10 06 	lds	r24, 0x0610
     e66:	90 91 11 06 	lds	r25, 0x0611
     e6a:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
     e6e:	8c 01       	movw	r16, r24
     e70:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <termGetEmptyTrigger>
     e74:	80 17       	cp	r24, r16
     e76:	91 07       	cpc	r25, r17
     e78:	b8 f0       	brcs	.+46     	; 0xea8 <main+0x114>
            {
                termCheckBuffer(hTestBuffer);
     e7a:	80 91 10 06 	lds	r24, 0x0610
     e7e:	90 91 11 06 	lds	r25, 0x0611
     e82:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <termCheckBuffer>
                termFullScreenUpdate();
     e86:	0e 94 02 10 	call	0x2004	; 0x2004 <termFullScreenUpdate>
     e8a:	0e c0       	rjmp	.+28     	; 0xea8 <main+0x114>
            }
        }    
        else if(emptyBuffer == 1)
     e8c:	80 91 14 06 	lds	r24, 0x0614
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	51 f4       	brne	.+20     	; 0xea8 <main+0x114>
        {
            emptyBuffer = 0; 
     e94:	10 92 14 06 	sts	0x0614, r1
            termCheckBuffer(hTestBuffer);
     e98:	80 91 10 06 	lds	r24, 0x0610
     e9c:	90 91 11 06 	lds	r25, 0x0611
     ea0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <termCheckBuffer>
            termFullScreenUpdate();
     ea4:	0e 94 02 10 	call	0x2004	; 0x2004 <termFullScreenUpdate>
        }    
        
		termOutput(hUartOutBuffer);
     ea8:	80 91 12 06 	lds	r24, 0x0612
     eac:	90 91 13 06 	lds	r25, 0x0613
     eb0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <termOutput>
		
        if (x >= 0x0FFF)
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	2f e0       	ldi	r18, 0x0F	; 15
     eba:	8f 3f       	cpi	r24, 0xFF	; 255
     ebc:	92 07       	cpc	r25, r18
     ebe:	18 f0       	brcs	.+6      	; 0xec6 <main+0x132>
        {
            //termOutput(hUartOutBuffer);
            x = 0;
     ec0:	1e 82       	std	Y+6, r1	; 0x06
     ec2:	1d 82       	std	Y+5, r1	; 0x05
        }
        else
        {
            x++;
        }    
    }    
     ec4:	be cf       	rjmp	.-132    	; 0xe42 <main+0xae>
            //termOutput(hUartOutBuffer);
            x = 0;
        }
        else
        {
            x++;
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
        }    
    }    
     ed0:	b8 cf       	rjmp	.-144    	; 0xe42 <main+0xae>

00000ed2 <initLEDs>:
}

void initLEDs(void)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0x07;
     eda:	84 e2       	ldi	r24, 0x24	; 36
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	27 e0       	ldi	r18, 0x07	; 7
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 83       	st	Z, r18
    PORTB = 0x00;
     ee4:	85 e2       	ldi	r24, 0x25	; 37
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	fc 01       	movw	r30, r24
     eea:	10 82       	st	Z, r1
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <initUart2>:

void initUart2(void)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
                                        /* Make sure I/O clock to USART1 is enabled */
	PRR0 &= ~(1 << PRUSART1);
     efa:	84 e6       	ldi	r24, 0x64	; 100
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	24 e6       	ldi	r18, 0x64	; 100
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	2f 7e       	andi	r18, 0xEF	; 239
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
	
	/* Set baud rate to 57.6k for 11.0592MHz crystal */
	UBRR1H = 0;
     f0c:	8d ec       	ldi	r24, 0xCD	; 205
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	10 82       	st	Z, r1
	UBRR1L = 11;
     f14:	8c ec       	ldi	r24, 0xCC	; 204
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	2b e0       	ldi	r18, 0x0B	; 11
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
	
	/* Set up functionality */	
	UCSR1A = 0x00;          /* Standard values */
     f1e:	88 ec       	ldi	r24, 0xC8	; 200
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	fc 01       	movw	r30, r24
     f24:	10 82       	st	Z, r1
	UCSR1B = 0x00;          /* Keep all interrupts and TX/RX off */
     f26:	89 ec       	ldi	r24, 0xC9	; 201
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	fc 01       	movw	r30, r24
     f2c:	10 82       	st	Z, r1
	                        /* Async mode, parity off, 1 stop-bit, 8-bit */
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10) | (0 << UCPOL1);
     f2e:	8a ec       	ldi	r24, 0xCA	; 202
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	26 e0       	ldi	r18, 0x06	; 6
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18
}
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <triggerUART2>:
*
* Notes : 
*
*******************************************************************************/
void triggerUART2(HCBUFF hCbuff)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <triggerUART2+0x6>
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	9b 83       	std	Y+3, r25	; 0x03
     f4c:	8a 83       	std	Y+2, r24	; 0x02
                                        /* Local storage for data read from   */
                                        /* cbuff                              */
    CBUFF data;
                                        /* Check if U2 TX is totally empty     */
    if((UCSR1A & (1 << UDRE1)))
     f4e:	88 ec       	ldi	r24, 0xC8	; 200
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	80 81       	ld	r24, Z
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 72       	andi	r24, 0x20	; 32
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	f9 f0       	breq	.+62     	; 0xfa0 <triggerUART2+0x62>
    {
                                        /* Check if there is any data to send */
        if(cbuffGetFill(hCbuff) > 0)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	9b 81       	ldd	r25, Y+3	; 0x03
     f66:	0e 94 b1 03 	call	0x762	; 0x762 <cbuffGetFill>
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	c9 f0       	breq	.+50     	; 0xfa0 <triggerUART2+0x62>
        {
                                        /* Remove one byte and transmit       */
            if(cbuffGetByte(hCbuff, &data) == CBUFF_GET_OK)
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	9b 81       	ldd	r25, Y+3	; 0x03
     f72:	9e 01       	movw	r18, r28
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	b9 01       	movw	r22, r18
     f7a:	0e 94 08 04 	call	0x810	; 0x810 <cbuffGetByte>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	79 f4       	brne	.+30     	; 0xfa0 <triggerUART2+0x62>
            {
                UDR1 = (unsigned char) data;
     f82:	8e ec       	ldi	r24, 0xCE	; 206
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	29 81       	ldd	r18, Y+1	; 0x01
     f88:	fc 01       	movw	r30, r24
     f8a:	20 83       	st	Z, r18
                PORTB ^= 0x01;
     f8c:	85 e2       	ldi	r24, 0x25	; 37
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	25 e2       	ldi	r18, 0x25	; 37
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	f9 01       	movw	r30, r18
     f96:	30 81       	ld	r19, Z
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	23 27       	eor	r18, r19
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
            }    
        }    
    }    
}    
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <initTimer2>:

void initTimer2(void)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	                                    /* Normal Port operation, normal operation */
    TCCR1A = 0x00;
     fb4:	80 e8       	ldi	r24, 0x80	; 128
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	fc 01       	movw	r30, r24
     fba:	10 82       	st	Z, r1
	                                    /* CTC Mode */
    TCCR1B = 0x08;
     fbc:	81 e8       	ldi	r24, 0x81	; 129
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	28 e0       	ldi	r18, 0x08	; 8
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
	                                    /* Not used */
	TCCR1C = 0x00;
     fc6:	82 e8       	ldi	r24, 0x82	; 130
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	10 82       	st	Z, r1
                                        /* Set period to ~1Hz (count of       */
                                        /* 10800/0x2A30)                      */
    OCR1A = 10800;
     fce:	88 e8       	ldi	r24, 0x88	; 136
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	20 e3       	ldi	r18, 0x30	; 48
     fd4:	3a e2       	ldi	r19, 0x2A	; 42
     fd6:	fc 01       	movw	r30, r24
     fd8:	31 83       	std	Z+1, r19	; 0x01
     fda:	20 83       	st	Z, r18
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <startTimer2>:

void startTimer2(void)
{   
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fea:	84 e8       	ldi	r24, 0x84	; 132
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	fc 01       	movw	r30, r24
     ff0:	11 82       	std	Z+1, r1	; 0x01
     ff2:	10 82       	st	Z, r1
	                                    /* 11.0592MHz / 124 Prescaler = 10.8kHz */
    TCCR1B |= 0x05;
     ff4:	81 e8       	ldi	r24, 0x81	; 129
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	21 e8       	ldi	r18, 0x81	; 129
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	f9 01       	movw	r30, r18
     ffe:	20 81       	ld	r18, Z
    1000:	25 60       	ori	r18, 0x05	; 5
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <stopTimer2>:
void stopTimer2(void)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    TCCR1B &= ~0x05;
    1014:	81 e8       	ldi	r24, 0x81	; 129
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	21 e8       	ldi	r18, 0x81	; 129
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	f9 01       	movw	r30, r18
    101e:	20 81       	ld	r18, Z
    1020:	2a 7f       	andi	r18, 0xFA	; 250
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
}  
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <setTimer2IntRate>:
void setTimer2IntRate(void)
{
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    stopTimer2();
    1038:	0e 94 06 08 	call	0x100c	; 0x100c <stopTimer2>
                                            /* T2 clock speed is 10800Hz          */        
    OCR1A = (10800 / termGetFillRate());
    103c:	08 e8       	ldi	r16, 0x88	; 136
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <termGetFillRate>
    1044:	9c 01       	movw	r18, r24
    1046:	80 e3       	ldi	r24, 0x30	; 48
    1048:	9a e2       	ldi	r25, 0x2A	; 42
    104a:	b9 01       	movw	r22, r18
    104c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__udivmodhi4>
    1050:	9b 01       	movw	r18, r22
    1052:	c9 01       	movw	r24, r18
    1054:	f8 01       	movw	r30, r16
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	80 83       	st	Z, r24
    startTimer2();
    105a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <startTimer2>
}    
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <initInterrupts>:

void initInterrupts(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
                                        /* T1 OCA Match Interrupt                 */
    TIMSK1 = (1 << OCIE1A);
    1070:	8f e6       	ldi	r24, 0x6F	; 111
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	22 e0       	ldi	r18, 0x02	; 2
    1076:	fc 01       	movw	r30, r24
    1078:	20 83       	st	Z, r18
                                        /* Enable Rx interrupt, Tx Buff Empty interrupt */
	/* Enable RX'er and TX'er */
	UCSR1B |= (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1);
    107a:	89 ec       	ldi	r24, 0xC9	; 201
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	29 ec       	ldi	r18, 0xC9	; 201
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	f9 01       	movw	r30, r18
    1084:	20 81       	ld	r18, Z
    1086:	28 69       	ori	r18, 0x98	; 152
    1088:	fc 01       	movw	r30, r24
    108a:	20 83       	st	Z, r18
	
	sei();	
    108c:	78 94       	sei
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <updateStats>:

void updateStats(HCBUFF hCbuff)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <updateStats+0x6>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    termUpdateBytesInBuffer(cbuffGetFill(hCbuff));
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	0e 94 b1 03 	call	0x762	; 0x762 <cbuffGetFill>
    10aa:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <termUpdateBytesInBuffer>
    
//    termSetFillRate(0xFFFF / PR2);
}    
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <error>:
*
* Notes : 
*
*******************************************************************************/
void error(void)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <error+0x6>
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    int count = 0;
    10c2:	1a 82       	std	Y+2, r1	; 0x02
    10c4:	19 82       	std	Y+1, r1	; 0x01
    
    PORTB = 0x05;
    10c6:	85 e2       	ldi	r24, 0x25	; 37
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	25 e0       	ldi	r18, 0x05	; 5
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 83       	st	Z, r18
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <error+0x1c>
        count++;
        if (count == 0xFFFF)
        {
            PORTB = !(PORTB | 0x0F);
        }    
    }    
    10d2:	00 00       	nop
    int count = 0;
    
    PORTB = 0x05;
    while(1)
    {
        count++;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
        if (count == 0xFFFF)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	ff ef       	ldi	r31, 0xFF	; 255
    10e4:	8f 3f       	cpi	r24, 0xFF	; 255
    10e6:	9f 07       	cpc	r25, r31
    10e8:	a1 f7       	brne	.-24     	; 0x10d2 <error+0x1a>
        {
            PORTB = !(PORTB | 0x0F);
    10ea:	85 e2       	ldi	r24, 0x25	; 37
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	fc 01       	movw	r30, r24
    10f0:	80 81       	ld	r24, Z
    10f2:	85 e2       	ldi	r24, 0x25	; 37
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	fc 01       	movw	r30, r24
    10f8:	10 82       	st	Z, r1
        }    
    }    
    10fa:	ec cf       	rjmp	.-40     	; 0x10d4 <error+0x1c>

000010fc <__vector_28>:
}
    
/* Receive Interrupt handler */
ISR(USART1_RX_vect)
{
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	00 90 5b 00 	lds	r0, 0x005B
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <__vector_28+0x2e>
    112a:	0f 92       	push	r0
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    uint8_t rxData;
    unsigned int fillRate;
    
    PORTB ^= 0x01;
    1130:	85 e2       	ldi	r24, 0x25	; 37
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	25 e2       	ldi	r18, 0x25	; 37
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	f9 01       	movw	r30, r18
    113a:	30 81       	ld	r19, Z
    113c:	21 e0       	ldi	r18, 0x01	; 1
    113e:	23 27       	eor	r18, r19
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    
    rxData = UDR1;
    1144:	8e ec       	ldi	r24, 0xCE	; 206
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	fc 01       	movw	r30, r24
    114a:	80 81       	ld	r24, Z
    114c:	8b 83       	std	Y+3, r24	; 0x03
    
    if (rxData == 'M' || rxData == 'm' || rxData == 'A' || rxData == 'a')
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	8d 34       	cpi	r24, 0x4D	; 77
    1152:	49 f0       	breq	.+18     	; 0x1166 <__vector_28+0x6a>
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	8d 36       	cpi	r24, 0x6D	; 109
    1158:	31 f0       	breq	.+12     	; 0x1166 <__vector_28+0x6a>
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	81 34       	cpi	r24, 0x41	; 65
    115e:	19 f0       	breq	.+6      	; 0x1166 <__vector_28+0x6a>
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	81 36       	cpi	r24, 0x61	; 97
    1164:	21 f4       	brne	.+8      	; 0x116e <__vector_28+0x72>
    {
        termSetBufferEmptyMode((char) rxData);
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <termSetBufferEmptyMode>
    116c:	49 c0       	rjmp	.+146    	; 0x1200 <__vector_28+0x104>
    }    
    else if (rxData >= '0' && rxData <= '9')
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	80 33       	cpi	r24, 0x30	; 48
    1172:	38 f0       	brcs	.+14     	; 0x1182 <__vector_28+0x86>
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	8a 33       	cpi	r24, 0x3A	; 58
    1178:	20 f4       	brcc	.+8      	; 0x1182 <__vector_28+0x86>
    {
        termSetEmptyTrigger((char) rxData);
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <termSetEmptyTrigger>
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <__vector_28+0x104>
    } 
    else if (rxData == '+' || rxData == ',') /* ',' for keypad + */
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	8b 32       	cpi	r24, 0x2B	; 43
    1186:	19 f0       	breq	.+6      	; 0x118e <__vector_28+0x92>
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	8c 32       	cpi	r24, 0x2C	; 44
    118c:	61 f4       	brne	.+24     	; 0x11a6 <__vector_28+0xaa>
    {
        fillRate = termGetFillRate() + 1;
    118e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <termGetFillRate>
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
        termSetFillRate(fillRate);
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <termSetFillRate>
        setTimer2IntRate();
    11a0:	0e 94 16 08 	call	0x102c	; 0x102c <setTimer2IntRate>
    11a4:	2d c0       	rjmp	.+90     	; 0x1200 <__vector_28+0x104>
    }
    else if (rxData == '-' || rxData == '.') /* ',' for keypad - */
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	8d 32       	cpi	r24, 0x2D	; 45
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <__vector_28+0xb6>
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	8e 32       	cpi	r24, 0x2E	; 46
    11b0:	a1 f4       	brne	.+40     	; 0x11da <__vector_28+0xde>
    {
        fillRate = termGetFillRate() - 1;
    11b2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <termGetFillRate>
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	9a 83       	std	Y+2, r25	; 0x02
    11ba:	89 83       	std	Y+1, r24	; 0x01
        if (fillRate == 0)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	21 f4       	brne	.+8      	; 0x11cc <__vector_28+0xd0>
        {
            fillRate = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
        }
        termSetFillRate(fillRate);
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <termSetFillRate>
        setTimer2IntRate();
    11d4:	0e 94 16 08 	call	0x102c	; 0x102c <setTimer2IntRate>
    11d8:	13 c0       	rjmp	.+38     	; 0x1200 <__vector_28+0x104>
    }
    else if (rxData == 'r' || rxData == 'R')
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	82 37       	cpi	r24, 0x72	; 114
    11de:	19 f0       	breq	.+6      	; 0x11e6 <__vector_28+0xea>
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	82 35       	cpi	r24, 0x52	; 82
    11e4:	19 f4       	brne	.+6      	; 0x11ec <__vector_28+0xf0>
    {
        termRestartTerminal();
    11e6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <termRestartTerminal>
    11ea:	0a c0       	rjmp	.+20     	; 0x1200 <__vector_28+0x104>
    } 
    else if (rxData == ' ')
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	80 32       	cpi	r24, 0x20	; 32
    11f0:	39 f4       	brne	.+14     	; 0x1200 <__vector_28+0x104>
    {
        if(!termIsAutomatic())
    11f2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <termIsAutomatic>
    11f6:	88 23       	and	r24, r24
    11f8:	19 f4       	brne	.+6      	; 0x1200 <__vector_28+0x104>
        {
            /* Empty Buffer */
            emptyBuffer = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 14 06 	sts	0x0614, r24
        }    
    }
        
    termFullScreenUpdate();
    1200:	0e 94 02 10 	call	0x2004	; 0x2004 <termFullScreenUpdate>
}    
    1204:	23 96       	adiw	r28, 0x03	; 3
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	00 92 5b 00 	sts	0x005B, r0
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_30>:

/* Transmit interrupt handler */
ISR(USART1_TX_vect)
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	00 90 5b 00 	lds	r0, 0x005B
    1242:	0f 92       	push	r0
    1244:	11 24       	eor	r1, r1
    1246:	2f 93       	push	r18
    1248:	3f 93       	push	r19
    124a:	4f 93       	push	r20
    124c:	5f 93       	push	r21
    124e:	6f 93       	push	r22
    1250:	7f 93       	push	r23
    1252:	8f 93       	push	r24
    1254:	9f 93       	push	r25
    1256:	af 93       	push	r26
    1258:	bf 93       	push	r27
    125a:	ef 93       	push	r30
    125c:	ff 93       	push	r31
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    CBUFF txData;
    
    if (cbuffGetByte(hUartOutBuffer, &txData) == CBUFF_GET_OK)
    1268:	80 91 12 06 	lds	r24, 0x0612
    126c:	90 91 13 06 	lds	r25, 0x0613
    1270:	9e 01       	movw	r18, r28
    1272:	2f 5f       	subi	r18, 0xFF	; 255
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	b9 01       	movw	r22, r18
    1278:	0e 94 08 04 	call	0x810	; 0x810 <cbuffGetByte>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	29 f4       	brne	.+10     	; 0x128a <__vector_30+0x54>
    {
        UDR1 = (uint8_t) txData;
    1280:	8e ec       	ldi	r24, 0xCE	; 206
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	29 81       	ldd	r18, Y+1	; 0x01
    1286:	fc 01       	movw	r30, r24
    1288:	20 83       	st	Z, r18
    }       
}  
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	00 92 5b 00 	sts	0x005B, r0
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	00 90 5b 00 	lds	r0, 0x005B
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    static unsigned char testData = 'A';
    
    PORTB ^= 0x02;
    12e8:	85 e2       	ldi	r24, 0x25	; 37
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	25 e2       	ldi	r18, 0x25	; 37
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	f9 01       	movw	r30, r18
    12f2:	30 81       	ld	r19, Z
    12f4:	22 e0       	ldi	r18, 0x02	; 2
    12f6:	23 27       	eor	r18, r19
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
                                        /* Put data in the test buffer -      */
                                        /* don't care if it fails             */
    cbuffPutByte(hTestBuffer, testData);
    12fc:	80 91 10 06 	lds	r24, 0x0610
    1300:	90 91 11 06 	lds	r25, 0x0611
    1304:	20 91 00 01 	lds	r18, 0x0100
    1308:	62 2f       	mov	r22, r18
    130a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                                        /* Increment testData so it stays     */
                                        /* within 'A' to 'Z'                  */
    testData++;
    130e:	80 91 00 01 	lds	r24, 0x0100
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 00 01 	sts	0x0100, r24
    if(testData == ('Z' + 1))
    1318:	80 91 00 01 	lds	r24, 0x0100
    131c:	8b 35       	cpi	r24, 0x5B	; 91
    131e:	19 f4       	brne	.+6      	; 0x1326 <__vector_13+0x6e>
    {
        testData = 'A';        
    1320:	81 e4       	ldi	r24, 0x41	; 65
    1322:	80 93 00 01 	sts	0x0100, r24
    }
}  
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	00 92 5b 00 	sts	0x005B, r0
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <termInit>:
/*******************************************************************************
*                            LOCAL CONFIGURATION ERRORS
*******************************************************************************/

void termInit(void)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	0f 92       	push	r0
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    unsigned char loopCount;
    
    for (loopCount = 0; loopCount < 50; loopCount++)
    135c:	19 82       	std	Y+1, r1	; 0x01
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <termInit+0x24>
    {
        checkBuffer[loopCount] = ' ';
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	8b 5d       	subi	r24, 0xDB	; 219
    1368:	99 4f       	sbci	r25, 0xF9	; 249
    136a:	20 e2       	ldi	r18, 0x20	; 32
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18

void termInit(void)
{
    unsigned char loopCount;
    
    for (loopCount = 0; loopCount < 50; loopCount++)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	82 33       	cpi	r24, 0x32	; 50
    137a:	90 f3       	brcs	.-28     	; 0x1360 <termInit+0xe>
    {
        checkBuffer[loopCount] = ' ';
    }
        
    termData.bytesInBuffer = 0;
    137c:	10 92 17 06 	sts	0x0617, r1
    1380:	10 92 16 06 	sts	0x0616, r1
    termData.fillRate = 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	90 93 19 06 	sts	0x0619, r25
    138c:	80 93 18 06 	sts	0x0618, r24
    termData.fillBarLength = 0;
    1390:	10 92 1a 06 	sts	0x061A, r1
    termData.percentFilled = 0;
    1394:	10 92 1b 06 	sts	0x061B, r1
    termData.emptyOnBytesFree = 9;
    1398:	89 e0       	ldi	r24, 0x09	; 9
    139a:	80 93 1c 06 	sts	0x061C, r24
    termData.termMode = MANUAL;
    139e:	10 92 1d 06 	sts	0x061D, r1
    termData.bytesInBufferCheck = 0;
    13a2:	10 92 1f 06 	sts	0x061F, r1
    13a6:	10 92 1e 06 	sts	0x061E, r1
    termData.producerSpeedTooHigh = SPEED_OK;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 20 06 	sts	0x0620, r24
    termData.bufferIntegrity = INTEGRITY_OK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 22 06 	sts	0x0622, r24
    termData.oldLastChar = 0;
    13b6:	10 92 21 06 	sts	0x0621, r1
    termData.termFullScreenUpdate = FULLSCREEN_YES;
    13ba:	10 92 23 06 	sts	0x0623, r1
}
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <termOutput>:
*
* Notes : 
*
*******************************************************************************/
void termOutput(HCBUFF hCbuff)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	28 97       	sbiw	r28, 0x08	; 8
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	98 87       	std	Y+8, r25	; 0x08
    13dc:	8f 83       	std	Y+7, r24	; 0x07
    unsigned int    uiTemp;
    CBUFF           cbuffTemp;
    CBUFF           cbuffUnits;
    CBUFF           cbuffTens;
    
    if (restartTerm)
    13de:	80 91 24 06 	lds	r24, 0x0624
    13e2:	88 23       	and	r24, r24
    13e4:	21 f0       	breq	.+8      	; 0x13ee <termOutput+0x28>
    {
        termState = RESET_TERMINALA;
    13e6:	10 92 15 06 	sts	0x0615, r1
        restartTerm = 0;
    13ea:	10 92 24 06 	sts	0x0624, r1
    }
        
    switch(termState)
    13ee:	80 91 15 06 	lds	r24, 0x0615
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	aa 27       	eor	r26, r26
    13f8:	97 fd       	sbrc	r25, 7
    13fa:	a0 95       	com	r26
    13fc:	ba 2f       	mov	r27, r26
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	25 e2       	ldi	r18, 0x25	; 37
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	84 1b       	sub	r24, r20
    1408:	95 0b       	sbc	r25, r21
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	08 f4       	brcc	.+2      	; 0x1412 <termOutput+0x4c>
    1410:	a4 c4       	rjmp	.+2376   	; 0x1d5a <termOutput+0x994>
    1412:	8a 5b       	subi	r24, 0xBA	; 186
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	fc 01       	movw	r30, r24
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	05 90       	lpm	r0, Z+
    141e:	f4 91       	lpm	r31, Z+
    1420:	e0 2d       	mov	r30, r0
    1422:	09 94       	ijmp
    {
                                        /**************************************/
                                        /* RESET TERMINAL                     */
                                        /**************************************/
        case RESET_TERMINALA:
            cbuffClearBuffer(hCbuff);
    1424:	8f 81       	ldd	r24, Y+7	; 0x07
    1426:	98 85       	ldd	r25, Y+8	; 0x08
    1428:	0e 94 da 03 	call	0x7b4	; 0x7b4 <cbuffClearBuffer>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerma))
    142c:	8f 81       	ldd	r24, Y+7	; 0x07
    142e:	98 85       	ldd	r25, Y+8	; 0x08
    1430:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	08 f4       	brcc	.+2      	; 0x143c <termOutput+0x76>
    143a:	44 c4       	rjmp	.+2184   	; 0x1cc4 <termOutput+0x8fe>
            {
                cbuffPutArray(hCbuff, resetTerma, sizeof(resetTerma)-1);
    143c:	8f 81       	ldd	r24, Y+7	; 0x07
    143e:	98 85       	ldd	r25, Y+8	; 0x08
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	31 e0       	ldi	r19, 0x01	; 1
    1444:	b9 01       	movw	r22, r18
    1446:	44 e0       	ldi	r20, 0x04	; 4
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALB;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1454:	82 c4       	rjmp	.+2308   	; 0x1d5a <termOutput+0x994>
            
        case RESET_TERMINALB:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	98 85       	ldd	r25, Y+8	; 0x08
    145a:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    145e:	85 30       	cpi	r24, 0x05	; 5
    1460:	91 05       	cpc	r25, r1
    1462:	08 f4       	brcc	.+2      	; 0x1466 <termOutput+0xa0>
    1464:	31 c4       	rjmp	.+2146   	; 0x1cc8 <termOutput+0x902>
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
    1466:	8f 81       	ldd	r24, Y+7	; 0x07
    1468:	98 85       	ldd	r25, Y+8	; 0x08
    146a:	26 e0       	ldi	r18, 0x06	; 6
    146c:	31 e0       	ldi	r19, 0x01	; 1
    146e:	b9 01       	movw	r22, r18
    1470:	43 e0       	ldi	r20, 0x03	; 3
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALC;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	80 93 15 06 	sts	0x0615, r24
            }    
            break; 
    147e:	6d c4       	rjmp	.+2266   	; 0x1d5a <termOutput+0x994>
            
        case RESET_TERMINALC:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermc))
    1480:	8f 81       	ldd	r24, Y+7	; 0x07
    1482:	98 85       	ldd	r25, Y+8	; 0x08
    1484:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1488:	87 30       	cpi	r24, 0x07	; 7
    148a:	91 05       	cpc	r25, r1
    148c:	08 f4       	brcc	.+2      	; 0x1490 <termOutput+0xca>
    148e:	1e c4       	rjmp	.+2108   	; 0x1ccc <termOutput+0x906>
            {
                cbuffPutArray(hCbuff, resetTermc, sizeof(resetTermc)-1);
    1490:	8f 81       	ldd	r24, Y+7	; 0x07
    1492:	98 85       	ldd	r25, Y+8	; 0x08
    1494:	2a e0       	ldi	r18, 0x0A	; 10
    1496:	31 e0       	ldi	r19, 0x01	; 1
    1498:	b9 01       	movw	r22, r18
    149a:	45 e0       	ldi	r20, 0x05	; 5
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALD;
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	80 93 15 06 	sts	0x0615, r24
            }    
            break;  
    14a8:	58 c4       	rjmp	.+2224   	; 0x1d5a <termOutput+0x994>
            
        case RESET_TERMINALD:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermd))
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    14b2:	89 30       	cpi	r24, 0x09	; 9
    14b4:	91 05       	cpc	r25, r1
    14b6:	08 f4       	brcc	.+2      	; 0x14ba <termOutput+0xf4>
    14b8:	0b c4       	rjmp	.+2070   	; 0x1cd0 <termOutput+0x90a>
            {
                cbuffPutArray(hCbuff, resetTermd, sizeof(resetTermd)-1);
    14ba:	8f 81       	ldd	r24, Y+7	; 0x07
    14bc:	98 85       	ldd	r25, Y+8	; 0x08
    14be:	20 e1       	ldi	r18, 0x10	; 16
    14c0:	31 e0       	ldi	r19, 0x01	; 1
    14c2:	b9 01       	movw	r22, r18
    14c4:	47 e0       	ldi	r20, 0x07	; 7
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = RESET_TERMINALE;
    14cc:	84 e0       	ldi	r24, 0x04	; 4
    14ce:	80 93 15 06 	sts	0x0615, r24
            }    
            break;   
    14d2:	43 c4       	rjmp	.+2182   	; 0x1d5a <termOutput+0x994>
        
        case RESET_TERMINALE:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerme))
    14d4:	8f 81       	ldd	r24, Y+7	; 0x07
    14d6:	98 85       	ldd	r25, Y+8	; 0x08
    14d8:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	91 05       	cpc	r25, r1
    14e0:	08 f4       	brcc	.+2      	; 0x14e4 <termOutput+0x11e>
    14e2:	f8 c3       	rjmp	.+2032   	; 0x1cd4 <termOutput+0x90e>
            {
                cbuffPutArray(hCbuff, resetTerme, sizeof(resetTerme)-1);
    14e4:	8f 81       	ldd	r24, Y+7	; 0x07
    14e6:	98 85       	ldd	r25, Y+8	; 0x08
    14e8:	28 e1       	ldi	r18, 0x18	; 24
    14ea:	31 e0       	ldi	r19, 0x01	; 1
    14ec:	b9 01       	movw	r22, r18
    14ee:	46 e0       	ldi	r20, 0x06	; 6
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_1;
    14f6:	86 e0       	ldi	r24, 0x06	; 6
    14f8:	80 93 15 06 	sts	0x0615, r24
            }    
            break; 
    14fc:	2e c4       	rjmp	.+2140   	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* HOME CURSOR                        */
                                        /**************************************/        
        case HOME_CURSOR:
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
    14fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1500:	98 85       	ldd	r25, Y+8	; 0x08
    1502:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1506:	85 30       	cpi	r24, 0x05	; 5
    1508:	91 05       	cpc	r25, r1
    150a:	08 f4       	brcc	.+2      	; 0x150e <termOutput+0x148>
    150c:	e5 c3       	rjmp	.+1994   	; 0x1cd8 <termOutput+0x912>
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	98 85       	ldd	r25, Y+8	; 0x08
    1512:	26 e0       	ldi	r18, 0x06	; 6
    1514:	31 e0       	ldi	r19, 0x01	; 1
    1516:	b9 01       	movw	r22, r18
    1518:	43 e0       	ldi	r20, 0x03	; 3
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_1;
    1520:	86 e0       	ldi	r24, 0x06	; 6
    1522:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1526:	19 c4       	rjmp	.+2098   	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 1                      */
                                        /**************************************/
        case OUTPUT_LINE_1:
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine1)))
    1528:	8f 81       	ldd	r24, Y+7	; 0x07
    152a:	98 85       	ldd	r25, Y+8	; 0x08
    152c:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1530:	8d 32       	cpi	r24, 0x2D	; 45
    1532:	91 05       	cpc	r25, r1
    1534:	08 f4       	brcc	.+2      	; 0x1538 <termOutput+0x172>
    1536:	d2 c3       	rjmp	.+1956   	; 0x1cdc <termOutput+0x916>
            {
                cbuffPutArray(hCbuff, termLine1, sizeof(termLine1)-1);
    1538:	8f 81       	ldd	r24, Y+7	; 0x07
    153a:	98 85       	ldd	r25, Y+8	; 0x08
    153c:	2f e1       	ldi	r18, 0x1F	; 31
    153e:	31 e0       	ldi	r19, 0x01	; 1
    1540:	b9 01       	movw	r22, r18
    1542:	4b e2       	ldi	r20, 0x2B	; 43
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3A;
    154a:	88 e0       	ldi	r24, 0x08	; 8
    154c:	80 93 15 06 	sts	0x0615, r24
            }    
            break;  
    1550:	04 c4       	rjmp	.+2056   	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 2                      */
                                        /**************************************/
        case OUTPUT_LINE_2:
            if (cbuffGetSpace(hCbuff) > sizeof(termReturn))
    1552:	8f 81       	ldd	r24, Y+7	; 0x07
    1554:	98 85       	ldd	r25, Y+8	; 0x08
    1556:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	91 05       	cpc	r25, r1
    155e:	08 f4       	brcc	.+2      	; 0x1562 <termOutput+0x19c>
    1560:	bf c3       	rjmp	.+1918   	; 0x1ce0 <termOutput+0x91a>
            {
                cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
    1562:	8f 81       	ldd	r24, Y+7	; 0x07
    1564:	98 85       	ldd	r25, Y+8	; 0x08
    1566:	21 ec       	ldi	r18, 0xC1	; 193
    1568:	32 e0       	ldi	r19, 0x02	; 2
    156a:	b9 01       	movw	r22, r18
    156c:	42 e0       	ldi	r20, 0x02	; 2
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3A;
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	80 93 15 06 	sts	0x0615, r24
            }    
            break; 
    157a:	ef c3       	rjmp	.+2014   	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 3                      */
                                        /**************************************/
        case OUTPUT_LINE_3A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3a))
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1584:	86 31       	cpi	r24, 0x16	; 22
    1586:	91 05       	cpc	r25, r1
    1588:	08 f4       	brcc	.+2      	; 0x158c <termOutput+0x1c6>
    158a:	ac c3       	rjmp	.+1880   	; 0x1ce4 <termOutput+0x91e>
            {
                cbuffPutArray(hCbuff, termLine3a, sizeof(termLine3a)-1);
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	2b e4       	ldi	r18, 0x4B	; 75
    1592:	31 e0       	ldi	r19, 0x01	; 1
    1594:	b9 01       	movw	r22, r18
    1596:	44 e1       	ldi	r20, 0x14	; 20
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3B;
    159e:	89 e0       	ldi	r24, 0x09	; 9
    15a0:	80 93 15 06 	sts	0x0615, r24
            }    
            break; 
    15a4:	da c3       	rjmp	.+1972   	; 0x1d5a <termOutput+0x994>
            
        case OUTPUT_LINE_3B:
            if (cbuffGetSpace(hCbuff) > 3)
    15a6:	8f 81       	ldd	r24, Y+7	; 0x07
    15a8:	98 85       	ldd	r25, Y+8	; 0x08
    15aa:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	91 05       	cpc	r25, r1
    15b2:	08 f4       	brcc	.+2      	; 0x15b6 <termOutput+0x1f0>
    15b4:	99 c3       	rjmp	.+1842   	; 0x1ce8 <termOutput+0x922>
            {
                uiTemp = termData.bytesInBuffer;
    15b6:	80 91 16 06 	lds	r24, 0x0616
    15ba:	90 91 17 06 	lds	r25, 0x0617
    15be:	9b 83       	std	Y+3, r25	; 0x03
    15c0:	8a 83       	std	Y+2, r24	; 0x02
                if(uiTemp < 10)
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	8a 30       	cpi	r24, 0x0A	; 10
    15c8:	91 05       	cpc	r25, r1
    15ca:	70 f4       	brcc	.+28     	; 0x15e8 <termOutput+0x222>
                {
                    cbuffPutByte(hCbuff, ' ');
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	98 85       	ldd	r25, Y+8	; 0x08
    15d0:	60 e2       	ldi	r22, 0x20	; 32
    15d2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, (CBUFF)(uiTemp + '0'));
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	20 5d       	subi	r18, 0xD0	; 208
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	62 2f       	mov	r22, r18
    15e2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    15e6:	22 c0       	rjmp	.+68     	; 0x162c <termOutput+0x266>
                }
                else
                {
                                        /* Convert value into two chars       */
                    cbuffTemp = (CBUFF) (uiTemp % 10);
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	9b 81       	ldd	r25, Y+3	; 0x03
    15ec:	2a e0       	ldi	r18, 0x0A	; 10
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	b9 01       	movw	r22, r18
    15f2:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__udivmodhi4>
    15f6:	8c 83       	std	Y+4, r24	; 0x04
                    uiTemp = uiTemp / 10;
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	2a e0       	ldi	r18, 0x0A	; 10
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	b9 01       	movw	r22, r18
    1602:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__udivmodhi4>
    1606:	9b 01       	movw	r18, r22
    1608:	3b 83       	std	Y+3, r19	; 0x03
    160a:	2a 83       	std	Y+2, r18	; 0x02
                    cbuffPutByte(hCbuff, (CBUFF)(uiTemp + '0'));
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	20 5d       	subi	r18, 0xD0	; 208
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	98 85       	ldd	r25, Y+8	; 0x08
    1616:	62 2f       	mov	r22, r18
    1618:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, cbuffTemp + '0');
    161c:	8c 81       	ldd	r24, Y+4	; 0x04
    161e:	28 2f       	mov	r18, r24
    1620:	20 5d       	subi	r18, 0xD0	; 208
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	62 2f       	mov	r22, r18
    1628:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                }    
                termState = OUTPUT_LINE_3C;
    162c:	8a e0       	ldi	r24, 0x0A	; 10
    162e:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1632:	93 c3       	rjmp	.+1830   	; 0x1d5a <termOutput+0x994>
        
        case OUTPUT_LINE_3C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3c))
    1634:	8f 81       	ldd	r24, Y+7	; 0x07
    1636:	98 85       	ldd	r25, Y+8	; 0x08
    1638:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    163c:	87 31       	cpi	r24, 0x17	; 23
    163e:	91 05       	cpc	r25, r1
    1640:	08 f4       	brcc	.+2      	; 0x1644 <termOutput+0x27e>
    1642:	54 c3       	rjmp	.+1704   	; 0x1cec <termOutput+0x926>
            {
                cbuffPutArray(hCbuff, termLine3c, sizeof(termLine3c)-1);
    1644:	8f 81       	ldd	r24, Y+7	; 0x07
    1646:	98 85       	ldd	r25, Y+8	; 0x08
    1648:	20 e6       	ldi	r18, 0x60	; 96
    164a:	31 e0       	ldi	r19, 0x01	; 1
    164c:	b9 01       	movw	r22, r18
    164e:	45 e1       	ldi	r20, 0x15	; 21
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_4A;
    1656:	8b e0       	ldi	r24, 0x0B	; 11
    1658:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    165c:	7e c3       	rjmp	.+1788   	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 4                      */
                                        /**************************************/
        case OUTPUT_LINE_4A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4a))
    165e:	8f 81       	ldd	r24, Y+7	; 0x07
    1660:	98 85       	ldd	r25, Y+8	; 0x08
    1662:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	08 f4       	brcc	.+2      	; 0x166e <termOutput+0x2a8>
    166c:	41 c3       	rjmp	.+1666   	; 0x1cf0 <termOutput+0x92a>
            {
                cbuffPutArray(hCbuff, termLine4a, sizeof(termLine4a)-1);
    166e:	8f 81       	ldd	r24, Y+7	; 0x07
    1670:	98 85       	ldd	r25, Y+8	; 0x08
    1672:	26 e7       	ldi	r18, 0x76	; 118
    1674:	31 e0       	ldi	r19, 0x01	; 1
    1676:	b9 01       	movw	r22, r18
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_4B;
    1680:	8c e0       	ldi	r24, 0x0C	; 12
    1682:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1686:	69 c3       	rjmp	.+1746   	; 0x1d5a <termOutput+0x994>
            
        case OUTPUT_LINE_4B:
            if (cbuffGetSpace(hCbuff) > 70)
    1688:	8f 81       	ldd	r24, Y+7	; 0x07
    168a:	98 85       	ldd	r25, Y+8	; 0x08
    168c:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1690:	87 34       	cpi	r24, 0x47	; 71
    1692:	91 05       	cpc	r25, r1
    1694:	08 f4       	brcc	.+2      	; 0x1698 <termOutput+0x2d2>
    1696:	2e c3       	rjmp	.+1628   	; 0x1cf4 <termOutput+0x92e>
            {
                unsigned char count;
                
                for (count = 0; count < 70; count++)
    1698:	19 82       	std	Y+1, r1	; 0x01
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <termOutput+0x2fc>
                {
                    if (count < termData.fillBarLength)
    169c:	90 91 1a 06 	lds	r25, 0x061A
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	89 17       	cp	r24, r25
    16a4:	30 f4       	brcc	.+12     	; 0x16b2 <termOutput+0x2ec>
                    {
                        //cbuffPutByte(hCbuff, 176);
                        cbuffPutByte(hCbuff, '#');
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	63 e2       	ldi	r22, 0x23	; 35
    16ac:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <termOutput+0x2f6>
                    }
                    else
                    {
                        cbuffPutByte(hCbuff, ' ');
    16b2:	8f 81       	ldd	r24, Y+7	; 0x07
    16b4:	98 85       	ldd	r25, Y+8	; 0x08
    16b6:	60 e2       	ldi	r22, 0x20	; 32
    16b8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
        case OUTPUT_LINE_4B:
            if (cbuffGetSpace(hCbuff) > 70)
            {
                unsigned char count;
                
                for (count = 0; count < 70; count++)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	86 34       	cpi	r24, 0x46	; 70
    16c6:	50 f3       	brcs	.-44     	; 0x169c <termOutput+0x2d6>
                    else
                    {
                        cbuffPutByte(hCbuff, ' ');
                    }        
                }    
                termState = OUTPUT_LINE_4C;
    16c8:	8d e0       	ldi	r24, 0x0D	; 13
    16ca:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    16ce:	45 c3       	rjmp	.+1674   	; 0x1d5a <termOutput+0x994>
            
        case OUTPUT_LINE_4C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4c))
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	98 85       	ldd	r25, Y+8	; 0x08
    16d4:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    16d8:	86 30       	cpi	r24, 0x06	; 6
    16da:	91 05       	cpc	r25, r1
    16dc:	08 f4       	brcc	.+2      	; 0x16e0 <termOutput+0x31a>
    16de:	0c c3       	rjmp	.+1560   	; 0x1cf8 <termOutput+0x932>
            {
                cbuffPutArray(hCbuff, termLine4c, sizeof(termLine4c)-1);
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	98 85       	ldd	r25, Y+8	; 0x08
    16e4:	28 e7       	ldi	r18, 0x78	; 120
    16e6:	31 e0       	ldi	r19, 0x01	; 1
    16e8:	b9 01       	movw	r22, r18
    16ea:	44 e0       	ldi	r20, 0x04	; 4
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_4D;
    16f2:	8e e0       	ldi	r24, 0x0E	; 14
    16f4:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    16f8:	30 c3       	rjmp	.+1632   	; 0x1d5a <termOutput+0x994>
        
        case OUTPUT_LINE_4D:
            if (cbuffGetSpace(hCbuff) > 4)
    16fa:	8f 81       	ldd	r24, Y+7	; 0x07
    16fc:	98 85       	ldd	r25, Y+8	; 0x08
    16fe:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1702:	85 30       	cpi	r24, 0x05	; 5
    1704:	91 05       	cpc	r25, r1
    1706:	08 f4       	brcc	.+2      	; 0x170a <termOutput+0x344>
    1708:	f9 c2       	rjmp	.+1522   	; 0x1cfc <termOutput+0x936>
            {
                cbuffUnits = termData.percentFilled;
    170a:	80 91 1b 06 	lds	r24, 0x061B
    170e:	8d 83       	std	Y+5, r24	; 0x05
                if(cbuffUnits < 10)
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	8a 30       	cpi	r24, 0x0A	; 10
    1714:	48 f4       	brcc	.+18     	; 0x1728 <termOutput+0x362>
                {
                    cbuffPutByte(hCbuff, (CBUFF)(cbuffUnits + '0'));
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	28 2f       	mov	r18, r24
    171a:	20 5d       	subi	r18, 0xD0	; 208
    171c:	8f 81       	ldd	r24, Y+7	; 0x07
    171e:	98 85       	ldd	r25, Y+8	; 0x08
    1720:	62 2f       	mov	r22, r18
    1722:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    1726:	30 c0       	rjmp	.+96     	; 0x1788 <termOutput+0x3c2>
                }
                else if (cbuffUnits < 100)
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	84 36       	cpi	r24, 0x64	; 100
    172c:	f0 f4       	brcc	.+60     	; 0x176a <termOutput+0x3a4>
                {
                                        /* Convert value into two chars       */
                    cbuffTens = cbuffUnits / 10;
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9a e0       	ldi	r25, 0x0A	; 10
    1732:	69 2f       	mov	r22, r25
    1734:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__udivmodqi4>
    1738:	8e 83       	std	Y+6, r24	; 0x06
                    cbuffUnits = cbuffUnits % 10;
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9a e0       	ldi	r25, 0x0A	; 10
    173e:	69 2f       	mov	r22, r25
    1740:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__udivmodqi4>
    1744:	89 2f       	mov	r24, r25
    1746:	8d 83       	std	Y+5, r24	; 0x05
                    cbuffPutByte(hCbuff, cbuffTens + '0');
    1748:	8e 81       	ldd	r24, Y+6	; 0x06
    174a:	28 2f       	mov	r18, r24
    174c:	20 5d       	subi	r18, 0xD0	; 208
    174e:	8f 81       	ldd	r24, Y+7	; 0x07
    1750:	98 85       	ldd	r25, Y+8	; 0x08
    1752:	62 2f       	mov	r22, r18
    1754:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, cbuffUnits + '0');
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	28 2f       	mov	r18, r24
    175c:	20 5d       	subi	r18, 0xD0	; 208
    175e:	8f 81       	ldd	r24, Y+7	; 0x07
    1760:	98 85       	ldd	r25, Y+8	; 0x08
    1762:	62 2f       	mov	r22, r18
    1764:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <termOutput+0x3c2>
                }
                else
                {
                    cbuffPutByte(hCbuff, '1');
    176a:	8f 81       	ldd	r24, Y+7	; 0x07
    176c:	98 85       	ldd	r25, Y+8	; 0x08
    176e:	61 e3       	ldi	r22, 0x31	; 49
    1770:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, '0');
    1774:	8f 81       	ldd	r24, Y+7	; 0x07
    1776:	98 85       	ldd	r25, Y+8	; 0x08
    1778:	60 e3       	ldi	r22, 0x30	; 48
    177a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, '0');
    177e:	8f 81       	ldd	r24, Y+7	; 0x07
    1780:	98 85       	ldd	r25, Y+8	; 0x08
    1782:	60 e3       	ldi	r22, 0x30	; 48
    1784:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                }      
                if (termData.termFullScreenUpdate == FULLSCREEN_YES)
    1788:	80 91 23 06 	lds	r24, 0x0623
    178c:	88 23       	and	r24, r24
    178e:	39 f4       	brne	.+14     	; 0x179e <termOutput+0x3d8>
                {
                    termData.termFullScreenUpdate = FULLSCREEN_NO;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	80 93 23 06 	sts	0x0623, r24
                    termState = OUTPUT_LINE_4E;
    1796:	8f e0       	ldi	r24, 0x0F	; 15
    1798:	80 93 15 06 	sts	0x0615, r24
                else
                {
                    termState = OUTPUT_LINE_4F;
                }    
            }    
            break;
    179c:	de c2       	rjmp	.+1468   	; 0x1d5a <termOutput+0x994>
                    termData.termFullScreenUpdate = FULLSCREEN_NO;
                    termState = OUTPUT_LINE_4E;
                }
                else
                {
                    termState = OUTPUT_LINE_4F;
    179e:	80 e1       	ldi	r24, 0x10	; 16
    17a0:	80 93 15 06 	sts	0x0615, r24
                }    
            }    
            break;
    17a4:	da c2       	rjmp	.+1460   	; 0x1d5a <termOutput+0x994>
        
        case OUTPUT_LINE_4E:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4e))
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	98 85       	ldd	r25, Y+8	; 0x08
    17aa:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    17ae:	87 30       	cpi	r24, 0x07	; 7
    17b0:	91 05       	cpc	r25, r1
    17b2:	08 f4       	brcc	.+2      	; 0x17b6 <termOutput+0x3f0>
    17b4:	a5 c2       	rjmp	.+1354   	; 0x1d00 <termOutput+0x93a>
            {
                cbuffPutArray(hCbuff, termLine4e, sizeof(termLine4e)-1);
    17b6:	8f 81       	ldd	r24, Y+7	; 0x07
    17b8:	98 85       	ldd	r25, Y+8	; 0x08
    17ba:	2d e7       	ldi	r18, 0x7D	; 125
    17bc:	31 e0       	ldi	r19, 0x01	; 1
    17be:	b9 01       	movw	r22, r18
    17c0:	45 e0       	ldi	r20, 0x05	; 5
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_6A;
    17c8:	81 e1       	ldi	r24, 0x11	; 17
    17ca:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    17ce:	c5 c2       	rjmp	.+1418   	; 0x1d5a <termOutput+0x994>
        case OUTPUT_LINE_4F:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4f))
    17d0:	8f 81       	ldd	r24, Y+7	; 0x07
    17d2:	98 85       	ldd	r25, Y+8	; 0x08
    17d4:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    17d8:	88 30       	cpi	r24, 0x08	; 8
    17da:	91 05       	cpc	r25, r1
    17dc:	08 f4       	brcc	.+2      	; 0x17e0 <termOutput+0x41a>
    17de:	92 c2       	rjmp	.+1316   	; 0x1d04 <termOutput+0x93e>
            {
                cbuffPutArray(hCbuff, termLine4f, sizeof(termLine4f)-1);
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
    17e2:	98 85       	ldd	r25, Y+8	; 0x08
    17e4:	23 e8       	ldi	r18, 0x83	; 131
    17e6:	31 e0       	ldi	r19, 0x01	; 1
    17e8:	b9 01       	movw	r22, r18
    17ea:	46 e0       	ldi	r20, 0x06	; 6
    17ec:	50 e0       	ldi	r21, 0x00	; 0
    17ee:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_3A;
    17f2:	88 e0       	ldi	r24, 0x08	; 8
    17f4:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    17f8:	b0 c2       	rjmp	.+1376   	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 6                      */
                                        /**************************************/
        case OUTPUT_LINE_6A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6a))
    17fa:	8f 81       	ldd	r24, Y+7	; 0x07
    17fc:	98 85       	ldd	r25, Y+8	; 0x08
    17fe:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1802:	82 32       	cpi	r24, 0x22	; 34
    1804:	91 05       	cpc	r25, r1
    1806:	08 f4       	brcc	.+2      	; 0x180a <termOutput+0x444>
    1808:	7f c2       	rjmp	.+1278   	; 0x1d08 <termOutput+0x942>
            {
                cbuffPutArray(hCbuff, termLine6a, sizeof(termLine6a)-1);
    180a:	8f 81       	ldd	r24, Y+7	; 0x07
    180c:	98 85       	ldd	r25, Y+8	; 0x08
    180e:	2a e8       	ldi	r18, 0x8A	; 138
    1810:	31 e0       	ldi	r19, 0x01	; 1
    1812:	b9 01       	movw	r22, r18
    1814:	40 e2       	ldi	r20, 0x20	; 32
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_6B;
    181c:	82 e1       	ldi	r24, 0x12	; 18
    181e:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1822:	9b c2       	rjmp	.+1334   	; 0x1d5a <termOutput+0x994>
            
         case OUTPUT_LINE_6B:
            if (cbuffGetSpace(hCbuff) > 6)
    1824:	8f 81       	ldd	r24, Y+7	; 0x07
    1826:	98 85       	ldd	r25, Y+8	; 0x08
    1828:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    182c:	87 30       	cpi	r24, 0x07	; 7
    182e:	91 05       	cpc	r25, r1
    1830:	08 f4       	brcc	.+2      	; 0x1834 <termOutput+0x46e>
    1832:	6c c2       	rjmp	.+1240   	; 0x1d0c <termOutput+0x946>
            {
                if(termData.fillRate < 10)
    1834:	80 91 18 06 	lds	r24, 0x0618
    1838:	90 91 19 06 	lds	r25, 0x0619
    183c:	8a 30       	cpi	r24, 0x0A	; 10
    183e:	91 05       	cpc	r25, r1
    1840:	88 f4       	brcc	.+34     	; 0x1864 <termOutput+0x49e>
                {
                    cbuffPutByte(hCbuff, ' ');
    1842:	8f 81       	ldd	r24, Y+7	; 0x07
    1844:	98 85       	ldd	r25, Y+8	; 0x08
    1846:	60 e2       	ldi	r22, 0x20	; 32
    1848:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutByte(hCbuff, (CBUFF) termData.fillRate + '0');
    184c:	80 91 18 06 	lds	r24, 0x0618
    1850:	90 91 19 06 	lds	r25, 0x0619
    1854:	28 2f       	mov	r18, r24
    1856:	20 5d       	subi	r18, 0xD0	; 208
    1858:	8f 81       	ldd	r24, Y+7	; 0x07
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	62 2f       	mov	r22, r18
    185e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
    1862:	31 c0       	rjmp	.+98     	; 0x18c6 <termOutput+0x500>
                }
                else if (termData.fillRate < 100)
    1864:	80 91 18 06 	lds	r24, 0x0618
    1868:	90 91 19 06 	lds	r25, 0x0619
    186c:	84 36       	cpi	r24, 0x64	; 100
    186e:	91 05       	cpc	r25, r1
    1870:	50 f5       	brcc	.+84     	; 0x18c6 <termOutput+0x500>
                {
                    cbuffTens = (CBUFF) (termData.fillRate / 10) + '0';
    1872:	80 91 18 06 	lds	r24, 0x0618
    1876:	90 91 19 06 	lds	r25, 0x0619
    187a:	2a e0       	ldi	r18, 0x0A	; 10
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	b9 01       	movw	r22, r18
    1880:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__udivmodhi4>
    1884:	9b 01       	movw	r18, r22
    1886:	c9 01       	movw	r24, r18
    1888:	80 5d       	subi	r24, 0xD0	; 208
    188a:	8e 83       	std	Y+6, r24	; 0x06
                    cbuffPutByte(hCbuff, cbuffTens);
    188c:	8f 81       	ldd	r24, Y+7	; 0x07
    188e:	98 85       	ldd	r25, Y+8	; 0x08
    1890:	6e 81       	ldd	r22, Y+6	; 0x06
    1892:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffTens = (cbuffTens - '0') * 10;
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	88 0f       	add	r24, r24
    189a:	98 2f       	mov	r25, r24
    189c:	99 0f       	add	r25, r25
    189e:	99 0f       	add	r25, r25
    18a0:	89 0f       	add	r24, r25
    18a2:	80 5e       	subi	r24, 0xE0	; 224
    18a4:	8e 83       	std	Y+6, r24	; 0x06
                    cbuffUnits = (CBUFF) (termData.fillRate - cbuffTens) + '0';
    18a6:	80 91 18 06 	lds	r24, 0x0618
    18aa:	90 91 19 06 	lds	r25, 0x0619
    18ae:	98 2f       	mov	r25, r24
    18b0:	8e 81       	ldd	r24, Y+6	; 0x06
    18b2:	f9 2f       	mov	r31, r25
    18b4:	f8 1b       	sub	r31, r24
    18b6:	8f 2f       	mov	r24, r31
    18b8:	80 5d       	subi	r24, 0xD0	; 208
    18ba:	8d 83       	std	Y+5, r24	; 0x05
                    
                    cbuffPutByte(hCbuff, cbuffUnits);
    18bc:	8f 81       	ldd	r24, Y+7	; 0x07
    18be:	98 85       	ldd	r25, Y+8	; 0x08
    18c0:	6d 81       	ldd	r22, Y+5	; 0x05
    18c2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                }      
                termState = OUTPUT_LINE_6C;  
    18c6:	83 e1       	ldi	r24, 0x13	; 19
    18c8:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    18cc:	46 c2       	rjmp	.+1164   	; 0x1d5a <termOutput+0x994>
            
         case OUTPUT_LINE_6C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6c))
    18ce:	8f 81       	ldd	r24, Y+7	; 0x07
    18d0:	98 85       	ldd	r25, Y+8	; 0x08
    18d2:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    18d6:	88 31       	cpi	r24, 0x18	; 24
    18d8:	91 05       	cpc	r25, r1
    18da:	08 f4       	brcc	.+2      	; 0x18de <termOutput+0x518>
    18dc:	19 c2       	rjmp	.+1074   	; 0x1d10 <termOutput+0x94a>
            {
                cbuffPutArray(hCbuff, termLine6c, sizeof(termLine6c)-1);
    18de:	8f 81       	ldd	r24, Y+7	; 0x07
    18e0:	98 85       	ldd	r25, Y+8	; 0x08
    18e2:	2b ea       	ldi	r18, 0xAB	; 171
    18e4:	31 e0       	ldi	r19, 0x01	; 1
    18e6:	b9 01       	movw	r22, r18
    18e8:	46 e1       	ldi	r20, 0x16	; 22
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_8A;
    18f0:	84 e1       	ldi	r24, 0x14	; 20
    18f2:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    18f6:	31 c2       	rjmp	.+1122   	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 8                      */
                                        /**************************************/
        case OUTPUT_LINE_8A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8a))
    18f8:	8f 81       	ldd	r24, Y+7	; 0x07
    18fa:	98 85       	ldd	r25, Y+8	; 0x08
    18fc:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1900:	86 31       	cpi	r24, 0x16	; 22
    1902:	91 05       	cpc	r25, r1
    1904:	08 f4       	brcc	.+2      	; 0x1908 <termOutput+0x542>
    1906:	06 c2       	rjmp	.+1036   	; 0x1d14 <termOutput+0x94e>
            {
                cbuffPutArray(hCbuff, termLine8a, sizeof(termLine8a)-1);
    1908:	8f 81       	ldd	r24, Y+7	; 0x07
    190a:	98 85       	ldd	r25, Y+8	; 0x08
    190c:	22 ec       	ldi	r18, 0xC2	; 194
    190e:	31 e0       	ldi	r19, 0x01	; 1
    1910:	b9 01       	movw	r22, r18
    1912:	44 e1       	ldi	r20, 0x14	; 20
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_8B;
    191a:	85 e1       	ldi	r24, 0x15	; 21
    191c:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1920:	1c c2       	rjmp	.+1080   	; 0x1d5a <termOutput+0x994>
        case OUTPUT_LINE_8B:
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine8b) + 2))
    1922:	8f 81       	ldd	r24, Y+7	; 0x07
    1924:	98 85       	ldd	r25, Y+8	; 0x08
    1926:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    192a:	8c 30       	cpi	r24, 0x0C	; 12
    192c:	91 05       	cpc	r25, r1
    192e:	08 f4       	brcc	.+2      	; 0x1932 <termOutput+0x56c>
    1930:	f3 c1       	rjmp	.+998    	; 0x1d18 <termOutput+0x952>
            {
                if(termData.termMode == MANUAL)
    1932:	80 91 1d 06 	lds	r24, 0x061D
    1936:	88 23       	and	r24, r24
    1938:	b9 f4       	brne	.+46     	; 0x1968 <termOutput+0x5a2>
                {
                    cbuffPutByte(hCbuff, '>');
    193a:	8f 81       	ldd	r24, Y+7	; 0x07
    193c:	98 85       	ldd	r25, Y+8	; 0x08
    193e:	6e e3       	ldi	r22, 0x3E	; 62
    1940:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
    1944:	8f 81       	ldd	r24, Y+7	; 0x07
    1946:	98 85       	ldd	r25, Y+8	; 0x08
    1948:	27 ed       	ldi	r18, 0xD7	; 215
    194a:	31 e0       	ldi	r19, 0x01	; 1
    194c:	b9 01       	movw	r22, r18
    194e:	48 e0       	ldi	r20, 0x08	; 8
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, '<');
    1956:	8f 81       	ldd	r24, Y+7	; 0x07
    1958:	98 85       	ldd	r25, Y+8	; 0x08
    195a:	6c e3       	ldi	r22, 0x3C	; 60
    195c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    termState = OUTPUT_LINE_8C;
    1960:	86 e1       	ldi	r24, 0x16	; 22
    1962:	80 93 15 06 	sts	0x0615, r24
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
                    cbuffPutByte(hCbuff, ' ');
                    termState = OUTPUT_LINE_8C;
                }        
            }    
            break;
    1966:	f9 c1       	rjmp	.+1010   	; 0x1d5a <termOutput+0x994>
                    cbuffPutByte(hCbuff, '<');
                    termState = OUTPUT_LINE_8C;
                }
                else
                {
                    cbuffPutByte(hCbuff, ' ');
    1968:	8f 81       	ldd	r24, Y+7	; 0x07
    196a:	98 85       	ldd	r25, Y+8	; 0x08
    196c:	60 e2       	ldi	r22, 0x20	; 32
    196e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
    1972:	8f 81       	ldd	r24, Y+7	; 0x07
    1974:	98 85       	ldd	r25, Y+8	; 0x08
    1976:	27 ed       	ldi	r18, 0xD7	; 215
    1978:	31 e0       	ldi	r19, 0x01	; 1
    197a:	b9 01       	movw	r22, r18
    197c:	48 e0       	ldi	r20, 0x08	; 8
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, ' ');
    1984:	8f 81       	ldd	r24, Y+7	; 0x07
    1986:	98 85       	ldd	r25, Y+8	; 0x08
    1988:	60 e2       	ldi	r22, 0x20	; 32
    198a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    termState = OUTPUT_LINE_8C;
    198e:	86 e1       	ldi	r24, 0x16	; 22
    1990:	80 93 15 06 	sts	0x0615, r24
                }        
            }    
            break;
    1994:	e2 c1       	rjmp	.+964    	; 0x1d5a <termOutput+0x994>
        case OUTPUT_LINE_8C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8c))
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    199e:	85 30       	cpi	r24, 0x05	; 5
    19a0:	91 05       	cpc	r25, r1
    19a2:	08 f4       	brcc	.+2      	; 0x19a6 <termOutput+0x5e0>
    19a4:	bb c1       	rjmp	.+886    	; 0x1d1c <termOutput+0x956>
            {
                cbuffPutArray(hCbuff, termLine8c, sizeof(termLine8c)-1);
    19a6:	8f 81       	ldd	r24, Y+7	; 0x07
    19a8:	98 85       	ldd	r25, Y+8	; 0x08
    19aa:	20 ee       	ldi	r18, 0xE0	; 224
    19ac:	31 e0       	ldi	r19, 0x01	; 1
    19ae:	b9 01       	movw	r22, r18
    19b0:	43 e0       	ldi	r20, 0x03	; 3
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_8D;
    19b8:	87 e1       	ldi	r24, 0x17	; 23
    19ba:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    19be:	cd c1       	rjmp	.+922    	; 0x1d5a <termOutput+0x994>
        case OUTPUT_LINE_8D:
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine8d) + 2 
    19c0:	8f 81       	ldd	r24, Y+7	; 0x07
    19c2:	98 85       	ldd	r25, Y+8	; 0x08
    19c4:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    19c8:	84 31       	cpi	r24, 0x14	; 20
    19ca:	91 05       	cpc	r25, r1
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <termOutput+0x60a>
    19ce:	a8 c1       	rjmp	.+848    	; 0x1d20 <termOutput+0x95a>
                                                + sizeof(termReturn)))
            {
                if(termData.termMode == AUTOMATIC)
    19d0:	80 91 1d 06 	lds	r24, 0x061D
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	01 f5       	brne	.+64     	; 0x1a18 <termOutput+0x652>
                {
                    cbuffPutByte(hCbuff, '>');
    19d8:	8f 81       	ldd	r24, Y+7	; 0x07
    19da:	98 85       	ldd	r25, Y+8	; 0x08
    19dc:	6e e3       	ldi	r22, 0x3E	; 62
    19de:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8d, sizeof(termLine8d)-1);
    19e2:	8f 81       	ldd	r24, Y+7	; 0x07
    19e4:	98 85       	ldd	r25, Y+8	; 0x08
    19e6:	24 ee       	ldi	r18, 0xE4	; 228
    19e8:	31 e0       	ldi	r19, 0x01	; 1
    19ea:	b9 01       	movw	r22, r18
    19ec:	4d e0       	ldi	r20, 0x0D	; 13
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, '<');
    19f4:	8f 81       	ldd	r24, Y+7	; 0x07
    19f6:	98 85       	ldd	r25, Y+8	; 0x08
    19f8:	6c e3       	ldi	r22, 0x3C	; 60
    19fa:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
    19fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1a00:	98 85       	ldd	r25, Y+8	; 0x08
    1a02:	21 ec       	ldi	r18, 0xC1	; 193
    1a04:	32 e0       	ldi	r19, 0x02	; 2
    1a06:	b9 01       	movw	r22, r18
    1a08:	42 e0       	ldi	r20, 0x02	; 2
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    termState = OUTPUT_LINE_9A;
    1a10:	88 e1       	ldi	r24, 0x18	; 24
    1a12:	80 93 15 06 	sts	0x0615, r24
                    cbuffPutByte(hCbuff, ' ');
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                    termState = OUTPUT_LINE_9D;
                }        
            }    
            break;
    1a16:	a1 c1       	rjmp	.+834    	; 0x1d5a <termOutput+0x994>
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                    termState = OUTPUT_LINE_9A;
                }
                else
                {
                    cbuffPutByte(hCbuff, ' ');
    1a18:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1a:	98 85       	ldd	r25, Y+8	; 0x08
    1a1c:	60 e2       	ldi	r22, 0x20	; 32
    1a1e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termLine8d, sizeof(termLine8d)-1);
    1a22:	8f 81       	ldd	r24, Y+7	; 0x07
    1a24:	98 85       	ldd	r25, Y+8	; 0x08
    1a26:	24 ee       	ldi	r18, 0xE4	; 228
    1a28:	31 e0       	ldi	r19, 0x01	; 1
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	4d e0       	ldi	r20, 0x0D	; 13
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    cbuffPutByte(hCbuff, ' ');
    1a34:	8f 81       	ldd	r24, Y+7	; 0x07
    1a36:	98 85       	ldd	r25, Y+8	; 0x08
    1a38:	60 e2       	ldi	r22, 0x20	; 32
    1a3a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
    1a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a40:	98 85       	ldd	r25, Y+8	; 0x08
    1a42:	21 ec       	ldi	r18, 0xC1	; 193
    1a44:	32 e0       	ldi	r19, 0x02	; 2
    1a46:	b9 01       	movw	r22, r18
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                    termState = OUTPUT_LINE_9D;
    1a50:	8b e1       	ldi	r24, 0x1B	; 27
    1a52:	80 93 15 06 	sts	0x0615, r24
                }        
            }    
            break;
    1a56:	81 c1       	rjmp	.+770    	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 9                      */
                                        /**************************************/
        case OUTPUT_LINE_9A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9a))
    1a58:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5a:	98 85       	ldd	r25, Y+8	; 0x08
    1a5c:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1a60:	8c 32       	cpi	r24, 0x2C	; 44
    1a62:	91 05       	cpc	r25, r1
    1a64:	08 f4       	brcc	.+2      	; 0x1a68 <termOutput+0x6a2>
    1a66:	5e c1       	rjmp	.+700    	; 0x1d24 <termOutput+0x95e>
            {
                cbuffPutArray(hCbuff, termLine9a, sizeof(termLine9a)-1);
    1a68:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6a:	98 85       	ldd	r25, Y+8	; 0x08
    1a6c:	22 ef       	ldi	r18, 0xF2	; 242
    1a6e:	31 e0       	ldi	r19, 0x01	; 1
    1a70:	b9 01       	movw	r22, r18
    1a72:	4a e2       	ldi	r20, 0x2A	; 42
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_9B;
    1a7a:	89 e1       	ldi	r24, 0x19	; 25
    1a7c:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1a80:	6c c1       	rjmp	.+728    	; 0x1d5a <termOutput+0x994>
        case OUTPUT_LINE_9B:
            if (cbuffGetSpace(hCbuff) > 1)
    1a82:	8f 81       	ldd	r24, Y+7	; 0x07
    1a84:	98 85       	ldd	r25, Y+8	; 0x08
    1a86:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	08 f4       	brcc	.+2      	; 0x1a92 <termOutput+0x6cc>
    1a90:	4b c1       	rjmp	.+662    	; 0x1d28 <termOutput+0x962>
            {
                cbuffPutByte(hCbuff, (CBUFF)termData.emptyOnBytesFree + '0');
    1a92:	80 91 1c 06 	lds	r24, 0x061C
    1a96:	28 2f       	mov	r18, r24
    1a98:	20 5d       	subi	r18, 0xD0	; 208
    1a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9c:	98 85       	ldd	r25, Y+8	; 0x08
    1a9e:	62 2f       	mov	r22, r18
    1aa0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cbuffPutByte>
                termState = OUTPUT_LINE_9C;
    1aa4:	8a e1       	ldi	r24, 0x1A	; 26
    1aa6:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1aaa:	57 c1       	rjmp	.+686    	; 0x1d5a <termOutput+0x994>
        case OUTPUT_LINE_9C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9c))
    1aac:	8f 81       	ldd	r24, Y+7	; 0x07
    1aae:	98 85       	ldd	r25, Y+8	; 0x08
    1ab0:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1ab4:	81 31       	cpi	r24, 0x11	; 17
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	08 f4       	brcc	.+2      	; 0x1abc <termOutput+0x6f6>
    1aba:	38 c1       	rjmp	.+624    	; 0x1d2c <termOutput+0x966>
            {
                cbuffPutArray(hCbuff, termLine9c, sizeof(termLine9c)-1);
    1abc:	8f 81       	ldd	r24, Y+7	; 0x07
    1abe:	98 85       	ldd	r25, Y+8	; 0x08
    1ac0:	2d e1       	ldi	r18, 0x1D	; 29
    1ac2:	32 e0       	ldi	r19, 0x02	; 2
    1ac4:	b9 01       	movw	r22, r18
    1ac6:	4f e0       	ldi	r20, 0x0F	; 15
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_11;
    1ace:	8c e1       	ldi	r24, 0x1C	; 28
    1ad0:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1ad4:	42 c1       	rjmp	.+644    	; 0x1d5a <termOutput+0x994>
        case OUTPUT_LINE_9D:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9d))
    1ad6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad8:	98 85       	ldd	r25, Y+8	; 0x08
    1ada:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1ade:	85 32       	cpi	r24, 0x25	; 37
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	08 f4       	brcc	.+2      	; 0x1ae6 <termOutput+0x720>
    1ae4:	25 c1       	rjmp	.+586    	; 0x1d30 <termOutput+0x96a>
            {
                cbuffPutArray(hCbuff, termLine9d, sizeof(termLine9d)-1);
    1ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae8:	98 85       	ldd	r25, Y+8	; 0x08
    1aea:	2d e2       	ldi	r18, 0x2D	; 45
    1aec:	32 e0       	ldi	r19, 0x02	; 2
    1aee:	b9 01       	movw	r22, r18
    1af0:	43 e2       	ldi	r20, 0x23	; 35
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_11;
    1af8:	8c e1       	ldi	r24, 0x1C	; 28
    1afa:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1afe:	2d c1       	rjmp	.+602    	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 11                     */
                                        /**************************************/
        case OUTPUT_LINE_11:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine11))
    1b00:	8f 81       	ldd	r24, Y+7	; 0x07
    1b02:	98 85       	ldd	r25, Y+8	; 0x08
    1b04:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b08:	8d 31       	cpi	r24, 0x1D	; 29
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	08 f4       	brcc	.+2      	; 0x1b10 <termOutput+0x74a>
    1b0e:	12 c1       	rjmp	.+548    	; 0x1d34 <termOutput+0x96e>
            {
                cbuffPutArray(hCbuff, termLine11, sizeof(termLine11)-1);
    1b10:	8f 81       	ldd	r24, Y+7	; 0x07
    1b12:	98 85       	ldd	r25, Y+8	; 0x08
    1b14:	21 e5       	ldi	r18, 0x51	; 81
    1b16:	32 e0       	ldi	r19, 0x02	; 2
    1b18:	b9 01       	movw	r22, r18
    1b1a:	4b e1       	ldi	r20, 0x1B	; 27
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_12A;
    1b22:	8d e1       	ldi	r24, 0x1D	; 29
    1b24:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1b28:	18 c1       	rjmp	.+560    	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 12                     */
                                        /**************************************/
        case OUTPUT_LINE_12A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12a))
    1b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2c:	98 85       	ldd	r25, Y+8	; 0x08
    1b2e:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	08 f4       	brcc	.+2      	; 0x1b3a <termOutput+0x774>
    1b38:	ff c0       	rjmp	.+510    	; 0x1d38 <termOutput+0x972>
            {
                cbuffPutArray(hCbuff, termLine12a, sizeof(termLine12a)-1);
    1b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3c:	98 85       	ldd	r25, Y+8	; 0x08
    1b3e:	2d e6       	ldi	r18, 0x6D	; 109
    1b40:	32 e0       	ldi	r19, 0x02	; 2
    1b42:	b9 01       	movw	r22, r18
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_12B;
    1b4c:	8e e1       	ldi	r24, 0x1E	; 30
    1b4e:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1b52:	03 c1       	rjmp	.+518    	; 0x1d5a <termOutput+0x994>
         case OUTPUT_LINE_12B:
            if (cbuffGetSpace(hCbuff) > 50)
    1b54:	8f 81       	ldd	r24, Y+7	; 0x07
    1b56:	98 85       	ldd	r25, Y+8	; 0x08
    1b58:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b5c:	83 33       	cpi	r24, 0x33	; 51
    1b5e:	91 05       	cpc	r25, r1
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <termOutput+0x79e>
    1b62:	ec c0       	rjmp	.+472    	; 0x1d3c <termOutput+0x976>
            {
                cbuffPutArray(hCbuff, checkBuffer, 50);
    1b64:	8f 81       	ldd	r24, Y+7	; 0x07
    1b66:	98 85       	ldd	r25, Y+8	; 0x08
    1b68:	25 e2       	ldi	r18, 0x25	; 37
    1b6a:	36 e0       	ldi	r19, 0x06	; 6
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	42 e3       	ldi	r20, 0x32	; 50
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_12C;
    1b76:	8f e1       	ldi	r24, 0x1F	; 31
    1b78:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1b7c:	ee c0       	rjmp	.+476    	; 0x1d5a <termOutput+0x994>
         case OUTPUT_LINE_12C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12c))
    1b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b80:	98 85       	ldd	r25, Y+8	; 0x08
    1b82:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1b86:	85 30       	cpi	r24, 0x05	; 5
    1b88:	91 05       	cpc	r25, r1
    1b8a:	08 f4       	brcc	.+2      	; 0x1b8e <termOutput+0x7c8>
    1b8c:	d9 c0       	rjmp	.+434    	; 0x1d40 <termOutput+0x97a>
            {
                cbuffPutArray(hCbuff, termLine12c, sizeof(termLine12c)-1);
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	98 85       	ldd	r25, Y+8	; 0x08
    1b92:	2f e6       	ldi	r18, 0x6F	; 111
    1b94:	32 e0       	ldi	r19, 0x02	; 2
    1b96:	b9 01       	movw	r22, r18
    1b98:	43 e0       	ldi	r20, 0x03	; 3
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_13A;
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1ba6:	d9 c0       	rjmp	.+434    	; 0x1d5a <termOutput+0x994>
                                        /**************************************/
                                        /* OUTPUT LINE 13                     */
                                        /**************************************/
        case OUTPUT_LINE_13A:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13a))
    1ba8:	8f 81       	ldd	r24, Y+7	; 0x07
    1baa:	98 85       	ldd	r25, Y+8	; 0x08
    1bac:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1bb0:	84 31       	cpi	r24, 0x14	; 20
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	08 f4       	brcc	.+2      	; 0x1bb8 <termOutput+0x7f2>
    1bb6:	c6 c0       	rjmp	.+396    	; 0x1d44 <termOutput+0x97e>
            {
                cbuffPutArray(hCbuff, termLine13a, sizeof(termLine13a)-1);
    1bb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bba:	98 85       	ldd	r25, Y+8	; 0x08
    1bbc:	23 e7       	ldi	r18, 0x73	; 115
    1bbe:	32 e0       	ldi	r19, 0x02	; 2
    1bc0:	b9 01       	movw	r22, r18
    1bc2:	42 e1       	ldi	r20, 0x12	; 18
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                if (termData.bufferIntegrity == INTEGRITY_OK)
    1bca:	80 91 22 06 	lds	r24, 0x0622
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	21 f4       	brne	.+8      	; 0x1bda <termOutput+0x814>
                {
                    termState = OUTPUT_LINE_13B;
    1bd2:	81 e2       	ldi	r24, 0x21	; 33
    1bd4:	80 93 15 06 	sts	0x0615, r24
                else
                {
                    termState = OUTPUT_LINE_13C;
                }    
            }    
            break;
    1bd8:	c0 c0       	rjmp	.+384    	; 0x1d5a <termOutput+0x994>
                {
                    termState = OUTPUT_LINE_13B;
                }
                else
                {
                    termState = OUTPUT_LINE_13C;
    1bda:	82 e2       	ldi	r24, 0x22	; 34
    1bdc:	80 93 15 06 	sts	0x0615, r24
                }    
            }    
            break;
    1be0:	bc c0       	rjmp	.+376    	; 0x1d5a <termOutput+0x994>
         case OUTPUT_LINE_13B:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13b))
    1be2:	8f 81       	ldd	r24, Y+7	; 0x07
    1be4:	98 85       	ldd	r25, Y+8	; 0x08
    1be6:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1bea:	8b 30       	cpi	r24, 0x0B	; 11
    1bec:	91 05       	cpc	r25, r1
    1bee:	08 f4       	brcc	.+2      	; 0x1bf2 <termOutput+0x82c>
    1bf0:	ab c0       	rjmp	.+342    	; 0x1d48 <termOutput+0x982>
            {
                cbuffPutArray(hCbuff, termLine13b, sizeof(termLine13b)-1);
    1bf2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf4:	98 85       	ldd	r25, Y+8	; 0x08
    1bf6:	26 e8       	ldi	r18, 0x86	; 134
    1bf8:	32 e0       	ldi	r19, 0x02	; 2
    1bfa:	b9 01       	movw	r22, r18
    1bfc:	49 e0       	ldi	r20, 0x09	; 9
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_13D;
    1c04:	83 e2       	ldi	r24, 0x23	; 35
    1c06:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1c0a:	a7 c0       	rjmp	.+334    	; 0x1d5a <termOutput+0x994>
         case OUTPUT_LINE_13C:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13c))
    1c0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0e:	98 85       	ldd	r25, Y+8	; 0x08
    1c10:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1c14:	8b 30       	cpi	r24, 0x0B	; 11
    1c16:	91 05       	cpc	r25, r1
    1c18:	08 f4       	brcc	.+2      	; 0x1c1c <termOutput+0x856>
    1c1a:	98 c0       	rjmp	.+304    	; 0x1d4c <termOutput+0x986>
            {
                cbuffPutArray(hCbuff, termLine13c, sizeof(termLine13c)-1);
    1c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1e:	98 85       	ldd	r25, Y+8	; 0x08
    1c20:	20 e9       	ldi	r18, 0x90	; 144
    1c22:	32 e0       	ldi	r19, 0x02	; 2
    1c24:	b9 01       	movw	r22, r18
    1c26:	49 e0       	ldi	r20, 0x09	; 9
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = OUTPUT_LINE_13D;
    1c2e:	83 e2       	ldi	r24, 0x23	; 35
    1c30:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1c34:	92 c0       	rjmp	.+292    	; 0x1d5a <termOutput+0x994>
         case OUTPUT_LINE_13D:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13d))
    1c36:	8f 81       	ldd	r24, Y+7	; 0x07
    1c38:	98 85       	ldd	r25, Y+8	; 0x08
    1c3a:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1c3e:	82 31       	cpi	r24, 0x12	; 18
    1c40:	91 05       	cpc	r25, r1
    1c42:	08 f4       	brcc	.+2      	; 0x1c46 <termOutput+0x880>
    1c44:	85 c0       	rjmp	.+266    	; 0x1d50 <termOutput+0x98a>
            {
                cbuffPutArray(hCbuff, termLine13d, sizeof(termLine13d)-1);
    1c46:	8f 81       	ldd	r24, Y+7	; 0x07
    1c48:	98 85       	ldd	r25, Y+8	; 0x08
    1c4a:	2a e9       	ldi	r18, 0x9A	; 154
    1c4c:	32 e0       	ldi	r19, 0x02	; 2
    1c4e:	b9 01       	movw	r22, r18
    1c50:	40 e1       	ldi	r20, 0x10	; 16
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                if (termData.producerSpeedTooHigh == SPEED_OK)
    1c58:	80 91 20 06 	lds	r24, 0x0620
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	21 f4       	brne	.+8      	; 0x1c68 <termOutput+0x8a2>
                {
                    termState = OUTPUT_LINE_13E;
    1c60:	84 e2       	ldi	r24, 0x24	; 36
    1c62:	80 93 15 06 	sts	0x0615, r24
                else
                {
                    termState = OUTPUT_LINE_13F;
                }
            }    
            break;
    1c66:	79 c0       	rjmp	.+242    	; 0x1d5a <termOutput+0x994>
                {
                    termState = OUTPUT_LINE_13E;
                }
                else
                {
                    termState = OUTPUT_LINE_13F;
    1c68:	85 e2       	ldi	r24, 0x25	; 37
    1c6a:	80 93 15 06 	sts	0x0615, r24
                }
            }    
            break;
    1c6e:	75 c0       	rjmp	.+234    	; 0x1d5a <termOutput+0x994>
         case OUTPUT_LINE_13E:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13e))
    1c70:	8f 81       	ldd	r24, Y+7	; 0x07
    1c72:	98 85       	ldd	r25, Y+8	; 0x08
    1c74:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1c78:	8c 30       	cpi	r24, 0x0C	; 12
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	08 f4       	brcc	.+2      	; 0x1c80 <termOutput+0x8ba>
    1c7e:	6a c0       	rjmp	.+212    	; 0x1d54 <termOutput+0x98e>
            {
                cbuffPutArray(hCbuff, termLine13e, sizeof(termLine13e)-1);
    1c80:	8f 81       	ldd	r24, Y+7	; 0x07
    1c82:	98 85       	ldd	r25, Y+8	; 0x08
    1c84:	2b ea       	ldi	r18, 0xAB	; 171
    1c86:	32 e0       	ldi	r19, 0x02	; 2
    1c88:	b9 01       	movw	r22, r18
    1c8a:	4a e0       	ldi	r20, 0x0A	; 10
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = HOME_CURSOR;
    1c92:	85 e0       	ldi	r24, 0x05	; 5
    1c94:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1c98:	60 c0       	rjmp	.+192    	; 0x1d5a <termOutput+0x994>
         case OUTPUT_LINE_13F:
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13f))
    1c9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9c:	98 85       	ldd	r25, Y+8	; 0x08
    1c9e:	0e 94 42 03 	call	0x684	; 0x684 <cbuffGetSpace>
    1ca2:	8c 30       	cpi	r24, 0x0C	; 12
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <termOutput+0x8e4>
    1ca8:	57 c0       	rjmp	.+174    	; 0x1d58 <termOutput+0x992>
            {
                cbuffPutArray(hCbuff, termLine13f, sizeof(termLine13f)-1);
    1caa:	8f 81       	ldd	r24, Y+7	; 0x07
    1cac:	98 85       	ldd	r25, Y+8	; 0x08
    1cae:	26 eb       	ldi	r18, 0xB6	; 182
    1cb0:	32 e0       	ldi	r19, 0x02	; 2
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	4a e0       	ldi	r20, 0x0A	; 10
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	0e 94 9c 05 	call	0xb38	; 0xb38 <cbuffPutArray>
                termState = HOME_CURSOR;
    1cbc:	85 e0       	ldi	r24, 0x05	; 5
    1cbe:	80 93 15 06 	sts	0x0615, r24
            }    
            break;
    1cc2:	4b c0       	rjmp	.+150    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerma))
            {
                cbuffPutArray(hCbuff, resetTerma, sizeof(resetTerma)-1);
                termState = RESET_TERMINALB;
            }    
            break;
    1cc4:	00 00       	nop
    1cc6:	49 c0       	rjmp	.+146    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
                termState = RESET_TERMINALC;
            }    
            break; 
    1cc8:	00 00       	nop
    1cca:	47 c0       	rjmp	.+142    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermc))
            {
                cbuffPutArray(hCbuff, resetTermc, sizeof(resetTermc)-1);
                termState = RESET_TERMINALD;
            }    
            break;  
    1ccc:	00 00       	nop
    1cce:	45 c0       	rjmp	.+138    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermd))
            {
                cbuffPutArray(hCbuff, resetTermd, sizeof(resetTermd)-1);
                termState = RESET_TERMINALE;
            }    
            break;   
    1cd0:	00 00       	nop
    1cd2:	43 c0       	rjmp	.+134    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTerme))
            {
                cbuffPutArray(hCbuff, resetTerme, sizeof(resetTerme)-1);
                termState = OUTPUT_LINE_1;
            }    
            break; 
    1cd4:	00 00       	nop
    1cd6:	41 c0       	rjmp	.+130    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(resetTermb))
            {
                cbuffPutArray(hCbuff, resetTermb, sizeof(resetTermb)-1);
                termState = OUTPUT_LINE_1;
            }    
            break;
    1cd8:	00 00       	nop
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > (sizeof(termLine1)))
            {
                cbuffPutArray(hCbuff, termLine1, sizeof(termLine1)-1);
                termState = OUTPUT_LINE_3A;
            }    
            break;  
    1cdc:	00 00       	nop
    1cde:	3d c0       	rjmp	.+122    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termReturn))
            {
                cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                termState = OUTPUT_LINE_3A;
            }    
            break; 
    1ce0:	00 00       	nop
    1ce2:	3b c0       	rjmp	.+118    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3a))
            {
                cbuffPutArray(hCbuff, termLine3a, sizeof(termLine3a)-1);
                termState = OUTPUT_LINE_3B;
            }    
            break; 
    1ce4:	00 00       	nop
    1ce6:	39 c0       	rjmp	.+114    	; 0x1d5a <termOutput+0x994>
                    cbuffPutByte(hCbuff, (CBUFF)(uiTemp + '0'));
                    cbuffPutByte(hCbuff, cbuffTemp + '0');
                }    
                termState = OUTPUT_LINE_3C;
            }    
            break;
    1ce8:	00 00       	nop
    1cea:	37 c0       	rjmp	.+110    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine3c))
            {
                cbuffPutArray(hCbuff, termLine3c, sizeof(termLine3c)-1);
                termState = OUTPUT_LINE_4A;
            }    
            break;
    1cec:	00 00       	nop
    1cee:	35 c0       	rjmp	.+106    	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4a))
            {
                cbuffPutArray(hCbuff, termLine4a, sizeof(termLine4a)-1);
                termState = OUTPUT_LINE_4B;
            }    
            break;
    1cf0:	00 00       	nop
    1cf2:	33 c0       	rjmp	.+102    	; 0x1d5a <termOutput+0x994>
                        cbuffPutByte(hCbuff, ' ');
                    }        
                }    
                termState = OUTPUT_LINE_4C;
            }    
            break;
    1cf4:	00 00       	nop
    1cf6:	31 c0       	rjmp	.+98     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4c))
            {
                cbuffPutArray(hCbuff, termLine4c, sizeof(termLine4c)-1);
                termState = OUTPUT_LINE_4D;
            }    
            break;
    1cf8:	00 00       	nop
    1cfa:	2f c0       	rjmp	.+94     	; 0x1d5a <termOutput+0x994>
                else
                {
                    termState = OUTPUT_LINE_4F;
                }    
            }    
            break;
    1cfc:	00 00       	nop
    1cfe:	2d c0       	rjmp	.+90     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4e))
            {
                cbuffPutArray(hCbuff, termLine4e, sizeof(termLine4e)-1);
                termState = OUTPUT_LINE_6A;
            }    
            break;
    1d00:	00 00       	nop
    1d02:	2b c0       	rjmp	.+86     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine4f))
            {
                cbuffPutArray(hCbuff, termLine4f, sizeof(termLine4f)-1);
                termState = OUTPUT_LINE_3A;
            }    
            break;
    1d04:	00 00       	nop
    1d06:	29 c0       	rjmp	.+82     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6a))
            {
                cbuffPutArray(hCbuff, termLine6a, sizeof(termLine6a)-1);
                termState = OUTPUT_LINE_6B;
            }    
            break;
    1d08:	00 00       	nop
    1d0a:	27 c0       	rjmp	.+78     	; 0x1d5a <termOutput+0x994>
                    
                    cbuffPutByte(hCbuff, cbuffUnits);
                }      
                termState = OUTPUT_LINE_6C;  
            }    
            break;
    1d0c:	00 00       	nop
    1d0e:	25 c0       	rjmp	.+74     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine6c))
            {
                cbuffPutArray(hCbuff, termLine6c, sizeof(termLine6c)-1);
                termState = OUTPUT_LINE_8A;
            }    
            break;
    1d10:	00 00       	nop
    1d12:	23 c0       	rjmp	.+70     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8a))
            {
                cbuffPutArray(hCbuff, termLine8a, sizeof(termLine8a)-1);
                termState = OUTPUT_LINE_8B;
            }    
            break;
    1d14:	00 00       	nop
    1d16:	21 c0       	rjmp	.+66     	; 0x1d5a <termOutput+0x994>
                    cbuffPutArray(hCbuff, termLine8b, sizeof(termLine8b)-1);
                    cbuffPutByte(hCbuff, ' ');
                    termState = OUTPUT_LINE_8C;
                }        
            }    
            break;
    1d18:	00 00       	nop
    1d1a:	1f c0       	rjmp	.+62     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine8c))
            {
                cbuffPutArray(hCbuff, termLine8c, sizeof(termLine8c)-1);
                termState = OUTPUT_LINE_8D;
            }    
            break;
    1d1c:	00 00       	nop
    1d1e:	1d c0       	rjmp	.+58     	; 0x1d5a <termOutput+0x994>
                    cbuffPutByte(hCbuff, ' ');
                    cbuffPutArray(hCbuff, termReturn, sizeof(termReturn)-1);
                    termState = OUTPUT_LINE_9D;
                }        
            }    
            break;
    1d20:	00 00       	nop
    1d22:	1b c0       	rjmp	.+54     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9a))
            {
                cbuffPutArray(hCbuff, termLine9a, sizeof(termLine9a)-1);
                termState = OUTPUT_LINE_9B;
            }    
            break;
    1d24:	00 00       	nop
    1d26:	19 c0       	rjmp	.+50     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > 1)
            {
                cbuffPutByte(hCbuff, (CBUFF)termData.emptyOnBytesFree + '0');
                termState = OUTPUT_LINE_9C;
            }    
            break;
    1d28:	00 00       	nop
    1d2a:	17 c0       	rjmp	.+46     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9c))
            {
                cbuffPutArray(hCbuff, termLine9c, sizeof(termLine9c)-1);
                termState = OUTPUT_LINE_11;
            }    
            break;
    1d2c:	00 00       	nop
    1d2e:	15 c0       	rjmp	.+42     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine9d))
            {
                cbuffPutArray(hCbuff, termLine9d, sizeof(termLine9d)-1);
                termState = OUTPUT_LINE_11;
            }    
            break;
    1d30:	00 00       	nop
    1d32:	13 c0       	rjmp	.+38     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine11))
            {
                cbuffPutArray(hCbuff, termLine11, sizeof(termLine11)-1);
                termState = OUTPUT_LINE_12A;
            }    
            break;
    1d34:	00 00       	nop
    1d36:	11 c0       	rjmp	.+34     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12a))
            {
                cbuffPutArray(hCbuff, termLine12a, sizeof(termLine12a)-1);
                termState = OUTPUT_LINE_12B;
            }    
            break;
    1d38:	00 00       	nop
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > 50)
            {
                cbuffPutArray(hCbuff, checkBuffer, 50);
                termState = OUTPUT_LINE_12C;
            }    
            break;
    1d3c:	00 00       	nop
    1d3e:	0d c0       	rjmp	.+26     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine12c))
            {
                cbuffPutArray(hCbuff, termLine12c, sizeof(termLine12c)-1);
                termState = OUTPUT_LINE_13A;
            }    
            break;
    1d40:	00 00       	nop
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <termOutput+0x994>
                else
                {
                    termState = OUTPUT_LINE_13C;
                }    
            }    
            break;
    1d44:	00 00       	nop
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13b))
            {
                cbuffPutArray(hCbuff, termLine13b, sizeof(termLine13b)-1);
                termState = OUTPUT_LINE_13D;
            }    
            break;
    1d48:	00 00       	nop
    1d4a:	07 c0       	rjmp	.+14     	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13c))
            {
                cbuffPutArray(hCbuff, termLine13c, sizeof(termLine13c)-1);
                termState = OUTPUT_LINE_13D;
            }    
            break;
    1d4c:	00 00       	nop
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <termOutput+0x994>
                else
                {
                    termState = OUTPUT_LINE_13F;
                }
            }    
            break;
    1d50:	00 00       	nop
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13e))
            {
                cbuffPutArray(hCbuff, termLine13e, sizeof(termLine13e)-1);
                termState = HOME_CURSOR;
            }    
            break;
    1d54:	00 00       	nop
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <termOutput+0x994>
            if (cbuffGetSpace(hCbuff) > sizeof(termLine13f))
            {
                cbuffPutArray(hCbuff, termLine13f, sizeof(termLine13f)-1);
                termState = HOME_CURSOR;
            }    
            break;
    1d58:	00 00       	nop

    }        
}
    1d5a:	28 96       	adiw	r28, 0x08	; 8
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <termUpdateBytesInBuffer>:

void termUpdateBytesInBuffer(unsigned int noOfBytes)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <termUpdateBytesInBuffer+0x6>
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    termData.bytesInBuffer = noOfBytes;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	90 93 17 06 	sts	0x0617, r25
    1d82:	80 93 16 06 	sts	0x0616, r24
    
    termData.fillBarLength = (unsigned char) ((float)noOfBytes * 1.45);
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8a:	cc 01       	movw	r24, r24
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__floatunsisf>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	2a e9       	ldi	r18, 0x9A	; 154
    1da2:	39 e9       	ldi	r19, 0x99	; 153
    1da4:	49 eb       	ldi	r20, 0xB9	; 185
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 df 11 	call	0x23be	; 0x23be <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 0b 10 	call	0x2016	; 0x2016 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	80 93 1a 06 	sts	0x061A, r24
    
    //termData.fillBarLength = (unsigned char) ((noOfBytes * 15)/10);
    
    termData.percentFilled = noOfBytes * 2;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	88 0f       	add	r24, r24
    1dc4:	80 93 1b 06 	sts	0x061B, r24
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <termSetFillRate>:

void termSetFillRate(unsigned int fillRate)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <termSetFillRate+0x6>
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
    if (fillRate <=1)
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	9a 81       	ldd	r25, Y+2	; 0x02
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	91 05       	cpc	r25, r1
    1de8:	28 f4       	brcc	.+10     	; 0x1df4 <termSetFillRate+0x22>
    {
        fillRate = 1;   
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	09 c0       	rjmp	.+18     	; 0x1e06 <termSetFillRate+0x34>
    }    
    else if (fillRate >= 99)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	83 36       	cpi	r24, 0x63	; 99
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	20 f0       	brcs	.+8      	; 0x1e06 <termSetFillRate+0x34>
    {
        fillRate = 99;
    1dfe:	83 e6       	ldi	r24, 0x63	; 99
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    }
    termData.fillRate = fillRate;
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	90 93 19 06 	sts	0x0619, r25
    1e0e:	80 93 18 06 	sts	0x0618, r24
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <termGetFillRate>:

unsigned int termGetFillRate(void)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    return termData.fillRate;
    1e24:	80 91 18 06 	lds	r24, 0x0618
    1e28:	90 91 19 06 	lds	r25, 0x0619
}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <termSetBufferEmptyMode>:

void termSetBufferEmptyMode(char mode)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    if (mode == 'M' || mode == 'm')
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	8d 34       	cpi	r24, 0x4D	; 77
    1e42:	19 f0       	breq	.+6      	; 0x1e4a <termSetBufferEmptyMode+0x18>
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	8d 36       	cpi	r24, 0x6D	; 109
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <termSetBufferEmptyMode+0x1e>
    {
        termData.termMode = MANUAL;
    1e4a:	10 92 1d 06 	sts	0x061D, r1
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <termSetBufferEmptyMode+0x30>
    }    
    else if (mode == 'A' || mode == 'a')
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	81 34       	cpi	r24, 0x41	; 65
    1e54:	19 f0       	breq	.+6      	; 0x1e5c <termSetBufferEmptyMode+0x2a>
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	81 36       	cpi	r24, 0x61	; 97
    1e5a:	19 f4       	brne	.+6      	; 0x1e62 <termSetBufferEmptyMode+0x30>
    {
        termData.termMode = AUTOMATIC;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	80 93 1d 06 	sts	0x061D, r24
    }    
}
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <termGetEmptyTrigger>:

int termGetEmptyTrigger(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    return (int) termData.emptyOnBytesFree;    
    1e72:	80 91 1c 06 	lds	r24, 0x061C
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <termSetEmptyTrigger>:

void termSetEmptyTrigger(char triggerNumber)
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    termData.emptyOnBytesFree = (unsigned char) triggerNumber - '0';
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	80 53       	subi	r24, 0x30	; 48
    1e90:	80 93 1c 06 	sts	0x061C, r24
}    
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <termCheckBuffer>:
    
void  termCheckBuffer(HCBUFF hCbuff)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <termCheckBuffer+0x6>
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <termCheckBuffer+0x8>
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <termCheckBuffer+0xa>
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    unsigned int    bufferCount;
    unsigned int    loopCount;

                                        /* Clear buffer                       */
    for (loopCount = 0; loopCount < 50; loopCount++)
    1eae:	1a 82       	std	Y+2, r1	; 0x02
    1eb0:	19 82       	std	Y+1, r1	; 0x01
    1eb2:	0c c0       	rjmp	.+24     	; 0x1ecc <termCheckBuffer+0x30>
    {
        checkBuffer[loopCount] = ' ';
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	8b 5d       	subi	r24, 0xDB	; 219
    1eba:	99 4f       	sbci	r25, 0xF9	; 249
    1ebc:	20 e2       	ldi	r18, 0x20	; 32
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	20 83       	st	Z, r18
{
    unsigned int    bufferCount;
    unsigned int    loopCount;

                                        /* Clear buffer                       */
    for (loopCount = 0; loopCount < 50; loopCount++)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	82 33       	cpi	r24, 0x32	; 50
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	78 f3       	brcs	.-34     	; 0x1eb4 <termCheckBuffer+0x18>
    {
        checkBuffer[loopCount] = ' ';
    }    
                                        /* Get data out of the buffer         */
    bufferCount = cbuffGetArray(hCbuff, checkBuffer, 50);
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	25 e2       	ldi	r18, 0x25	; 37
    1edc:	36 e0       	ldi	r19, 0x06	; 6
    1ede:	b9 01       	movw	r22, r18
    1ee0:	42 e3       	ldi	r20, 0x32	; 50
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <cbuffGetArray>
    1ee8:	9c 83       	std	Y+4, r25	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03

                                        /* If this is the first time we have  */
                                        /* emptied the buffer, there is no    */
                                        /* data-loss check                    */
    if(termData.oldLastChar == 0)
    1eec:	80 91 21 06 	lds	r24, 0x0621
    1ef0:	88 23       	and	r24, r24
    1ef2:	51 f4       	brne	.+20     	; 0x1f08 <termCheckBuffer+0x6c>
    {
        termData.oldLastChar = checkBuffer[bufferCount-1];
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	8b 5d       	subi	r24, 0xDB	; 219
    1efc:	99 4f       	sbci	r25, 0xF9	; 249
    1efe:	fc 01       	movw	r30, r24
    1f00:	80 81       	ld	r24, Z
    1f02:	80 93 21 06 	sts	0x0621, r24
    1f06:	22 c0       	rjmp	.+68     	; 0x1f4c <termCheckBuffer+0xb0>
                                        /* data lost from the producer during */
                                        /* between buffer emptying. The data  */
                                        /* always increments from A - Z       */
    else
    {
        if (termData.oldLastChar == 'Z')
    1f08:	80 91 21 06 	lds	r24, 0x0621
    1f0c:	8a 35       	cpi	r24, 0x5A	; 90
    1f0e:	19 f4       	brne	.+6      	; 0x1f16 <termCheckBuffer+0x7a>
        {
            termData.oldLastChar = 'A' - 1;   
    1f10:	80 e4       	ldi	r24, 0x40	; 64
    1f12:	80 93 21 06 	sts	0x0621, r24
        }    
        if (checkBuffer[0] != termData.oldLastChar + 1)
    1f16:	80 91 25 06 	lds	r24, 0x0625
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	80 91 21 06 	lds	r24, 0x0621
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	28 17       	cp	r18, r24
    1f2a:	39 07       	cpc	r19, r25
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <termCheckBuffer+0x98>
        {
            termData.producerSpeedTooHigh = TOO_HIGH; 
    1f2e:	10 92 20 06 	sts	0x0620, r1
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <termCheckBuffer+0x9e>
        }    
        else
        {
            termData.producerSpeedTooHigh = SPEED_OK;   
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 20 06 	sts	0x0620, r24
        }
        
        termData.oldLastChar = checkBuffer[bufferCount-1];    
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	8b 5d       	subi	r24, 0xDB	; 219
    1f42:	99 4f       	sbci	r25, 0xF9	; 249
    1f44:	fc 01       	movw	r30, r24
    1f46:	80 81       	ld	r24, Z
    1f48:	80 93 21 06 	sts	0x0621, r24
    }    
                                        /* Here we check for buffer integrity */
                                        /* to make sure that the data really  */
                                        /* got put into the buffer in order   */
                                        /* from A-Z as we expected            */
    termData.bufferIntegrity = INTEGRITY_OK;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	80 93 22 06 	sts	0x0622, r24
    
    for (loopCount = 0; loopCount < (bufferCount-1); loopCount ++)
    1f52:	1a 82       	std	Y+2, r1	; 0x02
    1f54:	19 82       	std	Y+1, r1	; 0x01
    1f56:	30 c0       	rjmp	.+96     	; 0x1fb8 <termCheckBuffer+0x11c>
    {
                                        /* Make sure each byte in the buffer  */
                                        /* is equal to the next byte - 1      */        
        if (checkBuffer[loopCount] != 'Z')
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	8b 5d       	subi	r24, 0xDB	; 219
    1f5e:	99 4f       	sbci	r25, 0xF9	; 249
    1f60:	fc 01       	movw	r30, r24
    1f62:	80 81       	ld	r24, Z
    1f64:	8a 35       	cpi	r24, 0x5A	; 90
    1f66:	c1 f0       	breq	.+48     	; 0x1f98 <termCheckBuffer+0xfc>
        {
            if (checkBuffer[loopCount] != (checkBuffer[loopCount+1] - 1) )
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6c:	8b 5d       	subi	r24, 0xDB	; 219
    1f6e:	99 4f       	sbci	r25, 0xF9	; 249
    1f70:	fc 01       	movw	r30, r24
    1f72:	80 81       	ld	r24, Z
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	8b 5d       	subi	r24, 0xDB	; 219
    1f80:	99 4f       	sbci	r25, 0xF9	; 249
    1f82:	fc 01       	movw	r30, r24
    1f84:	80 81       	ld	r24, Z
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	28 17       	cp	r18, r24
    1f8e:	39 07       	cpc	r19, r25
    1f90:	71 f0       	breq	.+28     	; 0x1fae <termCheckBuffer+0x112>
            {
                termData.bufferIntegrity = INTEGRITY_ERROR;
    1f92:	10 92 22 06 	sts	0x0622, r1
    1f96:	0b c0       	rjmp	.+22     	; 0x1fae <termCheckBuffer+0x112>
                                        /* Unless the byte is 'Z'; then       */
                                        /* simply check if the next byte is   */
                                        /* 'A'                                */
        else
        {
            if (checkBuffer[loopCount+1] != 'A')
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	8b 5d       	subi	r24, 0xDB	; 219
    1fa0:	99 4f       	sbci	r25, 0xF9	; 249
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	80 81       	ld	r24, Z
    1fa6:	81 34       	cpi	r24, 0x41	; 65
    1fa8:	11 f0       	breq	.+4      	; 0x1fae <termCheckBuffer+0x112>
            {
                termData.bufferIntegrity = INTEGRITY_ERROR;
    1faa:	10 92 22 06 	sts	0x0622, r1
                                        /* to make sure that the data really  */
                                        /* got put into the buffer in order   */
                                        /* from A-Z as we expected            */
    termData.bufferIntegrity = INTEGRITY_OK;
    
    for (loopCount = 0; loopCount < (bufferCount-1); loopCount ++)
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	21 50       	subi	r18, 0x01	; 1
    1fc0:	30 40       	sbci	r19, 0x00	; 0
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	82 17       	cp	r24, r18
    1fc8:	93 07       	cpc	r25, r19
    1fca:	30 f2       	brcs	.-116    	; 0x1f58 <termCheckBuffer+0xbc>
                termData.bufferIntegrity = INTEGRITY_ERROR;
            }
        }    
    }
    
}   
    1fcc:	26 96       	adiw	r28, 0x06	; 6
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <termIsAutomatic>:

unsigned char termIsAutomatic(void)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    return (unsigned char) termData.termMode;
    1fe6:	80 91 1d 06 	lds	r24, 0x061D
}
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <termRestartTerminal>:

void termRestartTerminal (void)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    restartTerm = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	80 93 24 06 	sts	0x0624, r24
}    
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <termFullScreenUpdate>:

void termFullScreenUpdate(void)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    termData.termFullScreenUpdate = FULLSCREEN_YES;
    200c:	10 92 23 06 	sts	0x0623, r1
}    
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <__fixunssfsi>:
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	7b 01       	movw	r14, r22
    2020:	8c 01       	movw	r16, r24
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	5f e4       	ldi	r21, 0x4F	; 79
    202a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__gesf2>
    202e:	87 fd       	sbrc	r24, 7
    2030:	11 c0       	rjmp	.+34     	; 0x2054 <__fixunssfsi+0x3e>
    2032:	c8 01       	movw	r24, r16
    2034:	b7 01       	movw	r22, r14
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	5f e4       	ldi	r21, 0x4F	; 79
    203e:	0e 94 ae 11 	call	0x235c	; 0x235c <__subsf3>
    2042:	0e 94 09 13 	call	0x2612	; 0x2612 <__fixsfsi>
    2046:	9b 01       	movw	r18, r22
    2048:	ac 01       	movw	r20, r24
    204a:	20 50       	subi	r18, 0x00	; 0
    204c:	30 40       	sbci	r19, 0x00	; 0
    204e:	40 40       	sbci	r20, 0x00	; 0
    2050:	50 48       	sbci	r21, 0x80	; 128
    2052:	06 c0       	rjmp	.+12     	; 0x2060 <__fixunssfsi+0x4a>
    2054:	c8 01       	movw	r24, r16
    2056:	b7 01       	movw	r22, r14
    2058:	0e 94 09 13 	call	0x2612	; 0x2612 <__fixsfsi>
    205c:	9b 01       	movw	r18, r22
    205e:	ac 01       	movw	r20, r24
    2060:	b9 01       	movw	r22, r18
    2062:	ca 01       	movw	r24, r20
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	08 95       	ret

0000206e <_fpadd_parts>:
    206e:	a0 e0       	ldi	r26, 0x00	; 0
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	ed e3       	ldi	r30, 0x3D	; 61
    2074:	f0 e1       	ldi	r31, 0x10	; 16
    2076:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <__prologue_saves__+0x8>
    207a:	fc 01       	movw	r30, r24
    207c:	ea 01       	movw	r28, r20
    207e:	80 81       	ld	r24, Z
    2080:	82 30       	cpi	r24, 0x02	; 2
    2082:	08 f4       	brcc	.+2      	; 0x2086 <_fpadd_parts+0x18>
    2084:	38 c1       	rjmp	.+624    	; 0x22f6 <_fpadd_parts+0x288>
    2086:	db 01       	movw	r26, r22
    2088:	9c 91       	ld	r25, X
    208a:	92 30       	cpi	r25, 0x02	; 2
    208c:	08 f4       	brcc	.+2      	; 0x2090 <_fpadd_parts+0x22>
    208e:	30 c1       	rjmp	.+608    	; 0x22f0 <_fpadd_parts+0x282>
    2090:	84 30       	cpi	r24, 0x04	; 4
    2092:	59 f4       	brne	.+22     	; 0x20aa <_fpadd_parts+0x3c>
    2094:	94 30       	cpi	r25, 0x04	; 4
    2096:	09 f0       	breq	.+2      	; 0x209a <_fpadd_parts+0x2c>
    2098:	2e c1       	rjmp	.+604    	; 0x22f6 <_fpadd_parts+0x288>
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	8c 91       	ld	r24, X
    20a0:	11 97       	sbiw	r26, 0x01	; 1
    20a2:	98 17       	cp	r25, r24
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <_fpadd_parts+0x3a>
    20a6:	21 c1       	rjmp	.+578    	; 0x22ea <_fpadd_parts+0x27c>
    20a8:	26 c1       	rjmp	.+588    	; 0x22f6 <_fpadd_parts+0x288>
    20aa:	94 30       	cpi	r25, 0x04	; 4
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <_fpadd_parts+0x42>
    20ae:	20 c1       	rjmp	.+576    	; 0x22f0 <_fpadd_parts+0x282>
    20b0:	92 30       	cpi	r25, 0x02	; 2
    20b2:	b1 f4       	brne	.+44     	; 0x20e0 <_fpadd_parts+0x72>
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	09 f0       	breq	.+2      	; 0x20ba <_fpadd_parts+0x4c>
    20b8:	1e c1       	rjmp	.+572    	; 0x22f6 <_fpadd_parts+0x288>
    20ba:	ca 01       	movw	r24, r20
    20bc:	af 01       	movw	r20, r30
    20be:	28 e0       	ldi	r18, 0x08	; 8
    20c0:	da 01       	movw	r26, r20
    20c2:	0d 90       	ld	r0, X+
    20c4:	ad 01       	movw	r20, r26
    20c6:	dc 01       	movw	r26, r24
    20c8:	0d 92       	st	X+, r0
    20ca:	cd 01       	movw	r24, r26
    20cc:	21 50       	subi	r18, 0x01	; 1
    20ce:	c1 f7       	brne	.-16     	; 0x20c0 <_fpadd_parts+0x52>
    20d0:	db 01       	movw	r26, r22
    20d2:	11 96       	adiw	r26, 0x01	; 1
    20d4:	8c 91       	ld	r24, X
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	89 23       	and	r24, r25
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	0a c1       	rjmp	.+532    	; 0x22f4 <_fpadd_parts+0x286>
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <_fpadd_parts+0x78>
    20e4:	05 c1       	rjmp	.+522    	; 0x22f0 <_fpadd_parts+0x282>
    20e6:	c2 80       	ldd	r12, Z+2	; 0x02
    20e8:	d3 80       	ldd	r13, Z+3	; 0x03
    20ea:	db 01       	movw	r26, r22
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	6d 90       	ld	r6, X+
    20f0:	7c 90       	ld	r7, X
    20f2:	13 97       	sbiw	r26, 0x03	; 3
    20f4:	24 81       	ldd	r18, Z+4	; 0x04
    20f6:	35 81       	ldd	r19, Z+5	; 0x05
    20f8:	46 81       	ldd	r20, Z+6	; 0x06
    20fa:	57 81       	ldd	r21, Z+7	; 0x07
    20fc:	14 96       	adiw	r26, 0x04	; 4
    20fe:	ed 90       	ld	r14, X+
    2100:	fd 90       	ld	r15, X+
    2102:	0d 91       	ld	r16, X+
    2104:	1c 91       	ld	r17, X
    2106:	17 97       	sbiw	r26, 0x07	; 7
    2108:	c6 01       	movw	r24, r12
    210a:	86 19       	sub	r24, r6
    210c:	97 09       	sbc	r25, r7
    210e:	5c 01       	movw	r10, r24
    2110:	97 ff       	sbrs	r25, 7
    2112:	04 c0       	rjmp	.+8      	; 0x211c <_fpadd_parts+0xae>
    2114:	aa 24       	eor	r10, r10
    2116:	bb 24       	eor	r11, r11
    2118:	a8 1a       	sub	r10, r24
    211a:	b9 0a       	sbc	r11, r25
    211c:	b0 e2       	ldi	r27, 0x20	; 32
    211e:	ab 16       	cp	r10, r27
    2120:	b1 04       	cpc	r11, r1
    2122:	0c f0       	brlt	.+2      	; 0x2126 <_fpadd_parts+0xb8>
    2124:	61 c0       	rjmp	.+194    	; 0x21e8 <_fpadd_parts+0x17a>
    2126:	18 16       	cp	r1, r24
    2128:	19 06       	cpc	r1, r25
    212a:	6c f5       	brge	.+90     	; 0x2186 <_fpadd_parts+0x118>
    212c:	37 01       	movw	r6, r14
    212e:	48 01       	movw	r8, r16
    2130:	0a 2c       	mov	r0, r10
    2132:	04 c0       	rjmp	.+8      	; 0x213c <_fpadd_parts+0xce>
    2134:	96 94       	lsr	r9
    2136:	87 94       	ror	r8
    2138:	77 94       	ror	r7
    213a:	67 94       	ror	r6
    213c:	0a 94       	dec	r0
    213e:	d2 f7       	brpl	.-12     	; 0x2134 <_fpadd_parts+0xc6>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e0       	ldi	r26, 0x00	; 0
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	0a 2c       	mov	r0, r10
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <_fpadd_parts+0xe6>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	aa 1f       	adc	r26, r26
    2152:	bb 1f       	adc	r27, r27
    2154:	0a 94       	dec	r0
    2156:	d2 f7       	brpl	.-12     	; 0x214c <_fpadd_parts+0xde>
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	a1 09       	sbc	r26, r1
    215c:	b1 09       	sbc	r27, r1
    215e:	8e 21       	and	r24, r14
    2160:	9f 21       	and	r25, r15
    2162:	a0 23       	and	r26, r16
    2164:	b1 23       	and	r27, r17
    2166:	ee 24       	eor	r14, r14
    2168:	ff 24       	eor	r15, r15
    216a:	87 01       	movw	r16, r14
    216c:	e3 94       	inc	r14
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	a1 05       	cpc	r26, r1
    2172:	b1 05       	cpc	r27, r1
    2174:	19 f4       	brne	.+6      	; 0x217c <_fpadd_parts+0x10e>
    2176:	ee 24       	eor	r14, r14
    2178:	ff 24       	eor	r15, r15
    217a:	87 01       	movw	r16, r14
    217c:	e6 28       	or	r14, r6
    217e:	f7 28       	or	r15, r7
    2180:	08 29       	or	r16, r8
    2182:	19 29       	or	r17, r9
    2184:	3c c0       	rjmp	.+120    	; 0x21fe <_fpadd_parts+0x190>
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	d1 f1       	breq	.+116    	; 0x21fe <_fpadd_parts+0x190>
    218a:	ca 0c       	add	r12, r10
    218c:	db 1c       	adc	r13, r11
    218e:	39 01       	movw	r6, r18
    2190:	4a 01       	movw	r8, r20
    2192:	0a 2c       	mov	r0, r10
    2194:	04 c0       	rjmp	.+8      	; 0x219e <_fpadd_parts+0x130>
    2196:	96 94       	lsr	r9
    2198:	87 94       	ror	r8
    219a:	77 94       	ror	r7
    219c:	67 94       	ror	r6
    219e:	0a 94       	dec	r0
    21a0:	d2 f7       	brpl	.-12     	; 0x2196 <_fpadd_parts+0x128>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e0       	ldi	r26, 0x00	; 0
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	0a 2c       	mov	r0, r10
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <_fpadd_parts+0x148>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	aa 1f       	adc	r26, r26
    21b4:	bb 1f       	adc	r27, r27
    21b6:	0a 94       	dec	r0
    21b8:	d2 f7       	brpl	.-12     	; 0x21ae <_fpadd_parts+0x140>
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	a1 09       	sbc	r26, r1
    21be:	b1 09       	sbc	r27, r1
    21c0:	82 23       	and	r24, r18
    21c2:	93 23       	and	r25, r19
    21c4:	a4 23       	and	r26, r20
    21c6:	b5 23       	and	r27, r21
    21c8:	21 e0       	ldi	r18, 0x01	; 1
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	a1 05       	cpc	r26, r1
    21d4:	b1 05       	cpc	r27, r1
    21d6:	19 f4       	brne	.+6      	; 0x21de <_fpadd_parts+0x170>
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	a9 01       	movw	r20, r18
    21de:	26 29       	or	r18, r6
    21e0:	37 29       	or	r19, r7
    21e2:	48 29       	or	r20, r8
    21e4:	59 29       	or	r21, r9
    21e6:	0b c0       	rjmp	.+22     	; 0x21fe <_fpadd_parts+0x190>
    21e8:	6c 14       	cp	r6, r12
    21ea:	7d 04       	cpc	r7, r13
    21ec:	24 f4       	brge	.+8      	; 0x21f6 <_fpadd_parts+0x188>
    21ee:	ee 24       	eor	r14, r14
    21f0:	ff 24       	eor	r15, r15
    21f2:	87 01       	movw	r16, r14
    21f4:	04 c0       	rjmp	.+8      	; 0x21fe <_fpadd_parts+0x190>
    21f6:	63 01       	movw	r12, r6
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	a9 01       	movw	r20, r18
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	fb 01       	movw	r30, r22
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	89 17       	cp	r24, r25
    2206:	09 f4       	brne	.+2      	; 0x220a <_fpadd_parts+0x19c>
    2208:	45 c0       	rjmp	.+138    	; 0x2294 <_fpadd_parts+0x226>
    220a:	88 23       	and	r24, r24
    220c:	49 f0       	breq	.+18     	; 0x2220 <_fpadd_parts+0x1b2>
    220e:	d8 01       	movw	r26, r16
    2210:	c7 01       	movw	r24, r14
    2212:	82 1b       	sub	r24, r18
    2214:	93 0b       	sbc	r25, r19
    2216:	a4 0b       	sbc	r26, r20
    2218:	b5 0b       	sbc	r27, r21
    221a:	9c 01       	movw	r18, r24
    221c:	ad 01       	movw	r20, r26
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <_fpadd_parts+0x1ba>
    2220:	2e 19       	sub	r18, r14
    2222:	3f 09       	sbc	r19, r15
    2224:	40 0b       	sbc	r20, r16
    2226:	51 0b       	sbc	r21, r17
    2228:	57 fd       	sbrc	r21, 7
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <_fpadd_parts+0x1c6>
    222c:	19 82       	std	Y+1, r1	; 0x01
    222e:	db 82       	std	Y+3, r13	; 0x03
    2230:	ca 82       	std	Y+2, r12	; 0x02
    2232:	0b c0       	rjmp	.+22     	; 0x224a <_fpadd_parts+0x1dc>
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	db 82       	std	Y+3, r13	; 0x03
    223a:	ca 82       	std	Y+2, r12	; 0x02
    223c:	50 95       	com	r21
    223e:	40 95       	com	r20
    2240:	30 95       	com	r19
    2242:	21 95       	neg	r18
    2244:	3f 4f       	sbci	r19, 0xFF	; 255
    2246:	4f 4f       	sbci	r20, 0xFF	; 255
    2248:	5f 4f       	sbci	r21, 0xFF	; 255
    224a:	2c 83       	std	Y+4, r18	; 0x04
    224c:	3d 83       	std	Y+5, r19	; 0x05
    224e:	4e 83       	std	Y+6, r20	; 0x06
    2250:	5f 83       	std	Y+7, r21	; 0x07
    2252:	0d c0       	rjmp	.+26     	; 0x226e <_fpadd_parts+0x200>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	aa 1f       	adc	r26, r26
    225a:	bb 1f       	adc	r27, r27
    225c:	8c 83       	std	Y+4, r24	; 0x04
    225e:	9d 83       	std	Y+5, r25	; 0x05
    2260:	ae 83       	std	Y+6, r26	; 0x06
    2262:	bf 83       	std	Y+7, r27	; 0x07
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9b 83       	std	Y+3, r25	; 0x03
    226c:	8a 83       	std	Y+2, r24	; 0x02
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	ae 81       	ldd	r26, Y+6	; 0x06
    2274:	bf 81       	ldd	r27, Y+7	; 0x07
    2276:	9c 01       	movw	r18, r24
    2278:	ad 01       	movw	r20, r26
    227a:	21 50       	subi	r18, 0x01	; 1
    227c:	30 40       	sbci	r19, 0x00	; 0
    227e:	40 40       	sbci	r20, 0x00	; 0
    2280:	50 40       	sbci	r21, 0x00	; 0
    2282:	2f 3f       	cpi	r18, 0xFF	; 255
    2284:	ef ef       	ldi	r30, 0xFF	; 255
    2286:	3e 07       	cpc	r19, r30
    2288:	ef ef       	ldi	r30, 0xFF	; 255
    228a:	4e 07       	cpc	r20, r30
    228c:	ef e3       	ldi	r30, 0x3F	; 63
    228e:	5e 07       	cpc	r21, r30
    2290:	08 f3       	brcs	.-62     	; 0x2254 <_fpadd_parts+0x1e6>
    2292:	0b c0       	rjmp	.+22     	; 0x22aa <_fpadd_parts+0x23c>
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	db 82       	std	Y+3, r13	; 0x03
    2298:	ca 82       	std	Y+2, r12	; 0x02
    229a:	2e 0d       	add	r18, r14
    229c:	3f 1d       	adc	r19, r15
    229e:	40 1f       	adc	r20, r16
    22a0:	51 1f       	adc	r21, r17
    22a2:	2c 83       	std	Y+4, r18	; 0x04
    22a4:	3d 83       	std	Y+5, r19	; 0x05
    22a6:	4e 83       	std	Y+6, r20	; 0x06
    22a8:	5f 83       	std	Y+7, r21	; 0x07
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	88 83       	st	Y, r24
    22ae:	2c 81       	ldd	r18, Y+4	; 0x04
    22b0:	3d 81       	ldd	r19, Y+5	; 0x05
    22b2:	4e 81       	ldd	r20, Y+6	; 0x06
    22b4:	5f 81       	ldd	r21, Y+7	; 0x07
    22b6:	57 ff       	sbrs	r21, 7
    22b8:	1d c0       	rjmp	.+58     	; 0x22f4 <_fpadd_parts+0x286>
    22ba:	da 01       	movw	r26, r20
    22bc:	c9 01       	movw	r24, r18
    22be:	81 70       	andi	r24, 0x01	; 1
    22c0:	90 70       	andi	r25, 0x00	; 0
    22c2:	a0 70       	andi	r26, 0x00	; 0
    22c4:	b0 70       	andi	r27, 0x00	; 0
    22c6:	56 95       	lsr	r21
    22c8:	47 95       	ror	r20
    22ca:	37 95       	ror	r19
    22cc:	27 95       	ror	r18
    22ce:	82 2b       	or	r24, r18
    22d0:	93 2b       	or	r25, r19
    22d2:	a4 2b       	or	r26, r20
    22d4:	b5 2b       	or	r27, r21
    22d6:	8c 83       	std	Y+4, r24	; 0x04
    22d8:	9d 83       	std	Y+5, r25	; 0x05
    22da:	ae 83       	std	Y+6, r26	; 0x06
    22dc:	bf 83       	std	Y+7, r27	; 0x07
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	9b 83       	std	Y+3, r25	; 0x03
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	05 c0       	rjmp	.+10     	; 0x22f4 <_fpadd_parts+0x286>
    22ea:	e4 ec       	ldi	r30, 0xC4	; 196
    22ec:	f2 e0       	ldi	r31, 0x02	; 2
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <_fpadd_parts+0x288>
    22f0:	fb 01       	movw	r30, r22
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <_fpadd_parts+0x288>
    22f4:	fe 01       	movw	r30, r28
    22f6:	cf 01       	movw	r24, r30
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	ee e0       	ldi	r30, 0x0E	; 14
    22fe:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__epilogue_restores__+0x8>

00002302 <__addsf3>:
    2302:	a0 e2       	ldi	r26, 0x20	; 32
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e7 e8       	ldi	r30, 0x87	; 135
    2308:	f1 e1       	ldi	r31, 0x11	; 17
    230a:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
    230e:	69 83       	std	Y+1, r22	; 0x01
    2310:	7a 83       	std	Y+2, r23	; 0x02
    2312:	8b 83       	std	Y+3, r24	; 0x03
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	2d 83       	std	Y+5, r18	; 0x05
    2318:	3e 83       	std	Y+6, r19	; 0x06
    231a:	4f 83       	std	Y+7, r20	; 0x07
    231c:	58 87       	std	Y+8, r21	; 0x08
    231e:	89 e0       	ldi	r24, 0x09	; 9
    2320:	e8 2e       	mov	r14, r24
    2322:	f1 2c       	mov	r15, r1
    2324:	ec 0e       	add	r14, r28
    2326:	fd 1e       	adc	r15, r29
    2328:	ce 01       	movw	r24, r28
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	b7 01       	movw	r22, r14
    232e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    2332:	8e 01       	movw	r16, r28
    2334:	0f 5e       	subi	r16, 0xEF	; 239
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	ce 01       	movw	r24, r28
    233a:	05 96       	adiw	r24, 0x05	; 5
    233c:	b8 01       	movw	r22, r16
    233e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    2342:	c7 01       	movw	r24, r14
    2344:	b8 01       	movw	r22, r16
    2346:	ae 01       	movw	r20, r28
    2348:	47 5e       	subi	r20, 0xE7	; 231
    234a:	5f 4f       	sbci	r21, 0xFF	; 255
    234c:	0e 94 37 10 	call	0x206e	; 0x206e <_fpadd_parts>
    2350:	0e 94 2d 14 	call	0x285a	; 0x285a <__pack_f>
    2354:	a0 96       	adiw	r28, 0x20	; 32
    2356:	e6 e0       	ldi	r30, 0x06	; 6
    2358:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

0000235c <__subsf3>:
    235c:	a0 e2       	ldi	r26, 0x20	; 32
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e4 eb       	ldi	r30, 0xB4	; 180
    2362:	f1 e1       	ldi	r31, 0x11	; 17
    2364:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
    2368:	69 83       	std	Y+1, r22	; 0x01
    236a:	7a 83       	std	Y+2, r23	; 0x02
    236c:	8b 83       	std	Y+3, r24	; 0x03
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	2d 83       	std	Y+5, r18	; 0x05
    2372:	3e 83       	std	Y+6, r19	; 0x06
    2374:	4f 83       	std	Y+7, r20	; 0x07
    2376:	58 87       	std	Y+8, r21	; 0x08
    2378:	8e 01       	movw	r16, r28
    237a:	07 5f       	subi	r16, 0xF7	; 247
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	ce 01       	movw	r24, r28
    2380:	01 96       	adiw	r24, 0x01	; 1
    2382:	b8 01       	movw	r22, r16
    2384:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    2388:	91 e1       	ldi	r25, 0x11	; 17
    238a:	e9 2e       	mov	r14, r25
    238c:	f1 2c       	mov	r15, r1
    238e:	ec 0e       	add	r14, r28
    2390:	fd 1e       	adc	r15, r29
    2392:	ce 01       	movw	r24, r28
    2394:	05 96       	adiw	r24, 0x05	; 5
    2396:	b7 01       	movw	r22, r14
    2398:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    239c:	8a 89       	ldd	r24, Y+18	; 0x12
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	89 27       	eor	r24, r25
    23a2:	8a 8b       	std	Y+18, r24	; 0x12
    23a4:	c8 01       	movw	r24, r16
    23a6:	b7 01       	movw	r22, r14
    23a8:	ae 01       	movw	r20, r28
    23aa:	47 5e       	subi	r20, 0xE7	; 231
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	0e 94 37 10 	call	0x206e	; 0x206e <_fpadd_parts>
    23b2:	0e 94 2d 14 	call	0x285a	; 0x285a <__pack_f>
    23b6:	a0 96       	adiw	r28, 0x20	; 32
    23b8:	e6 e0       	ldi	r30, 0x06	; 6
    23ba:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

000023be <__mulsf3>:
    23be:	a0 e2       	ldi	r26, 0x20	; 32
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e5 ee       	ldi	r30, 0xE5	; 229
    23c4:	f1 e1       	ldi	r31, 0x11	; 17
    23c6:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__prologue_saves__>
    23ca:	69 83       	std	Y+1, r22	; 0x01
    23cc:	7a 83       	std	Y+2, r23	; 0x02
    23ce:	8b 83       	std	Y+3, r24	; 0x03
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	2d 83       	std	Y+5, r18	; 0x05
    23d4:	3e 83       	std	Y+6, r19	; 0x06
    23d6:	4f 83       	std	Y+7, r20	; 0x07
    23d8:	58 87       	std	Y+8, r21	; 0x08
    23da:	ce 01       	movw	r24, r28
    23dc:	01 96       	adiw	r24, 0x01	; 1
    23de:	be 01       	movw	r22, r28
    23e0:	67 5f       	subi	r22, 0xF7	; 247
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255
    23e4:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    23e8:	ce 01       	movw	r24, r28
    23ea:	05 96       	adiw	r24, 0x05	; 5
    23ec:	be 01       	movw	r22, r28
    23ee:	6f 5e       	subi	r22, 0xEF	; 239
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    23f6:	99 85       	ldd	r25, Y+9	; 0x09
    23f8:	92 30       	cpi	r25, 0x02	; 2
    23fa:	78 f0       	brcs	.+30     	; 0x241a <__mulsf3+0x5c>
    23fc:	89 89       	ldd	r24, Y+17	; 0x11
    23fe:	82 30       	cpi	r24, 0x02	; 2
    2400:	c0 f0       	brcs	.+48     	; 0x2432 <__mulsf3+0x74>
    2402:	94 30       	cpi	r25, 0x04	; 4
    2404:	19 f4       	brne	.+6      	; 0x240c <__mulsf3+0x4e>
    2406:	82 30       	cpi	r24, 0x02	; 2
    2408:	41 f4       	brne	.+16     	; 0x241a <__mulsf3+0x5c>
    240a:	cb c0       	rjmp	.+406    	; 0x25a2 <__mulsf3+0x1e4>
    240c:	84 30       	cpi	r24, 0x04	; 4
    240e:	19 f4       	brne	.+6      	; 0x2416 <__mulsf3+0x58>
    2410:	92 30       	cpi	r25, 0x02	; 2
    2412:	79 f4       	brne	.+30     	; 0x2432 <__mulsf3+0x74>
    2414:	c6 c0       	rjmp	.+396    	; 0x25a2 <__mulsf3+0x1e4>
    2416:	92 30       	cpi	r25, 0x02	; 2
    2418:	51 f4       	brne	.+20     	; 0x242e <__mulsf3+0x70>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	2a 85       	ldd	r18, Y+10	; 0x0a
    241e:	9a 89       	ldd	r25, Y+18	; 0x12
    2420:	29 17       	cp	r18, r25
    2422:	09 f4       	brne	.+2      	; 0x2426 <__mulsf3+0x68>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	8a 87       	std	Y+10, r24	; 0x0a
    2428:	ce 01       	movw	r24, r28
    242a:	09 96       	adiw	r24, 0x09	; 9
    242c:	bc c0       	rjmp	.+376    	; 0x25a6 <__mulsf3+0x1e8>
    242e:	82 30       	cpi	r24, 0x02	; 2
    2430:	51 f4       	brne	.+20     	; 0x2446 <__mulsf3+0x88>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	2a 85       	ldd	r18, Y+10	; 0x0a
    2436:	9a 89       	ldd	r25, Y+18	; 0x12
    2438:	29 17       	cp	r18, r25
    243a:	09 f4       	brne	.+2      	; 0x243e <__mulsf3+0x80>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	8a 8b       	std	Y+18, r24	; 0x12
    2440:	ce 01       	movw	r24, r28
    2442:	41 96       	adiw	r24, 0x11	; 17
    2444:	b0 c0       	rjmp	.+352    	; 0x25a6 <__mulsf3+0x1e8>
    2446:	6d 84       	ldd	r6, Y+13	; 0x0d
    2448:	7e 84       	ldd	r7, Y+14	; 0x0e
    244a:	8f 84       	ldd	r8, Y+15	; 0x0f
    244c:	98 88       	ldd	r9, Y+16	; 0x10
    244e:	ed 88       	ldd	r14, Y+21	; 0x15
    2450:	fe 88       	ldd	r15, Y+22	; 0x16
    2452:	0f 89       	ldd	r16, Y+23	; 0x17
    2454:	18 8d       	ldd	r17, Y+24	; 0x18
    2456:	e0 e2       	ldi	r30, 0x20	; 32
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	dc 01       	movw	r26, r24
    2460:	aa 24       	eor	r10, r10
    2462:	bb 24       	eor	r11, r11
    2464:	65 01       	movw	r12, r10
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	a9 01       	movw	r20, r18
    246c:	b3 01       	movw	r22, r6
    246e:	61 70       	andi	r22, 0x01	; 1
    2470:	70 70       	andi	r23, 0x00	; 0
    2472:	61 15       	cp	r22, r1
    2474:	71 05       	cpc	r23, r1
    2476:	d1 f0       	breq	.+52     	; 0x24ac <__mulsf3+0xee>
    2478:	2e 0d       	add	r18, r14
    247a:	3f 1d       	adc	r19, r15
    247c:	40 1f       	adc	r20, r16
    247e:	51 1f       	adc	r21, r17
    2480:	15 01       	movw	r2, r10
    2482:	26 01       	movw	r4, r12
    2484:	28 0e       	add	r2, r24
    2486:	39 1e       	adc	r3, r25
    2488:	4a 1e       	adc	r4, r26
    248a:	5b 1e       	adc	r5, r27
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	2e 15       	cp	r18, r14
    2496:	3f 05       	cpc	r19, r15
    2498:	40 07       	cpc	r20, r16
    249a:	51 07       	cpc	r21, r17
    249c:	18 f0       	brcs	.+6      	; 0x24a4 <__mulsf3+0xe6>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	dc 01       	movw	r26, r24
    24a4:	82 0d       	add	r24, r2
    24a6:	93 1d       	adc	r25, r3
    24a8:	a4 1d       	adc	r26, r4
    24aa:	b5 1d       	adc	r27, r5
    24ac:	aa 0c       	add	r10, r10
    24ae:	bb 1c       	adc	r11, r11
    24b0:	cc 1c       	adc	r12, r12
    24b2:	dd 1c       	adc	r13, r13
    24b4:	17 ff       	sbrs	r17, 7
    24b6:	09 c0       	rjmp	.+18     	; 0x24ca <__mulsf3+0x10c>
    24b8:	61 e0       	ldi	r22, 0x01	; 1
    24ba:	26 2e       	mov	r2, r22
    24bc:	31 2c       	mov	r3, r1
    24be:	41 2c       	mov	r4, r1
    24c0:	51 2c       	mov	r5, r1
    24c2:	a2 28       	or	r10, r2
    24c4:	b3 28       	or	r11, r3
    24c6:	c4 28       	or	r12, r4
    24c8:	d5 28       	or	r13, r5
    24ca:	31 97       	sbiw	r30, 0x01	; 1
    24cc:	49 f0       	breq	.+18     	; 0x24e0 <__mulsf3+0x122>
    24ce:	ee 0c       	add	r14, r14
    24d0:	ff 1c       	adc	r15, r15
    24d2:	00 1f       	adc	r16, r16
    24d4:	11 1f       	adc	r17, r17
    24d6:	96 94       	lsr	r9
    24d8:	87 94       	ror	r8
    24da:	77 94       	ror	r7
    24dc:	67 94       	ror	r6
    24de:	c6 cf       	rjmp	.-116    	; 0x246c <__mulsf3+0xae>
    24e0:	6b 89       	ldd	r22, Y+19	; 0x13
    24e2:	7c 89       	ldd	r23, Y+20	; 0x14
    24e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    24e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    24e8:	6e 0f       	add	r22, r30
    24ea:	7f 1f       	adc	r23, r31
    24ec:	6e 5f       	subi	r22, 0xFE	; 254
    24ee:	7f 4f       	sbci	r23, 0xFF	; 255
    24f0:	7c 8f       	std	Y+28, r23	; 0x1c
    24f2:	6b 8f       	std	Y+27, r22	; 0x1b
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    24f8:	7a 89       	ldd	r23, Y+18	; 0x12
    24fa:	e7 17       	cp	r30, r23
    24fc:	09 f4       	brne	.+2      	; 0x2500 <__mulsf3+0x142>
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	6a 8f       	std	Y+26, r22	; 0x1a
    2502:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2504:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2506:	10 c0       	rjmp	.+32     	; 0x2528 <__mulsf3+0x16a>
    2508:	fc 01       	movw	r30, r24
    250a:	e1 70       	andi	r30, 0x01	; 1
    250c:	f0 70       	andi	r31, 0x00	; 0
    250e:	30 97       	sbiw	r30, 0x00	; 0
    2510:	29 f0       	breq	.+10     	; 0x251c <__mulsf3+0x15e>
    2512:	56 95       	lsr	r21
    2514:	47 95       	ror	r20
    2516:	37 95       	ror	r19
    2518:	27 95       	ror	r18
    251a:	50 68       	ori	r21, 0x80	; 128
    251c:	b6 95       	lsr	r27
    251e:	a7 95       	ror	r26
    2520:	97 95       	ror	r25
    2522:	87 95       	ror	r24
    2524:	6f 5f       	subi	r22, 0xFF	; 255
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	b7 fd       	sbrc	r27, 7
    252a:	ee cf       	rjmp	.-36     	; 0x2508 <__mulsf3+0x14a>
    252c:	0c c0       	rjmp	.+24     	; 0x2546 <__mulsf3+0x188>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	aa 1f       	adc	r26, r26
    2534:	bb 1f       	adc	r27, r27
    2536:	57 fd       	sbrc	r21, 7
    2538:	81 60       	ori	r24, 0x01	; 1
    253a:	22 0f       	add	r18, r18
    253c:	33 1f       	adc	r19, r19
    253e:	44 1f       	adc	r20, r20
    2540:	55 1f       	adc	r21, r21
    2542:	61 50       	subi	r22, 0x01	; 1
    2544:	70 40       	sbci	r23, 0x00	; 0
    2546:	80 30       	cpi	r24, 0x00	; 0
    2548:	e0 e0       	ldi	r30, 0x00	; 0
    254a:	9e 07       	cpc	r25, r30
    254c:	e0 e0       	ldi	r30, 0x00	; 0
    254e:	ae 07       	cpc	r26, r30
    2550:	e0 e4       	ldi	r30, 0x40	; 64
    2552:	be 07       	cpc	r27, r30
    2554:	60 f3       	brcs	.-40     	; 0x252e <__mulsf3+0x170>
    2556:	6b 8f       	std	Y+27, r22	; 0x1b
    2558:	7c 8f       	std	Y+28, r23	; 0x1c
    255a:	6f e7       	ldi	r22, 0x7F	; 127
    255c:	e6 2e       	mov	r14, r22
    255e:	f1 2c       	mov	r15, r1
    2560:	01 2d       	mov	r16, r1
    2562:	11 2d       	mov	r17, r1
    2564:	e8 22       	and	r14, r24
    2566:	f9 22       	and	r15, r25
    2568:	0a 23       	and	r16, r26
    256a:	1b 23       	and	r17, r27
    256c:	60 e4       	ldi	r22, 0x40	; 64
    256e:	e6 16       	cp	r14, r22
    2570:	f1 04       	cpc	r15, r1
    2572:	01 05       	cpc	r16, r1
    2574:	11 05       	cpc	r17, r1
    2576:	61 f4       	brne	.+24     	; 0x2590 <__mulsf3+0x1d2>
    2578:	87 fd       	sbrc	r24, 7
    257a:	0a c0       	rjmp	.+20     	; 0x2590 <__mulsf3+0x1d2>
    257c:	21 15       	cp	r18, r1
    257e:	31 05       	cpc	r19, r1
    2580:	41 05       	cpc	r20, r1
    2582:	51 05       	cpc	r21, r1
    2584:	29 f0       	breq	.+10     	; 0x2590 <__mulsf3+0x1d2>
    2586:	80 5c       	subi	r24, 0xC0	; 192
    2588:	9f 4f       	sbci	r25, 0xFF	; 255
    258a:	af 4f       	sbci	r26, 0xFF	; 255
    258c:	bf 4f       	sbci	r27, 0xFF	; 255
    258e:	80 78       	andi	r24, 0x80	; 128
    2590:	8d 8f       	std	Y+29, r24	; 0x1d
    2592:	9e 8f       	std	Y+30, r25	; 0x1e
    2594:	af 8f       	std	Y+31, r26	; 0x1f
    2596:	b8 a3       	std	Y+32, r27	; 0x20
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	89 8f       	std	Y+25, r24	; 0x19
    259c:	ce 01       	movw	r24, r28
    259e:	49 96       	adiw	r24, 0x19	; 25
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <__mulsf3+0x1e8>
    25a2:	84 ec       	ldi	r24, 0xC4	; 196
    25a4:	92 e0       	ldi	r25, 0x02	; 2
    25a6:	0e 94 2d 14 	call	0x285a	; 0x285a <__pack_f>
    25aa:	a0 96       	adiw	r28, 0x20	; 32
    25ac:	e2 e1       	ldi	r30, 0x12	; 18
    25ae:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__epilogue_restores__>

000025b2 <__gesf2>:
    25b2:	a8 e1       	ldi	r26, 0x18	; 24
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ef ed       	ldi	r30, 0xDF	; 223
    25b8:	f2 e1       	ldi	r31, 0x12	; 18
    25ba:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
    25be:	69 83       	std	Y+1, r22	; 0x01
    25c0:	7a 83       	std	Y+2, r23	; 0x02
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	9c 83       	std	Y+4, r25	; 0x04
    25c6:	2d 83       	std	Y+5, r18	; 0x05
    25c8:	3e 83       	std	Y+6, r19	; 0x06
    25ca:	4f 83       	std	Y+7, r20	; 0x07
    25cc:	58 87       	std	Y+8, r21	; 0x08
    25ce:	8e 01       	movw	r16, r28
    25d0:	07 5f       	subi	r16, 0xF7	; 247
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	b8 01       	movw	r22, r16
    25da:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    25de:	81 e1       	ldi	r24, 0x11	; 17
    25e0:	e8 2e       	mov	r14, r24
    25e2:	f1 2c       	mov	r15, r1
    25e4:	ec 0e       	add	r14, r28
    25e6:	fd 1e       	adc	r15, r29
    25e8:	ce 01       	movw	r24, r28
    25ea:	05 96       	adiw	r24, 0x05	; 5
    25ec:	b7 01       	movw	r22, r14
    25ee:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    25f2:	89 85       	ldd	r24, Y+9	; 0x09
    25f4:	82 30       	cpi	r24, 0x02	; 2
    25f6:	40 f0       	brcs	.+16     	; 0x2608 <__gesf2+0x56>
    25f8:	89 89       	ldd	r24, Y+17	; 0x11
    25fa:	82 30       	cpi	r24, 0x02	; 2
    25fc:	28 f0       	brcs	.+10     	; 0x2608 <__gesf2+0x56>
    25fe:	c8 01       	movw	r24, r16
    2600:	b7 01       	movw	r22, r14
    2602:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <__fpcmp_parts_f>
    2606:	01 c0       	rjmp	.+2      	; 0x260a <__gesf2+0x58>
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	68 96       	adiw	r28, 0x18	; 24
    260c:	e6 e0       	ldi	r30, 0x06	; 6
    260e:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

00002612 <__fixsfsi>:
    2612:	ac e0       	ldi	r26, 0x0C	; 12
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	ef e0       	ldi	r30, 0x0F	; 15
    2618:	f3 e1       	ldi	r31, 0x13	; 19
    261a:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__prologue_saves__+0x20>
    261e:	69 83       	std	Y+1, r22	; 0x01
    2620:	7a 83       	std	Y+2, r23	; 0x02
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	ce 01       	movw	r24, r28
    2628:	01 96       	adiw	r24, 0x01	; 1
    262a:	be 01       	movw	r22, r28
    262c:	6b 5f       	subi	r22, 0xFB	; 251
    262e:	7f 4f       	sbci	r23, 0xFF	; 255
    2630:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__unpack_f>
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	81 f1       	breq	.+96     	; 0x269a <__fixsfsi+0x88>
    263a:	82 30       	cpi	r24, 0x02	; 2
    263c:	70 f1       	brcs	.+92     	; 0x269a <__fixsfsi+0x88>
    263e:	84 30       	cpi	r24, 0x04	; 4
    2640:	21 f4       	brne	.+8      	; 0x264a <__fixsfsi+0x38>
    2642:	8e 81       	ldd	r24, Y+6	; 0x06
    2644:	88 23       	and	r24, r24
    2646:	69 f1       	breq	.+90     	; 0x26a2 <__fixsfsi+0x90>
    2648:	0a c0       	rjmp	.+20     	; 0x265e <__fixsfsi+0x4c>
    264a:	2f 81       	ldd	r18, Y+7	; 0x07
    264c:	38 85       	ldd	r19, Y+8	; 0x08
    264e:	37 fd       	sbrc	r19, 7
    2650:	24 c0       	rjmp	.+72     	; 0x269a <__fixsfsi+0x88>
    2652:	6e 81       	ldd	r22, Y+6	; 0x06
    2654:	2f 31       	cpi	r18, 0x1F	; 31
    2656:	31 05       	cpc	r19, r1
    2658:	3c f0       	brlt	.+14     	; 0x2668 <__fixsfsi+0x56>
    265a:	66 23       	and	r22, r22
    265c:	11 f1       	breq	.+68     	; 0x26a2 <__fixsfsi+0x90>
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	50 e8       	ldi	r21, 0x80	; 128
    2666:	21 c0       	rjmp	.+66     	; 0x26aa <__fixsfsi+0x98>
    2668:	8e e1       	ldi	r24, 0x1E	; 30
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	82 1b       	sub	r24, r18
    266e:	93 0b       	sbc	r25, r19
    2670:	29 85       	ldd	r18, Y+9	; 0x09
    2672:	3a 85       	ldd	r19, Y+10	; 0x0a
    2674:	4b 85       	ldd	r20, Y+11	; 0x0b
    2676:	5c 85       	ldd	r21, Y+12	; 0x0c
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <__fixsfsi+0x70>
    267a:	56 95       	lsr	r21
    267c:	47 95       	ror	r20
    267e:	37 95       	ror	r19
    2680:	27 95       	ror	r18
    2682:	8a 95       	dec	r24
    2684:	d2 f7       	brpl	.-12     	; 0x267a <__fixsfsi+0x68>
    2686:	66 23       	and	r22, r22
    2688:	81 f0       	breq	.+32     	; 0x26aa <__fixsfsi+0x98>
    268a:	50 95       	com	r21
    268c:	40 95       	com	r20
    268e:	30 95       	com	r19
    2690:	21 95       	neg	r18
    2692:	3f 4f       	sbci	r19, 0xFF	; 255
    2694:	4f 4f       	sbci	r20, 0xFF	; 255
    2696:	5f 4f       	sbci	r21, 0xFF	; 255
    2698:	08 c0       	rjmp	.+16     	; 0x26aa <__fixsfsi+0x98>
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	a9 01       	movw	r20, r18
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <__fixsfsi+0x98>
    26a2:	2f ef       	ldi	r18, 0xFF	; 255
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f ef       	ldi	r20, 0xFF	; 255
    26a8:	5f e7       	ldi	r21, 0x7F	; 127
    26aa:	b9 01       	movw	r22, r18
    26ac:	ca 01       	movw	r24, r20
    26ae:	2c 96       	adiw	r28, 0x0c	; 12
    26b0:	e2 e0       	ldi	r30, 0x02	; 2
    26b2:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__epilogue_restores__+0x20>

000026b6 <__floatunsisf>:
    26b6:	a8 e0       	ldi	r26, 0x08	; 8
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e1 e6       	ldi	r30, 0x61	; 97
    26bc:	f3 e1       	ldi	r31, 0x13	; 19
    26be:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__prologue_saves__+0x14>
    26c2:	7b 01       	movw	r14, r22
    26c4:	8c 01       	movw	r16, r24
    26c6:	1a 82       	std	Y+2, r1	; 0x02
    26c8:	61 15       	cp	r22, r1
    26ca:	71 05       	cpc	r23, r1
    26cc:	81 05       	cpc	r24, r1
    26ce:	91 05       	cpc	r25, r1
    26d0:	19 f4       	brne	.+6      	; 0x26d8 <__floatunsisf+0x22>
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	5f c0       	rjmp	.+190    	; 0x2796 <__floatunsisf+0xe0>
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	8e e1       	ldi	r24, 0x1E	; 30
    26de:	c8 2e       	mov	r12, r24
    26e0:	d1 2c       	mov	r13, r1
    26e2:	dc 82       	std	Y+4, r13	; 0x04
    26e4:	cb 82       	std	Y+3, r12	; 0x03
    26e6:	ed 82       	std	Y+5, r14	; 0x05
    26e8:	fe 82       	std	Y+6, r15	; 0x06
    26ea:	0f 83       	std	Y+7, r16	; 0x07
    26ec:	18 87       	std	Y+8, r17	; 0x08
    26ee:	c8 01       	movw	r24, r16
    26f0:	b7 01       	movw	r22, r14
    26f2:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__clzsi2>
    26f6:	fc 01       	movw	r30, r24
    26f8:	31 97       	sbiw	r30, 0x01	; 1
    26fa:	f7 ff       	sbrs	r31, 7
    26fc:	3a c0       	rjmp	.+116    	; 0x2772 <__floatunsisf+0xbc>
    26fe:	aa 27       	eor	r26, r26
    2700:	bb 27       	eor	r27, r27
    2702:	ae 1b       	sub	r26, r30
    2704:	bf 0b       	sbc	r27, r31
    2706:	21 e0       	ldi	r18, 0x01	; 1
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	0a 2e       	mov	r0, r26
    2710:	04 c0       	rjmp	.+8      	; 0x271a <__floatunsisf+0x64>
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	44 1f       	adc	r20, r20
    2718:	55 1f       	adc	r21, r21
    271a:	0a 94       	dec	r0
    271c:	d2 f7       	brpl	.-12     	; 0x2712 <__floatunsisf+0x5c>
    271e:	21 50       	subi	r18, 0x01	; 1
    2720:	30 40       	sbci	r19, 0x00	; 0
    2722:	40 40       	sbci	r20, 0x00	; 0
    2724:	50 40       	sbci	r21, 0x00	; 0
    2726:	2e 21       	and	r18, r14
    2728:	3f 21       	and	r19, r15
    272a:	40 23       	and	r20, r16
    272c:	51 23       	and	r21, r17
    272e:	61 e0       	ldi	r22, 0x01	; 1
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	21 15       	cp	r18, r1
    2738:	31 05       	cpc	r19, r1
    273a:	41 05       	cpc	r20, r1
    273c:	51 05       	cpc	r21, r1
    273e:	19 f4       	brne	.+6      	; 0x2746 <__floatunsisf+0x90>
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	cb 01       	movw	r24, r22
    2746:	04 c0       	rjmp	.+8      	; 0x2750 <__floatunsisf+0x9a>
    2748:	16 95       	lsr	r17
    274a:	07 95       	ror	r16
    274c:	f7 94       	ror	r15
    274e:	e7 94       	ror	r14
    2750:	aa 95       	dec	r26
    2752:	d2 f7       	brpl	.-12     	; 0x2748 <__floatunsisf+0x92>
    2754:	e6 2a       	or	r14, r22
    2756:	f7 2a       	or	r15, r23
    2758:	08 2b       	or	r16, r24
    275a:	19 2b       	or	r17, r25
    275c:	ed 82       	std	Y+5, r14	; 0x05
    275e:	fe 82       	std	Y+6, r15	; 0x06
    2760:	0f 83       	std	Y+7, r16	; 0x07
    2762:	18 87       	std	Y+8, r17	; 0x08
    2764:	8e e1       	ldi	r24, 0x1E	; 30
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	8e 1b       	sub	r24, r30
    276a:	9f 0b       	sbc	r25, r31
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
    2770:	12 c0       	rjmp	.+36     	; 0x2796 <__floatunsisf+0xe0>
    2772:	30 97       	sbiw	r30, 0x00	; 0
    2774:	81 f0       	breq	.+32     	; 0x2796 <__floatunsisf+0xe0>
    2776:	0e 2e       	mov	r0, r30
    2778:	04 c0       	rjmp	.+8      	; 0x2782 <__floatunsisf+0xcc>
    277a:	ee 0c       	add	r14, r14
    277c:	ff 1c       	adc	r15, r15
    277e:	00 1f       	adc	r16, r16
    2780:	11 1f       	adc	r17, r17
    2782:	0a 94       	dec	r0
    2784:	d2 f7       	brpl	.-12     	; 0x277a <__floatunsisf+0xc4>
    2786:	ed 82       	std	Y+5, r14	; 0x05
    2788:	fe 82       	std	Y+6, r15	; 0x06
    278a:	0f 83       	std	Y+7, r16	; 0x07
    278c:	18 87       	std	Y+8, r17	; 0x08
    278e:	ce 1a       	sub	r12, r30
    2790:	df 0a       	sbc	r13, r31
    2792:	dc 82       	std	Y+4, r13	; 0x04
    2794:	cb 82       	std	Y+3, r12	; 0x03
    2796:	ce 01       	movw	r24, r28
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	0e 94 2d 14 	call	0x285a	; 0x285a <__pack_f>
    279e:	28 96       	adiw	r28, 0x08	; 8
    27a0:	e8 e0       	ldi	r30, 0x08	; 8
    27a2:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__epilogue_restores__+0x14>

000027a6 <__clzsi2>:
    27a6:	af 92       	push	r10
    27a8:	bf 92       	push	r11
    27aa:	cf 92       	push	r12
    27ac:	df 92       	push	r13
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	7b 01       	movw	r14, r22
    27b8:	8c 01       	movw	r16, r24
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	e8 16       	cp	r14, r24
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	f8 06       	cpc	r15, r24
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	08 07       	cpc	r16, r24
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	18 07       	cpc	r17, r24
    27ca:	58 f4       	brcc	.+22     	; 0x27e2 <__clzsi2+0x3c>
    27cc:	ef ef       	ldi	r30, 0xFF	; 255
    27ce:	ee 16       	cp	r14, r30
    27d0:	f1 04       	cpc	r15, r1
    27d2:	01 05       	cpc	r16, r1
    27d4:	11 05       	cpc	r17, r1
    27d6:	09 f0       	breq	.+2      	; 0x27da <__clzsi2+0x34>
    27d8:	90 f4       	brcc	.+36     	; 0x27fe <__clzsi2+0x58>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	dc 01       	movw	r26, r24
    27e0:	17 c0       	rjmp	.+46     	; 0x2810 <__clzsi2+0x6a>
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	ef 16       	cp	r14, r31
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	ff 06       	cpc	r15, r31
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	0f 07       	cpc	r16, r31
    27ee:	f1 e0       	ldi	r31, 0x01	; 1
    27f0:	1f 07       	cpc	r17, r31
    27f2:	50 f4       	brcc	.+20     	; 0x2808 <__clzsi2+0x62>
    27f4:	80 e1       	ldi	r24, 0x10	; 16
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e0       	ldi	r26, 0x00	; 0
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	09 c0       	rjmp	.+18     	; 0x2810 <__clzsi2+0x6a>
    27fe:	88 e0       	ldi	r24, 0x08	; 8
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a0 e0       	ldi	r26, 0x00	; 0
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <__clzsi2+0x6a>
    2808:	88 e1       	ldi	r24, 0x18	; 24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e0       	ldi	r26, 0x00	; 0
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	20 e2       	ldi	r18, 0x20	; 32
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	28 1b       	sub	r18, r24
    281a:	39 0b       	sbc	r19, r25
    281c:	4a 0b       	sbc	r20, r26
    281e:	5b 0b       	sbc	r21, r27
    2820:	57 01       	movw	r10, r14
    2822:	68 01       	movw	r12, r16
    2824:	04 c0       	rjmp	.+8      	; 0x282e <__clzsi2+0x88>
    2826:	d6 94       	lsr	r13
    2828:	c7 94       	ror	r12
    282a:	b7 94       	ror	r11
    282c:	a7 94       	ror	r10
    282e:	8a 95       	dec	r24
    2830:	d2 f7       	brpl	.-12     	; 0x2826 <__clzsi2+0x80>
    2832:	d6 01       	movw	r26, r12
    2834:	c5 01       	movw	r24, r10
    2836:	84 53       	subi	r24, 0x34	; 52
    2838:	9d 4f       	sbci	r25, 0xFD	; 253
    283a:	fc 01       	movw	r30, r24
    283c:	80 81       	ld	r24, Z
    283e:	28 1b       	sub	r18, r24
    2840:	31 09       	sbc	r19, r1
    2842:	41 09       	sbc	r20, r1
    2844:	51 09       	sbc	r21, r1
    2846:	c9 01       	movw	r24, r18
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	df 90       	pop	r13
    2852:	cf 90       	pop	r12
    2854:	bf 90       	pop	r11
    2856:	af 90       	pop	r10
    2858:	08 95       	ret

0000285a <__pack_f>:
    285a:	ef 92       	push	r14
    285c:	ff 92       	push	r15
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	fc 01       	movw	r30, r24
    2868:	24 81       	ldd	r18, Z+4	; 0x04
    286a:	35 81       	ldd	r19, Z+5	; 0x05
    286c:	46 81       	ldd	r20, Z+6	; 0x06
    286e:	57 81       	ldd	r21, Z+7	; 0x07
    2870:	61 81       	ldd	r22, Z+1	; 0x01
    2872:	80 81       	ld	r24, Z
    2874:	82 30       	cpi	r24, 0x02	; 2
    2876:	20 f4       	brcc	.+8      	; 0x2880 <__pack_f+0x26>
    2878:	40 61       	ori	r20, 0x10	; 16
    287a:	ef ef       	ldi	r30, 0xFF	; 255
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	a3 c0       	rjmp	.+326    	; 0x29c6 <__pack_f+0x16c>
    2880:	84 30       	cpi	r24, 0x04	; 4
    2882:	09 f4       	brne	.+2      	; 0x2886 <__pack_f+0x2c>
    2884:	9b c0       	rjmp	.+310    	; 0x29bc <__pack_f+0x162>
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	09 f4       	brne	.+2      	; 0x288c <__pack_f+0x32>
    288a:	92 c0       	rjmp	.+292    	; 0x29b0 <__pack_f+0x156>
    288c:	21 15       	cp	r18, r1
    288e:	31 05       	cpc	r19, r1
    2890:	41 05       	cpc	r20, r1
    2892:	51 05       	cpc	r21, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <__pack_f+0x3e>
    2896:	8f c0       	rjmp	.+286    	; 0x29b6 <__pack_f+0x15c>
    2898:	02 80       	ldd	r0, Z+2	; 0x02
    289a:	f3 81       	ldd	r31, Z+3	; 0x03
    289c:	e0 2d       	mov	r30, r0
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	e2 38       	cpi	r30, 0x82	; 130
    28a2:	f8 07       	cpc	r31, r24
    28a4:	0c f0       	brlt	.+2      	; 0x28a8 <__pack_f+0x4e>
    28a6:	5a c0       	rjmp	.+180    	; 0x295c <__pack_f+0x102>
    28a8:	c2 e8       	ldi	r28, 0x82	; 130
    28aa:	df ef       	ldi	r29, 0xFF	; 255
    28ac:	ce 1b       	sub	r28, r30
    28ae:	df 0b       	sbc	r29, r31
    28b0:	ca 31       	cpi	r28, 0x1A	; 26
    28b2:	d1 05       	cpc	r29, r1
    28b4:	6c f5       	brge	.+90     	; 0x2910 <__pack_f+0xb6>
    28b6:	79 01       	movw	r14, r18
    28b8:	8a 01       	movw	r16, r20
    28ba:	0c 2e       	mov	r0, r28
    28bc:	04 c0       	rjmp	.+8      	; 0x28c6 <__pack_f+0x6c>
    28be:	16 95       	lsr	r17
    28c0:	07 95       	ror	r16
    28c2:	f7 94       	ror	r15
    28c4:	e7 94       	ror	r14
    28c6:	0a 94       	dec	r0
    28c8:	d2 f7       	brpl	.-12     	; 0x28be <__pack_f+0x64>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	0c 2e       	mov	r0, r28
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <__pack_f+0x84>
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	aa 1f       	adc	r26, r26
    28dc:	bb 1f       	adc	r27, r27
    28de:	0a 94       	dec	r0
    28e0:	d2 f7       	brpl	.-12     	; 0x28d6 <__pack_f+0x7c>
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	a1 09       	sbc	r26, r1
    28e6:	b1 09       	sbc	r27, r1
    28e8:	82 23       	and	r24, r18
    28ea:	93 23       	and	r25, r19
    28ec:	a4 23       	and	r26, r20
    28ee:	b5 23       	and	r27, r21
    28f0:	21 e0       	ldi	r18, 0x01	; 1
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	a1 05       	cpc	r26, r1
    28fc:	b1 05       	cpc	r27, r1
    28fe:	19 f4       	brne	.+6      	; 0x2906 <__pack_f+0xac>
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	a9 01       	movw	r20, r18
    2906:	2e 29       	or	r18, r14
    2908:	3f 29       	or	r19, r15
    290a:	40 2b       	or	r20, r16
    290c:	51 2b       	or	r21, r17
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <__pack_f+0xbc>
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	a9 01       	movw	r20, r18
    2916:	da 01       	movw	r26, r20
    2918:	c9 01       	movw	r24, r18
    291a:	8f 77       	andi	r24, 0x7F	; 127
    291c:	90 70       	andi	r25, 0x00	; 0
    291e:	a0 70       	andi	r26, 0x00	; 0
    2920:	b0 70       	andi	r27, 0x00	; 0
    2922:	80 34       	cpi	r24, 0x40	; 64
    2924:	91 05       	cpc	r25, r1
    2926:	a1 05       	cpc	r26, r1
    2928:	b1 05       	cpc	r27, r1
    292a:	39 f4       	brne	.+14     	; 0x293a <__pack_f+0xe0>
    292c:	27 ff       	sbrs	r18, 7
    292e:	09 c0       	rjmp	.+18     	; 0x2942 <__pack_f+0xe8>
    2930:	20 5c       	subi	r18, 0xC0	; 192
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	4f 4f       	sbci	r20, 0xFF	; 255
    2936:	5f 4f       	sbci	r21, 0xFF	; 255
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <__pack_f+0xe8>
    293a:	21 5c       	subi	r18, 0xC1	; 193
    293c:	3f 4f       	sbci	r19, 0xFF	; 255
    293e:	4f 4f       	sbci	r20, 0xFF	; 255
    2940:	5f 4f       	sbci	r21, 0xFF	; 255
    2942:	e1 e0       	ldi	r30, 0x01	; 1
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	20 30       	cpi	r18, 0x00	; 0
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	38 07       	cpc	r19, r24
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	48 07       	cpc	r20, r24
    2950:	80 e4       	ldi	r24, 0x40	; 64
    2952:	58 07       	cpc	r21, r24
    2954:	28 f5       	brcc	.+74     	; 0x29a0 <__pack_f+0x146>
    2956:	e0 e0       	ldi	r30, 0x00	; 0
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	22 c0       	rjmp	.+68     	; 0x29a0 <__pack_f+0x146>
    295c:	e0 38       	cpi	r30, 0x80	; 128
    295e:	f1 05       	cpc	r31, r1
    2960:	6c f5       	brge	.+90     	; 0x29bc <__pack_f+0x162>
    2962:	e1 58       	subi	r30, 0x81	; 129
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	da 01       	movw	r26, r20
    2968:	c9 01       	movw	r24, r18
    296a:	8f 77       	andi	r24, 0x7F	; 127
    296c:	90 70       	andi	r25, 0x00	; 0
    296e:	a0 70       	andi	r26, 0x00	; 0
    2970:	b0 70       	andi	r27, 0x00	; 0
    2972:	80 34       	cpi	r24, 0x40	; 64
    2974:	91 05       	cpc	r25, r1
    2976:	a1 05       	cpc	r26, r1
    2978:	b1 05       	cpc	r27, r1
    297a:	39 f4       	brne	.+14     	; 0x298a <__pack_f+0x130>
    297c:	27 ff       	sbrs	r18, 7
    297e:	09 c0       	rjmp	.+18     	; 0x2992 <__pack_f+0x138>
    2980:	20 5c       	subi	r18, 0xC0	; 192
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	4f 4f       	sbci	r20, 0xFF	; 255
    2986:	5f 4f       	sbci	r21, 0xFF	; 255
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <__pack_f+0x138>
    298a:	21 5c       	subi	r18, 0xC1	; 193
    298c:	3f 4f       	sbci	r19, 0xFF	; 255
    298e:	4f 4f       	sbci	r20, 0xFF	; 255
    2990:	5f 4f       	sbci	r21, 0xFF	; 255
    2992:	57 ff       	sbrs	r21, 7
    2994:	05 c0       	rjmp	.+10     	; 0x29a0 <__pack_f+0x146>
    2996:	56 95       	lsr	r21
    2998:	47 95       	ror	r20
    299a:	37 95       	ror	r19
    299c:	27 95       	ror	r18
    299e:	31 96       	adiw	r30, 0x01	; 1
    29a0:	87 e0       	ldi	r24, 0x07	; 7
    29a2:	56 95       	lsr	r21
    29a4:	47 95       	ror	r20
    29a6:	37 95       	ror	r19
    29a8:	27 95       	ror	r18
    29aa:	8a 95       	dec	r24
    29ac:	d1 f7       	brne	.-12     	; 0x29a2 <__pack_f+0x148>
    29ae:	0b c0       	rjmp	.+22     	; 0x29c6 <__pack_f+0x16c>
    29b0:	e0 e0       	ldi	r30, 0x00	; 0
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	05 c0       	rjmp	.+10     	; 0x29c0 <__pack_f+0x166>
    29b6:	e0 e0       	ldi	r30, 0x00	; 0
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	05 c0       	rjmp	.+10     	; 0x29c6 <__pack_f+0x16c>
    29bc:	ef ef       	ldi	r30, 0xFF	; 255
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	a9 01       	movw	r20, r18
    29c6:	8e 2f       	mov	r24, r30
    29c8:	87 95       	ror	r24
    29ca:	88 27       	eor	r24, r24
    29cc:	87 95       	ror	r24
    29ce:	94 2f       	mov	r25, r20
    29d0:	9f 77       	andi	r25, 0x7F	; 127
    29d2:	67 95       	ror	r22
    29d4:	66 27       	eor	r22, r22
    29d6:	67 95       	ror	r22
    29d8:	e6 95       	lsr	r30
    29da:	e2 2e       	mov	r14, r18
    29dc:	a9 2f       	mov	r26, r25
    29de:	a8 2b       	or	r26, r24
    29e0:	fe 2f       	mov	r31, r30
    29e2:	f6 2b       	or	r31, r22
    29e4:	62 2f       	mov	r22, r18
    29e6:	73 2f       	mov	r23, r19
    29e8:	8a 2f       	mov	r24, r26
    29ea:	9f 2f       	mov	r25, r31
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	e6 e0       	ldi	r30, 0x06	; 6
    29f2:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

000029f6 <__unpack_f>:
    29f6:	dc 01       	movw	r26, r24
    29f8:	fb 01       	movw	r30, r22
    29fa:	2c 91       	ld	r18, X
    29fc:	11 96       	adiw	r26, 0x01	; 1
    29fe:	3c 91       	ld	r19, X
    2a00:	11 97       	sbiw	r26, 0x01	; 1
    2a02:	12 96       	adiw	r26, 0x02	; 2
    2a04:	8c 91       	ld	r24, X
    2a06:	12 97       	sbiw	r26, 0x02	; 2
    2a08:	48 2f       	mov	r20, r24
    2a0a:	4f 77       	andi	r20, 0x7F	; 127
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	98 2f       	mov	r25, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	99 27       	eor	r25, r25
    2a14:	99 1f       	adc	r25, r25
    2a16:	13 96       	adiw	r26, 0x03	; 3
    2a18:	6c 91       	ld	r22, X
    2a1a:	13 97       	sbiw	r26, 0x03	; 3
    2a1c:	86 2f       	mov	r24, r22
    2a1e:	88 0f       	add	r24, r24
    2a20:	89 2b       	or	r24, r25
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	66 1f       	adc	r22, r22
    2a26:	66 27       	eor	r22, r22
    2a28:	66 1f       	adc	r22, r22
    2a2a:	61 83       	std	Z+1, r22	; 0x01
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	39 f5       	brne	.+78     	; 0x2a7e <__unpack_f+0x88>
    2a30:	21 15       	cp	r18, r1
    2a32:	31 05       	cpc	r19, r1
    2a34:	41 05       	cpc	r20, r1
    2a36:	51 05       	cpc	r21, r1
    2a38:	11 f4       	brne	.+4      	; 0x2a3e <__unpack_f+0x48>
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	29 c0       	rjmp	.+82     	; 0x2a90 <__unpack_f+0x9a>
    2a3e:	82 e8       	ldi	r24, 0x82	; 130
    2a40:	9f ef       	ldi	r25, 0xFF	; 255
    2a42:	93 83       	std	Z+3, r25	; 0x03
    2a44:	82 83       	std	Z+2, r24	; 0x02
    2a46:	67 e0       	ldi	r22, 0x07	; 7
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	44 1f       	adc	r20, r20
    2a4e:	55 1f       	adc	r21, r21
    2a50:	6a 95       	dec	r22
    2a52:	d1 f7       	brne	.-12     	; 0x2a48 <__unpack_f+0x52>
    2a54:	83 e0       	ldi	r24, 0x03	; 3
    2a56:	80 83       	st	Z, r24
    2a58:	09 c0       	rjmp	.+18     	; 0x2a6c <__unpack_f+0x76>
    2a5a:	22 0f       	add	r18, r18
    2a5c:	33 1f       	adc	r19, r19
    2a5e:	44 1f       	adc	r20, r20
    2a60:	55 1f       	adc	r21, r21
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	93 83       	std	Z+3, r25	; 0x03
    2a6a:	82 83       	std	Z+2, r24	; 0x02
    2a6c:	20 30       	cpi	r18, 0x00	; 0
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	38 07       	cpc	r19, r24
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	48 07       	cpc	r20, r24
    2a76:	80 e4       	ldi	r24, 0x40	; 64
    2a78:	58 07       	cpc	r21, r24
    2a7a:	78 f3       	brcs	.-34     	; 0x2a5a <__unpack_f+0x64>
    2a7c:	20 c0       	rjmp	.+64     	; 0x2abe <__unpack_f+0xc8>
    2a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a80:	91 05       	cpc	r25, r1
    2a82:	79 f4       	brne	.+30     	; 0x2aa2 <__unpack_f+0xac>
    2a84:	21 15       	cp	r18, r1
    2a86:	31 05       	cpc	r19, r1
    2a88:	41 05       	cpc	r20, r1
    2a8a:	51 05       	cpc	r21, r1
    2a8c:	19 f4       	brne	.+6      	; 0x2a94 <__unpack_f+0x9e>
    2a8e:	84 e0       	ldi	r24, 0x04	; 4
    2a90:	80 83       	st	Z, r24
    2a92:	08 95       	ret
    2a94:	44 ff       	sbrs	r20, 4
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <__unpack_f+0xa8>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 83       	st	Z, r24
    2a9c:	10 c0       	rjmp	.+32     	; 0x2abe <__unpack_f+0xc8>
    2a9e:	10 82       	st	Z, r1
    2aa0:	0e c0       	rjmp	.+28     	; 0x2abe <__unpack_f+0xc8>
    2aa2:	8f 57       	subi	r24, 0x7F	; 127
    2aa4:	90 40       	sbci	r25, 0x00	; 0
    2aa6:	93 83       	std	Z+3, r25	; 0x03
    2aa8:	82 83       	std	Z+2, r24	; 0x02
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	80 83       	st	Z, r24
    2aae:	87 e0       	ldi	r24, 0x07	; 7
    2ab0:	22 0f       	add	r18, r18
    2ab2:	33 1f       	adc	r19, r19
    2ab4:	44 1f       	adc	r20, r20
    2ab6:	55 1f       	adc	r21, r21
    2ab8:	8a 95       	dec	r24
    2aba:	d1 f7       	brne	.-12     	; 0x2ab0 <__unpack_f+0xba>
    2abc:	50 64       	ori	r21, 0x40	; 64
    2abe:	24 83       	std	Z+4, r18	; 0x04
    2ac0:	35 83       	std	Z+5, r19	; 0x05
    2ac2:	46 83       	std	Z+6, r20	; 0x06
    2ac4:	57 83       	std	Z+7, r21	; 0x07
    2ac6:	08 95       	ret

00002ac8 <__fpcmp_parts_f>:
    2ac8:	fc 01       	movw	r30, r24
    2aca:	db 01       	movw	r26, r22
    2acc:	90 81       	ld	r25, Z
    2ace:	92 30       	cpi	r25, 0x02	; 2
    2ad0:	08 f4       	brcc	.+2      	; 0x2ad4 <__fpcmp_parts_f+0xc>
    2ad2:	49 c0       	rjmp	.+146    	; 0x2b66 <__fpcmp_parts_f+0x9e>
    2ad4:	8c 91       	ld	r24, X
    2ad6:	82 30       	cpi	r24, 0x02	; 2
    2ad8:	08 f4       	brcc	.+2      	; 0x2adc <__fpcmp_parts_f+0x14>
    2ada:	45 c0       	rjmp	.+138    	; 0x2b66 <__fpcmp_parts_f+0x9e>
    2adc:	94 30       	cpi	r25, 0x04	; 4
    2ade:	51 f4       	brne	.+20     	; 0x2af4 <__fpcmp_parts_f+0x2c>
    2ae0:	61 81       	ldd	r22, Z+1	; 0x01
    2ae2:	84 30       	cpi	r24, 0x04	; 4
    2ae4:	b1 f5       	brne	.+108    	; 0x2b52 <__fpcmp_parts_f+0x8a>
    2ae6:	11 96       	adiw	r26, 0x01	; 1
    2ae8:	2c 91       	ld	r18, X
    2aea:	11 97       	sbiw	r26, 0x01	; 1
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	26 1b       	sub	r18, r22
    2af0:	31 09       	sbc	r19, r1
    2af2:	41 c0       	rjmp	.+130    	; 0x2b76 <__fpcmp_parts_f+0xae>
    2af4:	84 30       	cpi	r24, 0x04	; 4
    2af6:	21 f0       	breq	.+8      	; 0x2b00 <__fpcmp_parts_f+0x38>
    2af8:	92 30       	cpi	r25, 0x02	; 2
    2afa:	41 f4       	brne	.+16     	; 0x2b0c <__fpcmp_parts_f+0x44>
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	b1 f1       	breq	.+108    	; 0x2b6c <__fpcmp_parts_f+0xa4>
    2b00:	11 96       	adiw	r26, 0x01	; 1
    2b02:	8c 91       	ld	r24, X
    2b04:	11 97       	sbiw	r26, 0x01	; 1
    2b06:	88 23       	and	r24, r24
    2b08:	a1 f1       	breq	.+104    	; 0x2b72 <__fpcmp_parts_f+0xaa>
    2b0a:	2d c0       	rjmp	.+90     	; 0x2b66 <__fpcmp_parts_f+0x9e>
    2b0c:	61 81       	ldd	r22, Z+1	; 0x01
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	01 f1       	breq	.+64     	; 0x2b52 <__fpcmp_parts_f+0x8a>
    2b12:	11 96       	adiw	r26, 0x01	; 1
    2b14:	8c 91       	ld	r24, X
    2b16:	11 97       	sbiw	r26, 0x01	; 1
    2b18:	68 17       	cp	r22, r24
    2b1a:	d9 f4       	brne	.+54     	; 0x2b52 <__fpcmp_parts_f+0x8a>
    2b1c:	22 81       	ldd	r18, Z+2	; 0x02
    2b1e:	33 81       	ldd	r19, Z+3	; 0x03
    2b20:	12 96       	adiw	r26, 0x02	; 2
    2b22:	8d 91       	ld	r24, X+
    2b24:	9c 91       	ld	r25, X
    2b26:	13 97       	sbiw	r26, 0x03	; 3
    2b28:	82 17       	cp	r24, r18
    2b2a:	93 07       	cpc	r25, r19
    2b2c:	94 f0       	brlt	.+36     	; 0x2b52 <__fpcmp_parts_f+0x8a>
    2b2e:	28 17       	cp	r18, r24
    2b30:	39 07       	cpc	r19, r25
    2b32:	bc f0       	brlt	.+46     	; 0x2b62 <__fpcmp_parts_f+0x9a>
    2b34:	24 81       	ldd	r18, Z+4	; 0x04
    2b36:	35 81       	ldd	r19, Z+5	; 0x05
    2b38:	46 81       	ldd	r20, Z+6	; 0x06
    2b3a:	57 81       	ldd	r21, Z+7	; 0x07
    2b3c:	14 96       	adiw	r26, 0x04	; 4
    2b3e:	8d 91       	ld	r24, X+
    2b40:	9d 91       	ld	r25, X+
    2b42:	0d 90       	ld	r0, X+
    2b44:	bc 91       	ld	r27, X
    2b46:	a0 2d       	mov	r26, r0
    2b48:	82 17       	cp	r24, r18
    2b4a:	93 07       	cpc	r25, r19
    2b4c:	a4 07       	cpc	r26, r20
    2b4e:	b5 07       	cpc	r27, r21
    2b50:	18 f4       	brcc	.+6      	; 0x2b58 <__fpcmp_parts_f+0x90>
    2b52:	66 23       	and	r22, r22
    2b54:	41 f0       	breq	.+16     	; 0x2b66 <__fpcmp_parts_f+0x9e>
    2b56:	0d c0       	rjmp	.+26     	; 0x2b72 <__fpcmp_parts_f+0xaa>
    2b58:	28 17       	cp	r18, r24
    2b5a:	39 07       	cpc	r19, r25
    2b5c:	4a 07       	cpc	r20, r26
    2b5e:	5b 07       	cpc	r21, r27
    2b60:	28 f4       	brcc	.+10     	; 0x2b6c <__fpcmp_parts_f+0xa4>
    2b62:	66 23       	and	r22, r22
    2b64:	31 f0       	breq	.+12     	; 0x2b72 <__fpcmp_parts_f+0xaa>
    2b66:	21 e0       	ldi	r18, 0x01	; 1
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	05 c0       	rjmp	.+10     	; 0x2b76 <__fpcmp_parts_f+0xae>
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <__fpcmp_parts_f+0xae>
    2b72:	2f ef       	ldi	r18, 0xFF	; 255
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	c9 01       	movw	r24, r18
    2b78:	08 95       	ret

00002b7a <__udivmodqi4>:
    2b7a:	99 1b       	sub	r25, r25
    2b7c:	79 e0       	ldi	r23, 0x09	; 9
    2b7e:	04 c0       	rjmp	.+8      	; 0x2b88 <__udivmodqi4_ep>

00002b80 <__udivmodqi4_loop>:
    2b80:	99 1f       	adc	r25, r25
    2b82:	96 17       	cp	r25, r22
    2b84:	08 f0       	brcs	.+2      	; 0x2b88 <__udivmodqi4_ep>
    2b86:	96 1b       	sub	r25, r22

00002b88 <__udivmodqi4_ep>:
    2b88:	88 1f       	adc	r24, r24
    2b8a:	7a 95       	dec	r23
    2b8c:	c9 f7       	brne	.-14     	; 0x2b80 <__udivmodqi4_loop>
    2b8e:	80 95       	com	r24
    2b90:	08 95       	ret

00002b92 <__udivmodhi4>:
    2b92:	aa 1b       	sub	r26, r26
    2b94:	bb 1b       	sub	r27, r27
    2b96:	51 e1       	ldi	r21, 0x11	; 17
    2b98:	07 c0       	rjmp	.+14     	; 0x2ba8 <__udivmodhi4_ep>

00002b9a <__udivmodhi4_loop>:
    2b9a:	aa 1f       	adc	r26, r26
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	a6 17       	cp	r26, r22
    2ba0:	b7 07       	cpc	r27, r23
    2ba2:	10 f0       	brcs	.+4      	; 0x2ba8 <__udivmodhi4_ep>
    2ba4:	a6 1b       	sub	r26, r22
    2ba6:	b7 0b       	sbc	r27, r23

00002ba8 <__udivmodhi4_ep>:
    2ba8:	88 1f       	adc	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	5a 95       	dec	r21
    2bae:	a9 f7       	brne	.-22     	; 0x2b9a <__udivmodhi4_loop>
    2bb0:	80 95       	com	r24
    2bb2:	90 95       	com	r25
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	08 95       	ret

00002bba <__prologue_saves__>:
    2bba:	2f 92       	push	r2
    2bbc:	3f 92       	push	r3
    2bbe:	4f 92       	push	r4
    2bc0:	5f 92       	push	r5
    2bc2:	6f 92       	push	r6
    2bc4:	7f 92       	push	r7
    2bc6:	8f 92       	push	r8
    2bc8:	9f 92       	push	r9
    2bca:	af 92       	push	r10
    2bcc:	bf 92       	push	r11
    2bce:	cf 92       	push	r12
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	ca 1b       	sub	r28, r26
    2be4:	db 0b       	sbc	r29, r27
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	09 94       	ijmp

00002bf2 <__epilogue_restores__>:
    2bf2:	2a 88       	ldd	r2, Y+18	; 0x12
    2bf4:	39 88       	ldd	r3, Y+17	; 0x11
    2bf6:	48 88       	ldd	r4, Y+16	; 0x10
    2bf8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bfa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bfc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bfe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c00:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c02:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c04:	b9 84       	ldd	r11, Y+9	; 0x09
    2c06:	c8 84       	ldd	r12, Y+8	; 0x08
    2c08:	df 80       	ldd	r13, Y+7	; 0x07
    2c0a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c0c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c0e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c10:	1b 81       	ldd	r17, Y+3	; 0x03
    2c12:	aa 81       	ldd	r26, Y+2	; 0x02
    2c14:	b9 81       	ldd	r27, Y+1	; 0x01
    2c16:	ce 0f       	add	r28, r30
    2c18:	d1 1d       	adc	r29, r1
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	ed 01       	movw	r28, r26
    2c26:	08 95       	ret

00002c28 <_exit>:
    2c28:	f8 94       	cli

00002c2a <__stop_program>:
    2c2a:	ff cf       	rjmp	.-2      	; 0x2c2a <__stop_program>
