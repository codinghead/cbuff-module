
cbuff_AVRMEGA_GNU_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b3a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000b0  00800200  00800200  00001bae  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000151  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000788  00000000  00000000  00002492  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000173  00000000  00000000  00002c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152e  00000000  00000000  00002d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000042bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000009e  00000000  00000000  000047fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
       8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
       c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
      f0:	12 e0       	ldi	r17, 0x02	; 2
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
      f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
      fa:	a0 3b       	cpi	r26, 0xB0	; 176
      fc:	b1 07       	cpc	r27, r17
      fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
     100:	0e 94 c3 06 	call	0xd86	; 0xd86 <main>
     104:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <_exit>

00000108 <__bad_interrupt>:
     108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <cbuffInit>:
* \note
* -# Must be called before using any functions in the CBUFF module
*
*******************************************************************************/
void cbuffInit(void)
{
     10c:	df 93       	push	r29
     10e:	cf 93       	push	r28
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
                                        /* Initialise the linked list pointer */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     114:	10 92 01 02 	sts	0x0201, r1
     118:	10 92 00 02 	sts	0x0200, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     11c:	10 92 03 02 	sts	0x0203, r1
     120:	10 92 02 02 	sts	0x0202, r1
}
     124:	cf 91       	pop	r28
     126:	df 91       	pop	r29
     128:	08 95       	ret

0000012a <cbuffDeinit>:
* - The content of any buffers will remain in memory after this function is
*   called. If you have any data there that you don't want other to see, ensure
*   that you clear the buffer's contents before deinitialising this module.
*******************************************************************************/
void cbuffDeinit(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
                                        /* Clear the linked list pointer      */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     132:	10 92 01 02 	sts	0x0201, r1
     136:	10 92 00 02 	sts	0x0200, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     13a:	10 92 03 02 	sts	0x0203, r1
     13e:	10 92 02 02 	sts	0x0202, r1
}
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <cbuffCreate>:
*    greater to be useful. This will, however, not be checked by this function.
*******************************************************************************/
CBUFFNUM   cbuffCreate(CBUFF        * buffer,
                       unsigned int   sizeOfBuffer,
                       CBUFFOBJ     * newCircBufferObj)
{
     148:	df 93       	push	r29
     14a:	cf 93       	push	r28
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	2a 97       	sbiw	r28, 0x0a	; 10
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	f8 94       	cli
     156:	de bf       	out	0x3e, r29	; 62
     158:	0f be       	out	0x3f, r0	; 63
     15a:	cd bf       	out	0x3d, r28	; 61
     15c:	9e 83       	std	Y+6, r25	; 0x06
     15e:	8d 83       	std	Y+5, r24	; 0x05
     160:	78 87       	std	Y+8, r23	; 0x08
     162:	6f 83       	std	Y+7, r22	; 0x07
     164:	5a 87       	std	Y+10, r21	; 0x0a
     166:	49 87       	std	Y+9, r20	; 0x09
    CBUFFOBJ * localCircBufferObj;
    CBUFFNUM circBuffNum = 0x0001;      /* Assign starting buffer number, 1,  */
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	9a 83       	std	Y+2, r25	; 0x02
     16e:	89 83       	std	Y+1, r24	; 0x01
                                        /* next free buffer number            */
                                        /* 0 reserved for alloc failed!       */

                                        /* Ensure there is a buffer and it    */
                                        /* has size                           */
    if ((buffer != (unsigned char *) 0) && (sizeOfBuffer != 0))
     170:	8d 81       	ldd	r24, Y+5	; 0x05
     172:	9e 81       	ldd	r25, Y+6	; 0x06
     174:	00 97       	sbiw	r24, 0x00	; 0
     176:	09 f4       	brne	.+2      	; 0x17a <cbuffCreate+0x32>
     178:	11 c1       	rjmp	.+546    	; 0x39c <cbuffCreate+0x254>
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	00 97       	sbiw	r24, 0x00	; 0
     180:	09 f4       	brne	.+2      	; 0x184 <cbuffCreate+0x3c>
     182:	0c c1       	rjmp	.+536    	; 0x39c <cbuffCreate+0x254>
    {
                                        /* Ensure we got somewhere to create  */
                                        /* our buffer object                  */
        if (newCircBufferObj != (CBUFFOBJ *) 0)
     184:	89 85       	ldd	r24, Y+9	; 0x09
     186:	9a 85       	ldd	r25, Y+10	; 0x0a
     188:	00 97       	sbiw	r24, 0x00	; 0
     18a:	09 f4       	brne	.+2      	; 0x18e <cbuffCreate+0x46>
     18c:	07 c1       	rjmp	.+526    	; 0x39c <cbuffCreate+0x254>
                                        /* Find place for buffer object in    */
                                        /* the linked list and assign number  */
                                        /* If there is nothing in the list,   */
                                        /* just put this object in the first  */
                                        /* position                           */
            if (activeCbuffObjs == 0 && startOfCbuffObjs == (CBUFFOBJ *) 0)
     18e:	80 91 02 02 	lds	r24, 0x0202
     192:	90 91 03 02 	lds	r25, 0x0203
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	09 f0       	breq	.+2      	; 0x19c <cbuffCreate+0x54>
     19a:	6e c0       	rjmp	.+220    	; 0x278 <cbuffCreate+0x130>
     19c:	80 91 00 02 	lds	r24, 0x0200
     1a0:	90 91 01 02 	lds	r25, 0x0201
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	09 f0       	breq	.+2      	; 0x1aa <cbuffCreate+0x62>
     1a8:	67 c0       	rjmp	.+206    	; 0x278 <cbuffCreate+0x130>
            {
                                        /* Insert buffer object at start of   */
                                        /* list                               */
                startOfCbuffObjs = newCircBufferObj;
     1aa:	89 85       	ldd	r24, Y+9	; 0x09
     1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ae:	90 93 01 02 	sts	0x0201, r25
     1b2:	80 93 00 02 	sts	0x0200, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     1b6:	80 91 00 02 	lds	r24, 0x0200
     1ba:	90 91 01 02 	lds	r25, 0x0201
     1be:	2d 81       	ldd	r18, Y+5	; 0x05
     1c0:	3e 81       	ldd	r19, Y+6	; 0x06
     1c2:	fc 01       	movw	r30, r24
     1c4:	31 83       	std	Z+1, r19	; 0x01
     1c6:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     1c8:	80 91 00 02 	lds	r24, 0x0200
     1cc:	90 91 01 02 	lds	r25, 0x0201
     1d0:	2f 81       	ldd	r18, Y+7	; 0x07
     1d2:	38 85       	ldd	r19, Y+8	; 0x08
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	4d 81       	ldd	r20, Y+5	; 0x05
     1da:	5e 81       	ldd	r21, Y+6	; 0x06
     1dc:	24 0f       	add	r18, r20
     1de:	35 1f       	adc	r19, r21
     1e0:	fc 01       	movw	r30, r24
     1e2:	33 83       	std	Z+3, r19	; 0x03
     1e4:	22 83       	std	Z+2, r18	; 0x02
                                              (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     1e6:	80 91 00 02 	lds	r24, 0x0200
     1ea:	90 91 01 02 	lds	r25, 0x0201
     1ee:	2d 81       	ldd	r18, Y+5	; 0x05
     1f0:	3e 81       	ldd	r19, Y+6	; 0x06
     1f2:	fc 01       	movw	r30, r24
     1f4:	35 83       	std	Z+5, r19	; 0x05
     1f6:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     1f8:	80 91 00 02 	lds	r24, 0x0200
     1fc:	90 91 01 02 	lds	r25, 0x0201
     200:	2d 81       	ldd	r18, Y+5	; 0x05
     202:	3e 81       	ldd	r19, Y+6	; 0x06
     204:	fc 01       	movw	r30, r24
     206:	37 83       	std	Z+7, r19	; 0x07
     208:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     20a:	80 91 00 02 	lds	r24, 0x0200
     20e:	90 91 01 02 	lds	r25, 0x0201
     212:	fc 01       	movw	r30, r24
     214:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     216:	80 91 00 02 	lds	r24, 0x0200
     21a:	90 91 01 02 	lds	r25, 0x0201
     21e:	20 91 00 02 	lds	r18, 0x0200
     222:	30 91 01 02 	lds	r19, 0x0201
     226:	f9 01       	movw	r30, r18
     228:	22 85       	ldd	r18, Z+10	; 0x0a
     22a:	20 64       	ori	r18, 0x40	; 64
     22c:	fc 01       	movw	r30, r24
     22e:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to NULL            */
                startOfCbuffObjs->nextCircBufferObj = (CBUFFOBJ *) 0;
     230:	80 91 00 02 	lds	r24, 0x0200
     234:	90 91 01 02 	lds	r25, 0x0201
     238:	fc 01       	movw	r30, r24
     23a:	14 86       	std	Z+12, r1	; 0x0c
     23c:	13 86       	std	Z+11, r1	; 0x0b
                                        /* Assign it a number                 */
                activeCbuffObjs |= circBuffNum;
     23e:	20 91 02 02 	lds	r18, 0x0202
     242:	30 91 03 02 	lds	r19, 0x0203
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	82 2b       	or	r24, r18
     24c:	93 2b       	or	r25, r19
     24e:	90 93 03 02 	sts	0x0203, r25
     252:	80 93 02 02 	sts	0x0202, r24
                startOfCbuffObjs->bufferNumber = circBuffNum;
     256:	80 91 00 02 	lds	r24, 0x0200
     25a:	90 91 01 02 	lds	r25, 0x0201
     25e:	29 81       	ldd	r18, Y+1	; 0x01
     260:	3a 81       	ldd	r19, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	31 87       	std	Z+9, r19	; 0x09
     266:	20 87       	std	Z+8, r18	; 0x08
                                        /* Return buffer number               */
                return startOfCbuffObjs->bufferNumber;
     268:	80 91 00 02 	lds	r24, 0x0200
     26c:	90 91 01 02 	lds	r25, 0x0201
     270:	fc 01       	movw	r30, r24
     272:	80 85       	ldd	r24, Z+8	; 0x08
     274:	91 85       	ldd	r25, Z+9	; 0x09
     276:	94 c0       	rjmp	.+296    	; 0x3a0 <cbuffCreate+0x258>
            }
                                        /* Otherwise, if we haven't allocated */
                                        /* all the cbuff objects we can       */
                                        /* support, insert another            */
            else if (activeCbuffObjs != 0xFFFF)
     278:	80 91 02 02 	lds	r24, 0x0202
     27c:	90 91 03 02 	lds	r25, 0x0203
     280:	ff ef       	ldi	r31, 0xFF	; 255
     282:	8f 3f       	cpi	r24, 0xFF	; 255
     284:	9f 07       	cpc	r25, r31
     286:	09 f4       	brne	.+2      	; 0x28a <cbuffCreate+0x142>
     288:	89 c0       	rjmp	.+274    	; 0x39c <cbuffCreate+0x254>
            {
                                        /* Insert this object at the start of */
                                        /* the list                           */
                localCircBufferObj = startOfCbuffObjs;
     28a:	80 91 00 02 	lds	r24, 0x0200
     28e:	90 91 01 02 	lds	r25, 0x0201
     292:	9c 83       	std	Y+4, r25	; 0x04
     294:	8b 83       	std	Y+3, r24	; 0x03
                startOfCbuffObjs = newCircBufferObj;
     296:	89 85       	ldd	r24, Y+9	; 0x09
     298:	9a 85       	ldd	r25, Y+10	; 0x0a
     29a:	90 93 01 02 	sts	0x0201, r25
     29e:	80 93 00 02 	sts	0x0200, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     2a2:	80 91 00 02 	lds	r24, 0x0200
     2a6:	90 91 01 02 	lds	r25, 0x0201
     2aa:	2d 81       	ldd	r18, Y+5	; 0x05
     2ac:	3e 81       	ldd	r19, Y+6	; 0x06
     2ae:	fc 01       	movw	r30, r24
     2b0:	31 83       	std	Z+1, r19	; 0x01
     2b2:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     2b4:	80 91 00 02 	lds	r24, 0x0200
     2b8:	90 91 01 02 	lds	r25, 0x0201
     2bc:	2f 81       	ldd	r18, Y+7	; 0x07
     2be:	38 85       	ldd	r19, Y+8	; 0x08
     2c0:	21 50       	subi	r18, 0x01	; 1
     2c2:	30 40       	sbci	r19, 0x00	; 0
     2c4:	4d 81       	ldd	r20, Y+5	; 0x05
     2c6:	5e 81       	ldd	r21, Y+6	; 0x06
     2c8:	24 0f       	add	r18, r20
     2ca:	35 1f       	adc	r19, r21
     2cc:	fc 01       	movw	r30, r24
     2ce:	33 83       	std	Z+3, r19	; 0x03
     2d0:	22 83       	std	Z+2, r18	; 0x02
                                                  (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     2d2:	80 91 00 02 	lds	r24, 0x0200
     2d6:	90 91 01 02 	lds	r25, 0x0201
     2da:	2d 81       	ldd	r18, Y+5	; 0x05
     2dc:	3e 81       	ldd	r19, Y+6	; 0x06
     2de:	fc 01       	movw	r30, r24
     2e0:	35 83       	std	Z+5, r19	; 0x05
     2e2:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     2e4:	80 91 00 02 	lds	r24, 0x0200
     2e8:	90 91 01 02 	lds	r25, 0x0201
     2ec:	2d 81       	ldd	r18, Y+5	; 0x05
     2ee:	3e 81       	ldd	r19, Y+6	; 0x06
     2f0:	fc 01       	movw	r30, r24
     2f2:	37 83       	std	Z+7, r19	; 0x07
     2f4:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     2f6:	80 91 00 02 	lds	r24, 0x0200
     2fa:	90 91 01 02 	lds	r25, 0x0201
     2fe:	fc 01       	movw	r30, r24
     300:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     302:	80 91 00 02 	lds	r24, 0x0200
     306:	90 91 01 02 	lds	r25, 0x0201
     30a:	20 91 00 02 	lds	r18, 0x0200
     30e:	30 91 01 02 	lds	r19, 0x0201
     312:	f9 01       	movw	r30, r18
     314:	22 85       	ldd	r18, Z+10	; 0x0a
     316:	20 64       	ori	r18, 0x40	; 64
     318:	fc 01       	movw	r30, r24
     31a:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to next buffer     */
                                        /* object                             */
                startOfCbuffObjs->nextCircBufferObj = localCircBufferObj;
     31c:	80 91 00 02 	lds	r24, 0x0200
     320:	90 91 01 02 	lds	r25, 0x0201
     324:	2b 81       	ldd	r18, Y+3	; 0x03
     326:	3c 81       	ldd	r19, Y+4	; 0x04
     328:	fc 01       	movw	r30, r24
     32a:	34 87       	std	Z+12, r19	; 0x0c
     32c:	23 87       	std	Z+11, r18	; 0x0b
                                        /* Find a free cbuff number for this  */
                                        /* buffer                             */
                                        /* Cbuff Number '1' is assigned, so   */
                                        /* start looking from '2' for a free  */
                                        /* number                             */
                circBuffNum <<= 1;
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	9a 83       	std	Y+2, r25	; 0x02
     338:	89 83       	std	Y+1, r24	; 0x01
                
                do
                {
                    if (!(activeCbuffObjs & circBuffNum))
     33a:	20 91 02 02 	lds	r18, 0x0202
     33e:	30 91 03 02 	lds	r19, 0x0203
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	9a 81       	ldd	r25, Y+2	; 0x02
     346:	82 23       	and	r24, r18
     348:	93 23       	and	r25, r19
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	e9 f4       	brne	.+58     	; 0x388 <cbuffCreate+0x240>
                    {
                                        /* Assign the buffer number           */
                        activeCbuffObjs |= circBuffNum;
     34e:	20 91 02 02 	lds	r18, 0x0202
     352:	30 91 03 02 	lds	r19, 0x0203
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	82 2b       	or	r24, r18
     35c:	93 2b       	or	r25, r19
     35e:	90 93 03 02 	sts	0x0203, r25
     362:	80 93 02 02 	sts	0x0202, r24
                        startOfCbuffObjs->bufferNumber = circBuffNum;
     366:	80 91 00 02 	lds	r24, 0x0200
     36a:	90 91 01 02 	lds	r25, 0x0201
     36e:	29 81       	ldd	r18, Y+1	; 0x01
     370:	3a 81       	ldd	r19, Y+2	; 0x02
     372:	fc 01       	movw	r30, r24
     374:	31 87       	std	Z+9, r19	; 0x09
     376:	20 87       	std	Z+8, r18	; 0x08
                        return startOfCbuffObjs->bufferNumber;
     378:	80 91 00 02 	lds	r24, 0x0200
     37c:	90 91 01 02 	lds	r25, 0x0201
     380:	fc 01       	movw	r30, r24
     382:	80 85       	ldd	r24, Z+8	; 0x08
     384:	91 85       	ldd	r25, Z+9	; 0x09
     386:	0c c0       	rjmp	.+24     	; 0x3a0 <cbuffCreate+0x258>
                    }
                                        /* That wasn't free; try next bit     */
                    circBuffNum <<= 1;
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	9a 81       	ldd	r25, Y+2	; 0x02
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	9a 83       	std	Y+2, r25	; 0x02
     392:	89 83       	std	Y+1, r24	; 0x01
                                        /* Mask just in case unsigned int is  */
                                        /* bigger than 16-bits                */
                    circBuffNum &= 0xFFFF;
                } while(circBuffNum != 0x0000);
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	00 97       	sbiw	r24, 0x00	; 0
     39a:	79 f6       	brne	.-98     	; 0x33a <cbuffCreate+0x1f2>
            }
        }
	}
                                        /* If buffer allocation failed,       */
                                        /* return 0 to callee                 */
    return 0;
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
}
     3a0:	2a 96       	adiw	r28, 0x0a	; 10
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	cf 91       	pop	r28
     3ae:	df 91       	pop	r29
     3b0:	08 95       	ret

000003b2 <cbuffDestroy>:
* -# Destroying a buffer object does not delete the buffer's content, nor free
*   the associated CBUFFOBJ memory used
* -# An open buffer cannot be destroyed. Such a case returns a FAIL
*******************************************************************************/
unsigned char cbuffDestroy(CBUFFNUM bufferNumber)
{
     3b2:	df 93       	push	r29
     3b4:	cf 93       	push	r28
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <cbuffDestroy+0x6>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <cbuffDestroy+0x8>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <cbuffDestroy+0xa>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	9e 83       	std	Y+6, r25	; 0x06
     3c2:	8d 83       	std	Y+5, r24	; 0x05
    CBUFFOBJ * localCircBufferObj;
    CBUFFOBJ * previousCircBufferObj;
                                        /* Make sure there is something to    */
                                        /* remove                             */
    if (startOfCbuffObjs != (CBUFFOBJ *) 0)
     3c4:	80 91 00 02 	lds	r24, 0x0200
     3c8:	90 91 01 02 	lds	r25, 0x0201
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <cbuffDestroy+0x20>
     3d0:	75 c0       	rjmp	.+234    	; 0x4bc <cbuffDestroy+0x10a>
    {
                                        /* Check if first object is the one   */
                                        /* we are looking for                 */
        if (startOfCbuffObjs->bufferNumber == bufferNumber)
     3d2:	80 91 00 02 	lds	r24, 0x0200
     3d6:	90 91 01 02 	lds	r25, 0x0201
     3da:	fc 01       	movw	r30, r24
     3dc:	20 85       	ldd	r18, Z+8	; 0x08
     3de:	31 85       	ldd	r19, Z+9	; 0x09
     3e0:	8d 81       	ldd	r24, Y+5	; 0x05
     3e2:	9e 81       	ldd	r25, Y+6	; 0x06
     3e4:	28 17       	cp	r18, r24
     3e6:	39 07       	cpc	r19, r25
     3e8:	e1 f4       	brne	.+56     	; 0x422 <cbuffDestroy+0x70>
        {
                                        /* Copy where this object is pointing */
                                        /* to into startOfCbuffObjs           */
            startOfCbuffObjs = startOfCbuffObjs->nextCircBufferObj;
     3ea:	80 91 00 02 	lds	r24, 0x0200
     3ee:	90 91 01 02 	lds	r25, 0x0201
     3f2:	fc 01       	movw	r30, r24
     3f4:	83 85       	ldd	r24, Z+11	; 0x0b
     3f6:	94 85       	ldd	r25, Z+12	; 0x0c
     3f8:	90 93 01 02 	sts	0x0201, r25
     3fc:	80 93 00 02 	sts	0x0200, r24
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
            activeCbuffObjs &= ~bufferNumber;
     400:	8d 81       	ldd	r24, Y+5	; 0x05
     402:	9e 81       	ldd	r25, Y+6	; 0x06
     404:	9c 01       	movw	r18, r24
     406:	20 95       	com	r18
     408:	30 95       	com	r19
     40a:	80 91 02 02 	lds	r24, 0x0202
     40e:	90 91 03 02 	lds	r25, 0x0203
     412:	82 23       	and	r24, r18
     414:	93 23       	and	r25, r19
     416:	90 93 03 02 	sts	0x0203, r25
     41a:	80 93 02 02 	sts	0x0202, r24
                                        /* Destroyed the desired object       */
            return CBUFF_DESTROY_OK;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	4e c0       	rjmp	.+156    	; 0x4be <cbuffDestroy+0x10c>
        }
                                        /* Otherwise loop through all objects */
                                        /* if there are some                  */
        else if (startOfCbuffObjs->nextCircBufferObj != (CBUFFOBJ *) 0)
     422:	80 91 00 02 	lds	r24, 0x0200
     426:	90 91 01 02 	lds	r25, 0x0201
     42a:	fc 01       	movw	r30, r24
     42c:	83 85       	ldd	r24, Z+11	; 0x0b
     42e:	94 85       	ldd	r25, Z+12	; 0x0c
     430:	00 97       	sbiw	r24, 0x00	; 0
     432:	09 f4       	brne	.+2      	; 0x436 <cbuffDestroy+0x84>
     434:	43 c0       	rjmp	.+134    	; 0x4bc <cbuffDestroy+0x10a>
        {
                                        /* Keep a copy of previous object     */
                                        /* pointer                            */
            previousCircBufferObj = startOfCbuffObjs;
     436:	80 91 00 02 	lds	r24, 0x0200
     43a:	90 91 01 02 	lds	r25, 0x0201
     43e:	9c 83       	std	Y+4, r25	; 0x04
     440:	8b 83       	std	Y+3, r24	; 0x03
                                        /* Get next object in the list        */
            localCircBufferObj = startOfCbuffObjs->nextCircBufferObj;
     442:	80 91 00 02 	lds	r24, 0x0200
     446:	90 91 01 02 	lds	r25, 0x0201
     44a:	fc 01       	movw	r30, r24
     44c:	83 85       	ldd	r24, Z+11	; 0x0b
     44e:	94 85       	ldd	r25, Z+12	; 0x0c
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	89 83       	std	Y+1, r24	; 0x01
                                        /* Loop through each item and check   */
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	fc 01       	movw	r30, r24
     45a:	20 85       	ldd	r18, Z+8	; 0x08
     45c:	31 85       	ldd	r19, Z+9	; 0x09
     45e:	8d 81       	ldd	r24, Y+5	; 0x05
     460:	9e 81       	ldd	r25, Y+6	; 0x06
     462:	28 17       	cp	r18, r24
     464:	39 07       	cpc	r19, r25
     466:	d9 f4       	brne	.+54     	; 0x49e <cbuffDestroy+0xec>
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
                                          localCircBufferObj->nextCircBufferObj;
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	fc 01       	movw	r30, r24
     46e:	23 85       	ldd	r18, Z+11	; 0x0b
     470:	34 85       	ldd	r19, Z+12	; 0x0c
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	9c 81       	ldd	r25, Y+4	; 0x04
     476:	fc 01       	movw	r30, r24
     478:	34 87       	std	Z+12, r19	; 0x0c
     47a:	23 87       	std	Z+11, r18	; 0x0b
                                          localCircBufferObj->nextCircBufferObj;
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
                    activeCbuffObjs &= ~bufferNumber;
     47c:	8d 81       	ldd	r24, Y+5	; 0x05
     47e:	9e 81       	ldd	r25, Y+6	; 0x06
     480:	9c 01       	movw	r18, r24
     482:	20 95       	com	r18
     484:	30 95       	com	r19
     486:	80 91 02 02 	lds	r24, 0x0202
     48a:	90 91 03 02 	lds	r25, 0x0203
     48e:	82 23       	and	r24, r18
     490:	93 23       	and	r25, r19
     492:	90 93 03 02 	sts	0x0203, r25
     496:	80 93 02 02 	sts	0x0202, r24
                                        /* Destroyed the desired object       */
                    return CBUFF_DESTROY_OK;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	10 c0       	rjmp	.+32     	; 0x4be <cbuffDestroy+0x10c>
                }
                else
                {
                                        /* That wasn't it                     */
                                        /* Move to next object in the list    */
                    previousCircBufferObj = localCircBufferObj;
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	9c 83       	std	Y+4, r25	; 0x04
     4a4:	8b 83       	std	Y+3, r24	; 0x03
                    localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	fc 01       	movw	r30, r24
     4ac:	83 85       	ldd	r24, Z+11	; 0x0b
     4ae:	94 85       	ldd	r25, Z+12	; 0x0c
     4b0:	9a 83       	std	Y+2, r25	; 0x02
     4b2:	89 83       	std	Y+1, r24	; 0x01
                }
            } while (localCircBufferObj != (CBUFFOBJ *) 0);
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	00 97       	sbiw	r24, 0x00	; 0
     4ba:	61 f6       	brne	.-104    	; 0x454 <cbuffDestroy+0xa2>
        }
        
    }
                                        /* Couldn't find the desired object   */
    return CBUFF_DESTROY_FAIL;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
}
     4be:	26 96       	adiw	r28, 0x06	; 6
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	cf 91       	pop	r28
     4cc:	df 91       	pop	r29
     4ce:	08 95       	ret

000004d0 <cbuffOpen>:
* \note
* -# Caller must have created (cbuffCreate()) at least one circular buffer
*    object before calling this function
*******************************************************************************/
HCBUFF cbuffOpen(CBUFFNUM bufferNumber)
{
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <cbuffOpen+0x6>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <cbuffOpen+0x8>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	9c 83       	std	Y+4, r25	; 0x04
     4de:	8b 83       	std	Y+3, r24	; 0x03
	CBUFFOBJ * localCircBufferObj;

                                        /* Check that a CBUFFNUM object    */
                                        /* exists with bufferNumber           */
    localCircBufferObj = startOfCbuffObjs;
     4e0:	80 91 00 02 	lds	r24, 0x0200
     4e4:	90 91 01 02 	lds	r25, 0x0201
     4e8:	9a 83       	std	Y+2, r25	; 0x02
     4ea:	89 83       	std	Y+1, r24	; 0x01

    do
    {
	    if (localCircBufferObj->bufferNumber == bufferNumber)
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 85       	ldd	r18, Z+8	; 0x08
     4f4:	31 85       	ldd	r19, Z+9	; 0x09
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	9c 81       	ldd	r25, Y+4	; 0x04
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	d1 f4       	brne	.+52     	; 0x534 <cbuffOpen+0x64>
	    {
    	                                /* Check buffer is not already open   */
            if (!(localCircBufferObj->localFlag & CBUFF_OPEN))
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	fc 01       	movw	r30, r24
     506:	82 85       	ldd	r24, Z+10	; 0x0a
     508:	88 2f       	mov	r24, r24
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	80 72       	andi	r24, 0x20	; 32
     50e:	90 70       	andi	r25, 0x00	; 0
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	69 f4       	brne	.+26     	; 0x52e <cbuffOpen+0x5e>
            {
                                        /* Note that it is now in use         */
                localCircBufferObj->localFlag |= CBUFF_OPEN;
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	9a 81       	ldd	r25, Y+2	; 0x02
     518:	fc 01       	movw	r30, r24
     51a:	82 85       	ldd	r24, Z+10	; 0x0a
     51c:	28 2f       	mov	r18, r24
     51e:	20 62       	ori	r18, 0x20	; 32
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	fc 01       	movw	r30, r24
     526:	22 87       	std	Z+10, r18	; 0x0a
    	                                /* Return handle to it                */
    	        return localCircBufferObj;
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	10 c0       	rjmp	.+32     	; 0x54e <cbuffOpen+0x7e>
    	    }
    	                                /* If buffer is already open, return  */
    	                                /* NULL handle pointer                */
    	    else
    	    {
        	    return (CBUFFOBJ *) 0;
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0d c0       	rjmp	.+26     	; 0x54e <cbuffOpen+0x7e>
        	}
    	}
    	else
    	{
        	localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	fc 01       	movw	r30, r24
     53a:	83 85       	ldd	r24, Z+11	; 0x0b
     53c:	94 85       	ldd	r25, Z+12	; 0x0c
     53e:	9a 83       	std	Y+2, r25	; 0x02
     540:	89 83       	std	Y+1, r24	; 0x01
        }
	} while (localCircBufferObj != (CBUFFOBJ *) 0);
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	89 f6       	brne	.-94     	; 0x4ec <cbuffOpen+0x1c>

    	                                /* Return handle to NULL otherwise    */
    return (CBUFFOBJ *) 0;
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	08 95       	ret

0000055c <cbuffClose>:
* \note
* -# Caller must have 'allocated' and opened at least one circular buffer object
*    before calling this function
*******************************************************************************/
CBUFFNUM cbuffClose(HCBUFF hCircBuffer)
{
     55c:	df 93       	push	r29
     55e:	cf 93       	push	r28
     560:	00 d0       	rcall	.+0      	; 0x562 <cbuffClose+0x6>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	89 83       	std	Y+1, r24	; 0x01
    	                                /* Check buffer is actually open      */
    if (hCircBuffer->localFlag & CBUFF_OPEN)
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	fc 01       	movw	r30, r24
     570:	82 85       	ldd	r24, Z+10	; 0x0a
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	80 72       	andi	r24, 0x20	; 32
     578:	90 70       	andi	r25, 0x00	; 0
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	81 f0       	breq	.+32     	; 0x59e <cbuffClose+0x42>
    {
    	                                /* Note that this buffer object is    */
    	                                /* closed                             */
        hCircBuffer->localFlag &= ~CBUFF_OPEN;
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	fc 01       	movw	r30, r24
     584:	82 85       	ldd	r24, Z+10	; 0x0a
     586:	28 2f       	mov	r18, r24
     588:	2f 7d       	andi	r18, 0xDF	; 223
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	fc 01       	movw	r30, r24
     590:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Return buffer object's buffer      */
                                        /* number                             */
        return hCircBuffer->bufferNumber;
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	fc 01       	movw	r30, r24
     598:	80 85       	ldd	r24, Z+8	; 0x08
     59a:	91 85       	ldd	r25, Z+9	; 0x09
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <cbuffClose+0x46>
    }
                                        /* Otherwise return 0 to say that     */
                                        /* buffer object wasn't open          */
    else
    {
        return (CBUFFNUM) 0;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	cf 91       	pop	r28
     5a8:	df 91       	pop	r29
     5aa:	08 95       	ret

000005ac <cbuffPutByte>:
* -# cbuffOpen() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned char cbuffPutByte(HCBUFF hCircBuffer,
                           CBUFF  data)
{
     5ac:	df 93       	push	r29
     5ae:	cf 93       	push	r28
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <cbuffPutByte+0x6>
     5b2:	0f 92       	push	r0
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	9a 83       	std	Y+2, r25	; 0x02
     5ba:	89 83       	std	Y+1, r24	; 0x01
     5bc:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	fc 01       	movw	r30, r24
     5c4:	82 85       	ldd	r24, Z+10	; 0x0a
     5c6:	88 23       	and	r24, r24
     5c8:	14 f4       	brge	.+4      	; 0x5ce <cbuffPutByte+0x22>
    {
        return CBUFF_PUT_FAIL;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	4e c0       	rjmp	.+156    	; 0x66a <cbuffPutByte+0xbe>
    }

    *hCircBuffer->inPointer = data;     /* Put data in buffer                 */
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	fc 01       	movw	r30, r24
     5d4:	84 81       	ldd	r24, Z+4	; 0x04
     5d6:	95 81       	ldd	r25, Z+5	; 0x05
     5d8:	2b 81       	ldd	r18, Y+3	; 0x03
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18

    hCircBuffer->inPointer++;           /* Increment pointer                  */
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	9a 81       	ldd	r25, Y+2	; 0x02
     5e2:	fc 01       	movw	r30, r24
     5e4:	84 81       	ldd	r24, Z+4	; 0x04
     5e6:	95 81       	ldd	r25, Z+5	; 0x05
     5e8:	9c 01       	movw	r18, r24
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	fc 01       	movw	r30, r24
     5f4:	35 83       	std	Z+5, r19	; 0x05
     5f6:	24 83       	std	Z+4, r18	; 0x04

                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	9a 81       	ldd	r25, Y+2	; 0x02
     5fc:	fc 01       	movw	r30, r24
     5fe:	82 85       	ldd	r24, Z+10	; 0x0a
     600:	28 2f       	mov	r18, r24
     602:	2f 7b       	andi	r18, 0xBF	; 191
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	9a 81       	ldd	r25, Y+2	; 0x02
     608:	fc 01       	movw	r30, r24
     60a:	22 87       	std	Z+10, r18	; 0x0a

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
    if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	fc 01       	movw	r30, r24
     612:	24 81       	ldd	r18, Z+4	; 0x04
     614:	35 81       	ldd	r19, Z+5	; 0x05
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	fc 01       	movw	r30, r24
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	82 17       	cp	r24, r18
     622:	93 07       	cpc	r25, r19
     624:	50 f4       	brcc	.+20     	; 0x63a <cbuffPutByte+0x8e>
    {
        hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	fc 01       	movw	r30, r24
     62c:	20 81       	ld	r18, Z
     62e:	31 81       	ldd	r19, Z+1	; 0x01
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	9a 81       	ldd	r25, Y+2	; 0x02
     634:	fc 01       	movw	r30, r24
     636:	35 83       	std	Z+5, r19	; 0x05
     638:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	fc 01       	movw	r30, r24
     640:	24 81       	ldd	r18, Z+4	; 0x04
     642:	35 81       	ldd	r19, Z+5	; 0x05
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	fc 01       	movw	r30, r24
     64a:	86 81       	ldd	r24, Z+6	; 0x06
     64c:	97 81       	ldd	r25, Z+7	; 0x07
     64e:	28 17       	cp	r18, r24
     650:	39 07       	cpc	r19, r25
     652:	51 f4       	brne	.+20     	; 0x668 <cbuffPutByte+0xbc>
    {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
        hCircBuffer->localFlag |= CBUFF_FULL;
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	fc 01       	movw	r30, r24
     65a:	82 85       	ldd	r24, Z+10	; 0x0a
     65c:	28 2f       	mov	r18, r24
     65e:	20 68       	ori	r18, 0x80	; 128
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	fc 01       	movw	r30, r24
     666:	22 87       	std	Z+10, r18	; 0x0a
    }

    return CBUFF_PUT_OK;
     668:	81 e0       	ldi	r24, 0x01	; 1
}
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	cf 91       	pop	r28
     672:	df 91       	pop	r29
     674:	08 95       	ret

00000676 <cbuffGetSpace>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetSpace(HCBUFF hCircBuffer)
{
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	00 d0       	rcall	.+0      	; 0x67c <cbuffGetSpace+0x6>
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
#endif

                                        /* If CBUFF_FULL is              */
                                        /* set, then there is no space in     */
                                        /* buffer; simply return 0            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	fc 01       	movw	r30, r24
     68a:	82 85       	ldd	r24, Z+10	; 0x0a
     68c:	88 23       	and	r24, r24
     68e:	1c f4       	brge	.+6      	; 0x696 <cbuffGetSpace+0x20>
    {
        return 0;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	5a c0       	rjmp	.+180    	; 0x74a <cbuffGetSpace+0xd4>
    }
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	fc 01       	movw	r30, r24
     69c:	82 85       	ldd	r24, Z+10	; 0x0a
     69e:	88 2f       	mov	r24, r24
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	80 74       	andi	r24, 0x40	; 64
     6a4:	90 70       	andi	r25, 0x00	; 0
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	89 f0       	breq	.+34     	; 0x6cc <cbuffGetSpace+0x56>
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	fc 01       	movw	r30, r24
     6b0:	82 81       	ldd	r24, Z+2	; 0x02
     6b2:	93 81       	ldd	r25, Z+3	; 0x03
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	9c 01       	movw	r18, r24
                                hCircBuffer->startOfBuffer);
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	fc 01       	movw	r30, r24
     6be:	80 81       	ld	r24, Z
     6c0:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     6c2:	a9 01       	movw	r20, r18
     6c4:	48 1b       	sub	r20, r24
     6c6:	59 0b       	sbc	r21, r25
     6c8:	ca 01       	movw	r24, r20
     6ca:	3f c0       	rjmp	.+126    	; 0x74a <cbuffGetSpace+0xd4>
                                        /* If inPointer is larger than the    */
                                        /* outPointer in physical value, the  */
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	fc 01       	movw	r30, r24
     6d2:	24 81       	ldd	r18, Z+4	; 0x04
     6d4:	35 81       	ldd	r19, Z+5	; 0x05
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	fc 01       	movw	r30, r24
     6dc:	86 81       	ldd	r24, Z+6	; 0x06
     6de:	97 81       	ldd	r25, Z+7	; 0x07
     6e0:	82 17       	cp	r24, r18
     6e2:	93 07       	cpc	r25, r19
     6e4:	18 f5       	brcc	.+70     	; 0x72c <cbuffGetSpace+0xb6>
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	fc 01       	movw	r30, r24
     6ec:	82 81       	ldd	r24, Z+2	; 0x02
     6ee:	93 81       	ldd	r25, Z+3	; 0x03
     6f0:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	fc 01       	movw	r30, r24
     6f8:	80 81       	ld	r24, Z
     6fa:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     6fc:	a9 01       	movw	r20, r18
     6fe:	48 1b       	sub	r20, r24
     700:	59 0b       	sbc	r21, r25
     702:	ca 01       	movw	r24, r20
     704:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
                                 hCircBuffer->outPointer));
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	fc 01       	movw	r30, r24
     70c:	86 81       	ldd	r24, Z+6	; 0x06
     70e:	97 81       	ldd	r25, Z+7	; 0x07
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
     710:	ac 01       	movw	r20, r24
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	fc 01       	movw	r30, r24
     718:	84 81       	ldd	r24, Z+4	; 0x04
     71a:	95 81       	ldd	r25, Z+5	; 0x05
     71c:	ba 01       	movw	r22, r20
     71e:	68 1b       	sub	r22, r24
     720:	79 0b       	sbc	r23, r25
     722:	cb 01       	movw	r24, r22
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     724:	82 0f       	add	r24, r18
     726:	93 1f       	adc	r25, r19
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	0f c0       	rjmp	.+30     	; 0x74a <cbuffGetSpace+0xd4>
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	fc 01       	movw	r30, r24
     732:	86 81       	ldd	r24, Z+6	; 0x06
     734:	97 81       	ldd	r25, Z+7	; 0x07
     736:	9c 01       	movw	r18, r24
                               hCircBuffer->inPointer);
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	fc 01       	movw	r30, r24
     73e:	84 81       	ldd	r24, Z+4	; 0x04
     740:	95 81       	ldd	r25, Z+5	; 0x05
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     742:	a9 01       	movw	r20, r18
     744:	48 1b       	sub	r20, r24
     746:	59 0b       	sbc	r21, r25
     748:	ca 01       	movw	r24, r20
#endif
#if 0
        return (localOutPointer - localInPointer);
#endif
    }
}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	cf 91       	pop	r28
     750:	df 91       	pop	r29
     752:	08 95       	ret

00000754 <cbuffGetFill>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	00 d0       	rcall	.+0      	; 0x75e <cbuffGetFill+0xa>
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	9a 83       	std	Y+2, r25	; 0x02
     764:	89 83       	std	Y+1, r24	; 0x01
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	fc 01       	movw	r30, r24
     76c:	82 81       	ldd	r24, Z+2	; 0x02
     76e:	93 81       	ldd	r25, Z+3	; 0x03
     770:	9c 01       	movw	r18, r24
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	fc 01       	movw	r30, r24
     778:	80 81       	ld	r24, Z
     77a:	91 81       	ldd	r25, Z+1	; 0x01
     77c:	a9 01       	movw	r20, r18
     77e:	48 1b       	sub	r20, r24
     780:	59 0b       	sbc	r21, r25
     782:	ca 01       	movw	r24, r20
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
     784:	8c 01       	movw	r16, r24
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
     78e:	f8 01       	movw	r30, r16
     790:	e8 1b       	sub	r30, r24
     792:	f9 0b       	sbc	r31, r25
     794:	cf 01       	movw	r24, r30
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     796:	01 96       	adiw	r24, 0x01	; 1
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
}
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	cf 91       	pop	r28
     79e:	df 91       	pop	r29
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <cbuffClearBuffer>:
* \todo Consider renaming this function to 'cbuffResetBuffer()' and using this
*       function name for the function to acutally clear all of the data in the
*       buffer.
*******************************************************************************/
void cbuffClearBuffer(HCBUFF hCircBuffer)
{
     7a6:	df 93       	push	r29
     7a8:	cf 93       	push	r28
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <cbuffClearBuffer+0x6>
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	9a 83       	std	Y+2, r25	; 0x02
     7b2:	89 83       	std	Y+1, r24	; 0x01
                                        /* Reset buffer pointers              */
    hCircBuffer->inPointer  = hCircBuffer->startOfBuffer;
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	9a 81       	ldd	r25, Y+2	; 0x02
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 81       	ld	r18, Z
     7bc:	31 81       	ldd	r19, Z+1	; 0x01
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	9a 81       	ldd	r25, Y+2	; 0x02
     7c2:	fc 01       	movw	r30, r24
     7c4:	35 83       	std	Z+5, r19	; 0x05
     7c6:	24 83       	std	Z+4, r18	; 0x04
    hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 81       	ld	r18, Z
     7d0:	31 81       	ldd	r19, Z+1	; 0x01
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	fc 01       	movw	r30, r24
     7d8:	37 83       	std	Z+7, r19	; 0x07
     7da:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
    hCircBuffer->localFlag  = 0x00;
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	fc 01       	movw	r30, r24
     7e2:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
    hCircBuffer->localFlag |= CBUFF_EMPTY;
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
     7e8:	fc 01       	movw	r30, r24
     7ea:	82 85       	ldd	r24, Z+10	; 0x0a
     7ec:	28 2f       	mov	r18, r24
     7ee:	20 64       	ori	r18, 0x40	; 64
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	fc 01       	movw	r30, r24
     7f6:	22 87       	std	Z+10, r18	; 0x0a
}
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	cf 91       	pop	r28
     7fe:	df 91       	pop	r29
     800:	08 95       	ret

00000802 <cbuffGetByte>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffGetByte(HCBUFF       hCircBuffer,
                           CBUFF      * data)
{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	00 d0       	rcall	.+0      	; 0x808 <cbuffGetByte+0x6>
     808:	00 d0       	rcall	.+0      	; 0x80a <cbuffGetByte+0x8>
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	7c 83       	std	Y+4, r23	; 0x04
     814:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	fc 01       	movw	r30, r24
     81c:	82 85       	ldd	r24, Z+10	; 0x0a
     81e:	88 2f       	mov	r24, r24
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	80 74       	andi	r24, 0x40	; 64
     824:	90 70       	andi	r25, 0x00	; 0
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	11 f0       	breq	.+4      	; 0x82e <cbuffGetByte+0x2c>
    {
        return CBUFF_GET_FAIL;
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	51 c0       	rjmp	.+162    	; 0x8d0 <cbuffGetByte+0xce>
    }
                                        /* Read requested byte                */
    *data = *hCircBuffer->outPointer;
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	fc 01       	movw	r30, r24
     834:	86 81       	ldd	r24, Z+6	; 0x06
     836:	97 81       	ldd	r25, Z+7	; 0x07
     838:	fc 01       	movw	r30, r24
     83a:	20 81       	ld	r18, Z
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	9c 81       	ldd	r25, Y+4	; 0x04
     840:	fc 01       	movw	r30, r24
     842:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
    hCircBuffer->outPointer++;
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	fc 01       	movw	r30, r24
     84a:	86 81       	ldd	r24, Z+6	; 0x06
     84c:	97 81       	ldd	r25, Z+7	; 0x07
     84e:	9c 01       	movw	r18, r24
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	89 81       	ldd	r24, Y+1	; 0x01
     856:	9a 81       	ldd	r25, Y+2	; 0x02
     858:	fc 01       	movw	r30, r24
     85a:	37 83       	std	Z+7, r19	; 0x07
     85c:	26 83       	std	Z+6, r18	; 0x06

                                        /* Implement wrap around              */
    if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     85e:	89 81       	ldd	r24, Y+1	; 0x01
     860:	9a 81       	ldd	r25, Y+2	; 0x02
     862:	fc 01       	movw	r30, r24
     864:	26 81       	ldd	r18, Z+6	; 0x06
     866:	37 81       	ldd	r19, Z+7	; 0x07
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	fc 01       	movw	r30, r24
     86e:	82 81       	ldd	r24, Z+2	; 0x02
     870:	93 81       	ldd	r25, Z+3	; 0x03
     872:	82 17       	cp	r24, r18
     874:	93 07       	cpc	r25, r19
     876:	50 f4       	brcc	.+20     	; 0x88c <cbuffGetByte+0x8a>
    {
        hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	fc 01       	movw	r30, r24
     87e:	20 81       	ld	r18, Z
     880:	31 81       	ldd	r19, Z+1	; 0x01
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	fc 01       	movw	r30, r24
     888:	37 83       	std	Z+7, r19	; 0x07
     88a:	26 83       	std	Z+6, r18	; 0x06
    }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	9a 81       	ldd	r25, Y+2	; 0x02
     890:	fc 01       	movw	r30, r24
     892:	26 81       	ldd	r18, Z+6	; 0x06
     894:	37 81       	ldd	r19, Z+7	; 0x07
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	fc 01       	movw	r30, r24
     89c:	84 81       	ldd	r24, Z+4	; 0x04
     89e:	95 81       	ldd	r25, Z+5	; 0x05
     8a0:	28 17       	cp	r18, r24
     8a2:	39 07       	cpc	r19, r25
     8a4:	51 f4       	brne	.+20     	; 0x8ba <cbuffGetByte+0xb8>
    {
                                        /* Note that the buffer is empty      */
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	fc 01       	movw	r30, r24
     8ac:	82 85       	ldd	r24, Z+10	; 0x0a
     8ae:	28 2f       	mov	r18, r24
     8b0:	20 64       	ori	r18, 0x40	; 64
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	fc 01       	movw	r30, r24
     8b8:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	9a 81       	ldd	r25, Y+2	; 0x02
     8be:	fc 01       	movw	r30, r24
     8c0:	82 85       	ldd	r24, Z+10	; 0x0a
     8c2:	28 2f       	mov	r18, r24
     8c4:	2f 77       	andi	r18, 0x7F	; 127
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	fc 01       	movw	r30, r24
     8cc:	22 87       	std	Z+10, r18	; 0x0a

    return CBUFF_GET_OK;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
}
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <cbuffPeekTail>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekTail(HCBUFF   hCircBuffer,
                           CBUFF  * data)
{
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <cbuffPeekTail+0x6>
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <cbuffPeekTail+0x8>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	7c 83       	std	Y+4, r23	; 0x04
     8f0:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	9a 81       	ldd	r25, Y+2	; 0x02
     8f6:	fc 01       	movw	r30, r24
     8f8:	82 85       	ldd	r24, Z+10	; 0x0a
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	80 74       	andi	r24, 0x40	; 64
     900:	90 70       	andi	r25, 0x00	; 0
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	69 f4       	brne	.+26     	; 0x920 <cbuffPeekTail+0x42>
    {
                                        /* Return head value in data          */
        *data = *hCircBuffer->outPointer;
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	fc 01       	movw	r30, r24
     90c:	86 81       	ldd	r24, Z+6	; 0x06
     90e:	97 81       	ldd	r25, Z+7	; 0x07
     910:	fc 01       	movw	r30, r24
     912:	20 81       	ld	r18, Z
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
        return CBUFF_GET_OK;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	01 c0       	rjmp	.+2      	; 0x922 <cbuffPeekTail+0x44>
    }
    else
    {
        return CBUFF_GET_FAIL;
     920:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	cf 91       	pop	r28
     92c:	df 91       	pop	r29
     92e:	08 95       	ret

00000930 <cbuffPeekHead>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekHead(HCBUFF   hCircBuffer,
                            CBUFF  * data)
{
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	00 d0       	rcall	.+0      	; 0x936 <cbuffPeekHead+0x6>
     936:	00 d0       	rcall	.+0      	; 0x938 <cbuffPeekHead+0x8>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
     940:	7c 83       	std	Y+4, r23	; 0x04
     942:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	9a 81       	ldd	r25, Y+2	; 0x02
     948:	fc 01       	movw	r30, r24
     94a:	82 85       	ldd	r24, Z+10	; 0x0a
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	80 74       	andi	r24, 0x40	; 64
     952:	90 70       	andi	r25, 0x00	; 0
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	39 f5       	brne	.+78     	; 0x9a6 <cbuffPeekHead+0x76>
    {
                                        /* If inPointer doesn't point to      */
                                        /* startOfBuffer, return value at     */
                                        /* (inPointer - 1)                    */
        if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	fc 01       	movw	r30, r24
     95e:	24 81       	ldd	r18, Z+4	; 0x04
     960:	35 81       	ldd	r19, Z+5	; 0x05
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	28 17       	cp	r18, r24
     96e:	39 07       	cpc	r19, r25
     970:	69 f0       	breq	.+26     	; 0x98c <cbuffPeekHead+0x5c>
        {
            *data = *(hCircBuffer->inPointer - sizeof(CBUFF));
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	fc 01       	movw	r30, r24
     978:	84 81       	ldd	r24, Z+4	; 0x04
     97a:	95 81       	ldd	r25, Z+5	; 0x05
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	fc 01       	movw	r30, r24
     980:	20 81       	ld	r18, Z
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	9c 81       	ldd	r25, Y+4	; 0x04
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
     98a:	0b c0       	rjmp	.+22     	; 0x9a2 <cbuffPeekHead+0x72>
        }
                                        /* Otherwise handle buffer wrap       */
                                        /* situation                          */
        else
        {
            *data = *hCircBuffer->endOfBuffer;
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	fc 01       	movw	r30, r24
     992:	82 81       	ldd	r24, Z+2	; 0x02
     994:	93 81       	ldd	r25, Z+3	; 0x03
     996:	fc 01       	movw	r30, r24
     998:	20 81       	ld	r18, Z
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	9c 81       	ldd	r25, Y+4	; 0x04
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
        }
        return CBUFF_GET_OK;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <cbuffPeekHead+0x78>
    }
    else
    {
        return CBUFF_GET_FAIL;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	cf 91       	pop	r28
     9b2:	df 91       	pop	r29
     9b4:	08 95       	ret

000009b6 <cbuffUnputByte>:
*    buffer is now empty, this function will fail in its attempt
* -# The data itself is not removed; only the head pointer to the buffer is
*    moved back one position
*******************************************************************************/
unsigned char cbuffUnputByte(HCBUFF  hCircBuffer)
{
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <cbuffUnputByte+0x6>
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unput at    */
                                        /* all. If buffer is empty, do        */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	fc 01       	movw	r30, r24
     9ca:	82 85       	ldd	r24, Z+10	; 0x0a
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	80 74       	andi	r24, 0x40	; 64
     9d2:	90 70       	andi	r25, 0x00	; 0
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	11 f0       	breq	.+4      	; 0x9dc <cbuffUnputByte+0x26>
    {
        return 1;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	47 c0       	rjmp	.+142    	; 0xa6a <cbuffUnputByte+0xb4>
    }
                                        /* unput the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	fc 01       	movw	r30, r24
     9e2:	24 81       	ldd	r18, Z+4	; 0x04
     9e4:	35 81       	ldd	r19, Z+5	; 0x05
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	71 f0       	breq	.+28     	; 0xa12 <cbuffUnputByte+0x5c>
    {
        hCircBuffer->inPointer--;
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	fc 01       	movw	r30, r24
     9fc:	84 81       	ldd	r24, Z+4	; 0x04
     9fe:	95 81       	ldd	r25, Z+5	; 0x05
     a00:	9c 01       	movw	r18, r24
     a02:	21 50       	subi	r18, 0x01	; 1
     a04:	30 40       	sbci	r19, 0x00	; 0
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	9a 81       	ldd	r25, Y+2	; 0x02
     a0a:	fc 01       	movw	r30, r24
     a0c:	35 83       	std	Z+5, r19	; 0x05
     a0e:	24 83       	std	Z+4, r18	; 0x04
     a10:	0a c0       	rjmp	.+20     	; 0xa26 <cbuffUnputByte+0x70>
    }
                                        /* For boundary case implent wrap-    */
                                        /* around                             */
    else
    {
        hCircBuffer->inPointer = hCircBuffer->endOfBuffer;
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	fc 01       	movw	r30, r24
     a18:	22 81       	ldd	r18, Z+2	; 0x02
     a1a:	33 81       	ldd	r19, Z+3	; 0x03
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	fc 01       	movw	r30, r24
     a22:	35 83       	std	Z+5, r19	; 0x05
     a24:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check if buffer is now empty       */
    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	fc 01       	movw	r30, r24
     a2c:	24 81       	ldd	r18, Z+4	; 0x04
     a2e:	35 81       	ldd	r19, Z+5	; 0x05
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	fc 01       	movw	r30, r24
     a36:	86 81       	ldd	r24, Z+6	; 0x06
     a38:	97 81       	ldd	r25, Z+7	; 0x07
     a3a:	28 17       	cp	r18, r24
     a3c:	39 07       	cpc	r19, r25
     a3e:	51 f4       	brne	.+20     	; 0xa54 <cbuffUnputByte+0x9e>
    {
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	fc 01       	movw	r30, r24
     a46:	82 85       	ldd	r24, Z+10	; 0x0a
     a48:	28 2f       	mov	r18, r24
     a4a:	20 64       	ori	r18, 0x40	; 64
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	fc 01       	movw	r30, r24
     a52:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not full  */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	fc 01       	movw	r30, r24
     a5a:	82 85       	ldd	r24, Z+10	; 0x0a
     a5c:	28 2f       	mov	r18, r24
     a5e:	2f 77       	andi	r18, 0x7F	; 127
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	fc 01       	movw	r30, r24
     a66:	22 87       	std	Z+10, r18	; 0x0a

    return 0;
     a68:	80 e0       	ldi	r24, 0x00	; 0
}
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	cf 91       	pop	r28
     a70:	df 91       	pop	r29
     a72:	08 95       	ret

00000a74 <cbuffUngetByte>:
*    values left over after a 'cbuffClearBuffer' will be 'ungot'. The buffer
*    can still be 'ungot' until the tail pointer gets back to the point
*    where it reaches the head pointer.
*******************************************************************************/
unsigned char  cbuffUngetByte(HCBUFF  hCircBuffer)
{
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	00 d0       	rcall	.+0      	; 0xa7a <cbuffUngetByte+0x6>
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unget at    */
                                        /* all. If buffer is full, do         */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	fc 01       	movw	r30, r24
     a88:	82 85       	ldd	r24, Z+10	; 0x0a
     a8a:	88 23       	and	r24, r24
     a8c:	14 f4       	brge	.+4      	; 0xa92 <cbuffUngetByte+0x1e>
    {
        return 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <cbuffUngetByte+0xac>
    }
                                        /* unget the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->outPointer != hCircBuffer->startOfBuffer)
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	fc 01       	movw	r30, r24
     a98:	26 81       	ldd	r18, Z+6	; 0x06
     a9a:	37 81       	ldd	r19, Z+7	; 0x07
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	fc 01       	movw	r30, r24
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	28 17       	cp	r18, r24
     aa8:	39 07       	cpc	r19, r25
     aaa:	71 f0       	breq	.+28     	; 0xac8 <cbuffUngetByte+0x54>
    {
        hCircBuffer->outPointer--;
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	9a 81       	ldd	r25, Y+2	; 0x02
     ab0:	fc 01       	movw	r30, r24
     ab2:	86 81       	ldd	r24, Z+6	; 0x06
     ab4:	97 81       	ldd	r25, Z+7	; 0x07
     ab6:	9c 01       	movw	r18, r24
     ab8:	21 50       	subi	r18, 0x01	; 1
     aba:	30 40       	sbci	r19, 0x00	; 0
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	fc 01       	movw	r30, r24
     ac2:	37 83       	std	Z+7, r19	; 0x07
     ac4:	26 83       	std	Z+6, r18	; 0x06
     ac6:	0a c0       	rjmp	.+20     	; 0xadc <cbuffUngetByte+0x68>
    }
                                        /* For boundary case implementnt      */
                                        /* wraparound                         */
    else
    {
        hCircBuffer->outPointer = hCircBuffer->endOfBuffer;
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	fc 01       	movw	r30, r24
     ace:	22 81       	ldd	r18, Z+2	; 0x02
     ad0:	33 81       	ldd	r19, Z+3	; 0x03
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	fc 01       	movw	r30, r24
     ad8:	37 83       	std	Z+7, r19	; 0x07
     ada:	26 83       	std	Z+6, r18	; 0x06
    }
                                        /* Check if buffer is now full        */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	fc 01       	movw	r30, r24
     ae2:	26 81       	ldd	r18, Z+6	; 0x06
     ae4:	37 81       	ldd	r19, Z+7	; 0x07
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	fc 01       	movw	r30, r24
     aec:	84 81       	ldd	r24, Z+4	; 0x04
     aee:	95 81       	ldd	r25, Z+5	; 0x05
     af0:	28 17       	cp	r18, r24
     af2:	39 07       	cpc	r19, r25
     af4:	51 f4       	brne	.+20     	; 0xb0a <cbuffUngetByte+0x96>
    {
        hCircBuffer->localFlag |= CBUFF_FULL;
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	fc 01       	movw	r30, r24
     afc:	82 85       	ldd	r24, Z+10	; 0x0a
     afe:	28 2f       	mov	r18, r24
     b00:	20 68       	ori	r18, 0x80	; 128
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	9a 81       	ldd	r25, Y+2	; 0x02
     b06:	fc 01       	movw	r30, r24
     b08:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not empty */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	fc 01       	movw	r30, r24
     b10:	82 85       	ldd	r24, Z+10	; 0x0a
     b12:	28 2f       	mov	r18, r24
     b14:	2f 7b       	andi	r18, 0xBF	; 191
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	fc 01       	movw	r30, r24
     b1c:	22 87       	std	Z+10, r18	; 0x0a
    return 0;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
}
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	08 95       	ret

00000b2a <cbuffPutArray>:
* -# This function will not allow the buffer to overflow
*******************************************************************************/
unsigned int  cbuffPutArray(HCBUFF               hCircBuffer,
                            const CBUFF        * data,
                            unsigned int         noOfBytes)
{
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	28 97       	sbiw	r28, 0x08	; 8
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	9c 83       	std	Y+4, r25	; 0x04
     b40:	8b 83       	std	Y+3, r24	; 0x03
     b42:	7e 83       	std	Y+6, r23	; 0x06
     b44:	6d 83       	std	Y+5, r22	; 0x05
     b46:	58 87       	std	Y+8, r21	; 0x08
     b48:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesWritten = 0;
     b4a:	1a 82       	std	Y+2, r1	; 0x02
     b4c:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	fc 01       	movw	r30, r24
     b54:	82 85       	ldd	r24, Z+10	; 0x0a
     b56:	88 23       	and	r24, r24
     b58:	0c f0       	brlt	.+2      	; 0xb5c <cbuffPutArray+0x32>
     b5a:	5b c0       	rjmp	.+182    	; 0xc12 <cbuffPutArray+0xe8>
    {
        return bytesWritten;
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	6e c0       	rjmp	.+220    	; 0xc3e <cbuffPutArray+0x114>


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
    {
                                        /* Put data in buffer                 */
        *hCircBuffer->inPointer = *data;
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	fc 01       	movw	r30, r24
     b68:	84 81       	ldd	r24, Z+4	; 0x04
     b6a:	95 81       	ldd	r25, Z+5	; 0x05
     b6c:	2d 81       	ldd	r18, Y+5	; 0x05
     b6e:	3e 81       	ldd	r19, Y+6	; 0x06
     b70:	f9 01       	movw	r30, r18
     b72:	20 81       	ld	r18, Z
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18

        hCircBuffer->inPointer++;       /* Increment pointer to circular      */
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	fc 01       	movw	r30, r24
     b7e:	84 81       	ldd	r24, Z+4	; 0x04
     b80:	95 81       	ldd	r25, Z+5	; 0x05
     b82:	9c 01       	movw	r18, r24
     b84:	2f 5f       	subi	r18, 0xFF	; 255
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	fc 01       	movw	r30, r24
     b8e:	35 83       	std	Z+5, r19	; 0x05
     b90:	24 83       	std	Z+4, r18	; 0x04
                                        /* buffer                             */

        data++;                         /* Increment pointer to array data    */
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	9e 81       	ldd	r25, Y+6	; 0x06
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9e 83       	std	Y+6, r25	; 0x06
     b9a:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
        if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	fc 01       	movw	r30, r24
     ba2:	24 81       	ldd	r18, Z+4	; 0x04
     ba4:	35 81       	ldd	r19, Z+5	; 0x05
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	fc 01       	movw	r30, r24
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	82 17       	cp	r24, r18
     bb2:	93 07       	cpc	r25, r19
     bb4:	50 f4       	brcc	.+20     	; 0xbca <cbuffPutArray+0xa0>
        {
            hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	fc 01       	movw	r30, r24
     bbc:	20 81       	ld	r18, Z
     bbe:	31 81       	ldd	r19, Z+1	; 0x01
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	fc 01       	movw	r30, r24
     bc6:	35 83       	std	Z+5, r19	; 0x05
     bc8:	24 83       	std	Z+4, r18	; 0x04
        }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

        if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	fc 01       	movw	r30, r24
     bd0:	24 81       	ldd	r18, Z+4	; 0x04
     bd2:	35 81       	ldd	r19, Z+5	; 0x05
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	fc 01       	movw	r30, r24
     bda:	86 81       	ldd	r24, Z+6	; 0x06
     bdc:	97 81       	ldd	r25, Z+7	; 0x07
     bde:	28 17       	cp	r18, r24
     be0:	39 07       	cpc	r19, r25
     be2:	51 f4       	brne	.+20     	; 0xbf8 <cbuffPutArray+0xce>
        {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
            hCircBuffer->localFlag |= CBUFF_FULL;
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	fc 01       	movw	r30, r24
     bea:	82 85       	ldd	r24, Z+10	; 0x0a
     bec:	28 2f       	mov	r18, r24
     bee:	20 68       	ori	r18, 0x80	; 128
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	fc 01       	movw	r30, r24
     bf6:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how much data we've written   */
        bytesWritten++;
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
     c02:	29 81       	ldd	r18, Y+1	; 0x01
     c04:	3a 81       	ldd	r19, Y+2	; 0x02
     c06:	8f 81       	ldd	r24, Y+7	; 0x07
     c08:	98 85       	ldd	r25, Y+8	; 0x08
     c0a:	28 17       	cp	r18, r24
     c0c:	39 07       	cpc	r19, r25
     c0e:	51 f0       	breq	.+20     	; 0xc24 <cbuffPutArray+0xfa>
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <cbuffPutArray+0xea>
    {
        return bytesWritten;
    }


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
     c12:	00 00       	nop
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	fc 01       	movw	r30, r24
     c1a:	82 85       	ldd	r24, Z+10	; 0x0a
     c1c:	88 23       	and	r24, r24
     c1e:	0c f0       	brlt	.+2      	; 0xc22 <cbuffPutArray+0xf8>
     c20:	a0 cf       	rjmp	.-192    	; 0xb62 <cbuffPutArray+0x38>
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <cbuffPutArray+0xfc>
        bytesWritten++;
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
        {
            break;
     c24:	00 00       	nop
        }
    }
                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	fc 01       	movw	r30, r24
     c2c:	82 85       	ldd	r24, Z+10	; 0x0a
     c2e:	28 2f       	mov	r18, r24
     c30:	2f 7b       	andi	r18, 0xBF	; 191
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	fc 01       	movw	r30, r24
     c38:	22 87       	std	Z+10, r18	; 0x0a

    return bytesWritten;
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c3e:	28 96       	adiw	r28, 0x08	; 8
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <cbuffGetArray>:
*    enough to accomodate noOfBytes of data
*******************************************************************************/
unsigned int  cbuffGetArray(HCBUFF               hCircBuffer,
                            CBUFF              * data,
                            unsigned int         noOfBytes)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	28 97       	sbiw	r28, 0x08	; 8
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
     c68:	7e 83       	std	Y+6, r23	; 0x06
     c6a:	6d 83       	std	Y+5, r22	; 0x05
     c6c:	58 87       	std	Y+8, r21	; 0x08
     c6e:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesRead = 0;
     c70:	1a 82       	std	Y+2, r1	; 0x02
     c72:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	fc 01       	movw	r30, r24
     c7a:	82 85       	ldd	r24, Z+10	; 0x0a
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	80 74       	andi	r24, 0x40	; 64
     c82:	90 70       	andi	r25, 0x00	; 0
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	09 f4       	brne	.+2      	; 0xc8a <cbuffGetArray+0x3a>
     c88:	5b c0       	rjmp	.+182    	; 0xd40 <cbuffGetArray+0xf0>
    {
        return bytesRead;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	72 c0       	rjmp	.+228    	; 0xd74 <cbuffGetArray+0x124>
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
    {
                                        /* Read requested byte                */
        *data = *hCircBuffer->outPointer;
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	fc 01       	movw	r30, r24
     c96:	86 81       	ldd	r24, Z+6	; 0x06
     c98:	97 81       	ldd	r25, Z+7	; 0x07
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 81       	ld	r18, Z
     c9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ca0:	9e 81       	ldd	r25, Y+6	; 0x06
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
        hCircBuffer->outPointer++;
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	fc 01       	movw	r30, r24
     cac:	86 81       	ldd	r24, Z+6	; 0x06
     cae:	97 81       	ldd	r25, Z+7	; 0x07
     cb0:	9c 01       	movw	r18, r24
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	fc 01       	movw	r30, r24
     cbc:	37 83       	std	Z+7, r19	; 0x07
     cbe:	26 83       	std	Z+6, r18	; 0x06
                                        /* Increment array data pointer       */
        data++;
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	9e 83       	std	Y+6, r25	; 0x06
     cc8:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement wrap around              */
        if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	fc 01       	movw	r30, r24
     cd0:	26 81       	ldd	r18, Z+6	; 0x06
     cd2:	37 81       	ldd	r19, Z+7	; 0x07
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	fc 01       	movw	r30, r24
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	82 17       	cp	r24, r18
     ce0:	93 07       	cpc	r25, r19
     ce2:	50 f4       	brcc	.+20     	; 0xcf8 <cbuffGetArray+0xa8>
        {
            hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	fc 01       	movw	r30, r24
     cea:	20 81       	ld	r18, Z
     cec:	31 81       	ldd	r19, Z+1	; 0x01
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	fc 01       	movw	r30, r24
     cf4:	37 83       	std	Z+7, r19	; 0x07
     cf6:	26 83       	std	Z+6, r18	; 0x06
        }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
        if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	fc 01       	movw	r30, r24
     cfe:	26 81       	ldd	r18, Z+6	; 0x06
     d00:	37 81       	ldd	r19, Z+7	; 0x07
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	fc 01       	movw	r30, r24
     d08:	84 81       	ldd	r24, Z+4	; 0x04
     d0a:	95 81       	ldd	r25, Z+5	; 0x05
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	51 f4       	brne	.+20     	; 0xd26 <cbuffGetArray+0xd6>
        {
                                        /* Note that the buffer is empty      */
            hCircBuffer->localFlag |= CBUFF_EMPTY;
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	fc 01       	movw	r30, r24
     d18:	82 85       	ldd	r24, Z+10	; 0x0a
     d1a:	28 2f       	mov	r18, r24
     d1c:	20 64       	ori	r18, 0x40	; 64
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	fc 01       	movw	r30, r24
     d24:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how many bytes we've read     */
        bytesRead++;
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	9a 83       	std	Y+2, r25	; 0x02
     d2e:	89 83       	std	Y+1, r24	; 0x01

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
     d30:	29 81       	ldd	r18, Y+1	; 0x01
     d32:	3a 81       	ldd	r19, Y+2	; 0x02
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	28 17       	cp	r18, r24
     d3a:	39 07       	cpc	r19, r25
     d3c:	71 f0       	breq	.+28     	; 0xd5a <cbuffGetArray+0x10a>
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <cbuffGetArray+0xf2>
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
        return bytesRead;
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
     d40:	00 00       	nop
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	fc 01       	movw	r30, r24
     d48:	82 85       	ldd	r24, Z+10	; 0x0a
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	80 74       	andi	r24, 0x40	; 64
     d50:	90 70       	andi	r25, 0x00	; 0
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	09 f4       	brne	.+2      	; 0xd58 <cbuffGetArray+0x108>
     d56:	9c cf       	rjmp	.-200    	; 0xc90 <cbuffGetArray+0x40>
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <cbuffGetArray+0x10c>

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
        {
            break;
     d5a:	00 00       	nop
        }
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	fc 01       	movw	r30, r24
     d62:	82 85       	ldd	r24, Z+10	; 0x0a
     d64:	28 2f       	mov	r18, r24
     d66:	2f 77       	andi	r18, 0x7F	; 127
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	fc 01       	movw	r30, r24
     d6e:	22 87       	std	Z+10, r18	; 0x0a

    return bytesRead;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d74:	28 96       	adiw	r28, 0x08	; 8
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <main>:
#if	defined(__18CXX)
void main (void)
#else
int main(void)
#endif
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	66 97       	sbiw	r28, 0x16	; 22
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
    CBUFF               writeData = 0;
     d9a:	19 82       	std	Y+1, r1	; 0x01
    CBUFF               readData = 0;
     d9c:	1e 8a       	std	Y+22, r1	; 0x16
    unsigned char       x;              /* used for 'for' loops               */
    unsigned char       y;
    unsigned int        spaceRemainingInBuffer = 0;
     d9e:	1c 82       	std	Y+4, r1	; 0x04
     da0:	1b 82       	std	Y+3, r1	; 0x03
    unsigned int        dataInBuffer = 0;
     da2:	1e 82       	std	Y+6, r1	; 0x06
     da4:	1d 82       	std	Y+5, r1	; 0x05

#ifdef __i386__
    printf("Running test suite for CIRCULAR BUFFER MODULE\n");
#endif
                                        /* Initialise buffer module           */
    cbuffInit();
     da6:	0e 94 86 00 	call	0x10c	; 0x10c <cbuffInit>

    /***************************************************************************
    * TEST 1 - Try to create some buffer objects without passing the correct
    *          parameters. Each attempt should fail
    ***************************************************************************/
    inBufferNum = cbuffCreate((CBUFF *) 0, INBUFFERSIZE, &inBufferObj);
     daa:	2c e7       	ldi	r18, 0x7C	; 124
     dac:	32 e0       	ldi	r19, 0x02	; 2
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	60 e4       	ldi	r22, 0x40	; 64
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	a9 01       	movw	r20, r18
     db8:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     dbc:	98 87       	std	Y+8, r25	; 0x08
     dbe:	8f 83       	std	Y+7, r24	; 0x07

    outBufferNum = cbuffCreate(outBuffer, 0, &outBufferObj);
     dc0:	84 e4       	ldi	r24, 0x44	; 68
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	29 e8       	ldi	r18, 0x89	; 137
     dc6:	32 e0       	ldi	r19, 0x02	; 2
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	89 87       	std	Y+9, r24	; 0x09

    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     dd6:	84 e6       	ldi	r24, 0x64	; 100
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	68 e0       	ldi	r22, 0x08	; 8
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     de6:	9c 87       	std	Y+12, r25	; 0x0c
     de8:	8b 87       	std	Y+11, r24	; 0x0b
    								 (CBUFFOBJ *) 0);

    if (inBufferNum != 0)
     dea:	8f 81       	ldd	r24, Y+7	; 0x07
     dec:	98 85       	ldd	r25, Y+8	; 0x08
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	09 f0       	breq	.+2      	; 0xdf4 <main+0x6e>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     df2:	ff cf       	rjmp	.-2      	; 0xdf2 <main+0x6c>
#endif
    }
    if (outBufferNum != 0)
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	09 f0       	breq	.+2      	; 0xdfe <main+0x78>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     dfc:	ff cf       	rjmp	.-2      	; 0xdfc <main+0x76>
#endif
    }
    if (testBuffer1Num != 0)
     dfe:	8b 85       	ldd	r24, Y+11	; 0x0b
     e00:	9c 85       	ldd	r25, Y+12	; 0x0c
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	09 f0       	breq	.+2      	; 0xe08 <main+0x82>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     e06:	ff cf       	rjmp	.-2      	; 0xe06 <main+0x80>
    }

    /***************************************************************************
    * TEST 1a - Try to destroy buffers when none exist - should fail
    ***************************************************************************/
    x = 0x0001;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	8a 83       	std	Y+2, r24	; 0x02
    
    do
    {
        y = cbuffDestroy(x);
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <cbuffDestroy>
     e16:	8d 87       	std	Y+13, r24	; 0x0d
    
        if (y != CBUFF_DESTROY_FAIL)
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	88 23       	and	r24, r24
     e1c:	09 f0       	breq	.+2      	; 0xe20 <main+0x9a>
        {
            /* Managed to destroy buffer although none exist */
#ifdef __i386__
            assert(0);
#else
            while(1);
     e1e:	ff cf       	rjmp	.-2      	; 0xe1e <main+0x98>
#endif
        }
        
        /* Shift value to test next potential buffer */
        x <<= 1;
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	88 0f       	add	r24, r24
     e24:	8a 83       	std	Y+2, r24	; 0x02
        /* Mask to ensure that value doesn't get bigger than 0x8000 */
        x &= 0xFFFF;
    } while (x != 0x0000);
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	88 23       	and	r24, r24
     e2a:	81 f7       	brne	.-32     	; 0xe0c <main+0x86>
    *           after 16 buffers have been created. Each buffer is created 
    *           with the same paramters. This would result in working code! It 
    *           is done only for test purposes.
    ***************************************************************************/
    
    for (x = 0; x < 16; x++)
     e2c:	1a 82       	std	Y+2, r1	; 0x02
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <main+0xd0>
    {
        testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE, 
     e30:	8c e6       	ldi	r24, 0x6C	; 108
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	23 ea       	ldi	r18, 0xA3	; 163
     e36:	32 e0       	ldi	r19, 0x02	; 2
     e38:	60 e1       	ldi	r22, 0x10	; 16
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	a9 01       	movw	r20, r18
     e3e:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     e42:	9f 87       	std	Y+15, r25	; 0x0f
     e44:	8e 87       	std	Y+14, r24	; 0x0e
                                        &testBuffer2Obj);
        if (testBuffer2Num == 0)
     e46:	8e 85       	ldd	r24, Y+14	; 0x0e
     e48:	9f 85       	ldd	r25, Y+15	; 0x0f
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	09 f4       	brne	.+2      	; 0xe50 <main+0xca>
        {
            /* Couldn't create a buffer with valid parameters */
#ifdef __i386__
            assert(0);
#else
            while(1);
     e4e:	ff cf       	rjmp	.-2      	; 0xe4e <main+0xc8>
    *           after 16 buffers have been created. Each buffer is created 
    *           with the same paramters. This would result in working code! It 
    *           is done only for test purposes.
    ***************************************************************************/
    
    for (x = 0; x < 16; x++)
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	80 31       	cpi	r24, 0x10	; 16
     e5a:	50 f3       	brcs	.-44     	; 0xe30 <main+0xaa>
#endif
        }
    }
    
    /* Now try to create a 17th buffer - should fail */
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE, 
     e5c:	84 e6       	ldi	r24, 0x64	; 100
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	26 e9       	ldi	r18, 0x96	; 150
     e62:	32 e0       	ldi	r19, 0x02	; 2
     e64:	68 e0       	ldi	r22, 0x08	; 8
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	a9 01       	movw	r20, r18
     e6a:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     e6e:	9c 87       	std	Y+12, r25	; 0x0c
     e70:	8b 87       	std	Y+11, r24	; 0x0b
                                        &testBuffer1Obj);
    if (testBuffer1Num != 0)
     e72:	8b 85       	ldd	r24, Y+11	; 0x0b
     e74:	9c 85       	ldd	r25, Y+12	; 0x0c
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	09 f0       	breq	.+2      	; 0xe7c <main+0xf6>
    {
    /* Managed to create a buffer although no space exists in linked list */
#ifdef __i386__
        assert(0);
#else
        while(1);
     e7a:	ff cf       	rjmp	.-2      	; 0xe7a <main+0xf4>
#endif
    }
    
    /* Deinitialise buffer module now and then reinit - best way to start */
    /* a clean state for the following tests                              */
    cbuffDeinit();
     e7c:	0e 94 95 00 	call	0x12a	; 0x12a <cbuffDeinit>
    cbuffInit();
     e80:	0e 94 86 00 	call	0x10c	; 0x10c <cbuffInit>
    
    /***************************************************************************
    * TEST 2 - Create some buffer objects
    ***************************************************************************/

    inBufferNum = cbuffCreate(inBuffer, INBUFFERSIZE, &inBufferObj);
     e84:	84 e0       	ldi	r24, 0x04	; 4
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	2c e7       	ldi	r18, 0x7C	; 124
     e8a:	32 e0       	ldi	r19, 0x02	; 2
     e8c:	60 e4       	ldi	r22, 0x40	; 64
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	a9 01       	movw	r20, r18
     e92:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     e96:	98 87       	std	Y+8, r25	; 0x08
     e98:	8f 83       	std	Y+7, r24	; 0x07
    outBufferNum = cbuffCreate(outBuffer, OUTBUFFERSIZE, &outBufferObj);
     e9a:	84 e4       	ldi	r24, 0x44	; 68
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	29 e8       	ldi	r18, 0x89	; 137
     ea0:	32 e0       	ldi	r19, 0x02	; 2
     ea2:	60 e2       	ldi	r22, 0x20	; 32
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	a9 01       	movw	r20, r18
     ea8:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     eac:	9a 87       	std	Y+10, r25	; 0x0a
     eae:	89 87       	std	Y+9, r24	; 0x09
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     eb0:	84 e6       	ldi	r24, 0x64	; 100
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	26 e9       	ldi	r18, 0x96	; 150
     eb6:	32 e0       	ldi	r19, 0x02	; 2
     eb8:	68 e0       	ldi	r22, 0x08	; 8
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     ec2:	9c 87       	std	Y+12, r25	; 0x0c
     ec4:	8b 87       	std	Y+11, r24	; 0x0b
    								 &testBuffer1Obj);
    testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE,
     ec6:	8c e6       	ldi	r24, 0x6C	; 108
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	23 ea       	ldi	r18, 0xA3	; 163
     ecc:	32 e0       	ldi	r19, 0x02	; 2
     ece:	60 e1       	ldi	r22, 0x10	; 16
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	a9 01       	movw	r20, r18
     ed4:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     ed8:	9f 87       	std	Y+15, r25	; 0x0f
     eda:	8e 87       	std	Y+14, r24	; 0x0e
                                        /* number we got. The buffer number   */
                                        /* is not so important, but it checks */
                                        /* that the algorithm assigned        */
                                        /* consecutive numbers. If it didn't  */
                                        /* there might be a bug.              */
    if (inBufferNum != 0x0001)
     edc:	8f 81       	ldd	r24, Y+7	; 0x07
     ede:	98 85       	ldd	r25, Y+8	; 0x08
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f0       	breq	.+2      	; 0xee8 <main+0x162>
    {
        /* If inBufferNum isn't 0x0001, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     ee6:	ff cf       	rjmp	.-2      	; 0xee6 <main+0x160>
#endif
    }
    if (outBufferNum != 0x0002)
     ee8:	89 85       	ldd	r24, Y+9	; 0x09
     eea:	9a 85       	ldd	r25, Y+10	; 0x0a
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	91 05       	cpc	r25, r1
     ef0:	09 f0       	breq	.+2      	; 0xef4 <main+0x16e>
    {
        /* If outBufferNum isn't 0x0002, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     ef2:	ff cf       	rjmp	.-2      	; 0xef2 <main+0x16c>
#endif
    }
    if (testBuffer1Num != 0x0004)
     ef4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	91 05       	cpc	r25, r1
     efc:	09 f0       	breq	.+2      	; 0xf00 <main+0x17a>
    {
        /* If testBuffer1Num isn't 0x0004, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     efe:	ff cf       	rjmp	.-2      	; 0xefe <main+0x178>
#endif
    }
    if (testBuffer2Num != 0x0008)
     f00:	8e 85       	ldd	r24, Y+14	; 0x0e
     f02:	9f 85       	ldd	r25, Y+15	; 0x0f
     f04:	88 30       	cpi	r24, 0x08	; 8
     f06:	91 05       	cpc	r25, r1
     f08:	09 f0       	breq	.+2      	; 0xf0c <main+0x186>
    {
        /* If testBuffer2Num isn't 0x0008, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f0a:	ff cf       	rjmp	.-2      	; 0xf0a <main+0x184>

    /***************************************************************************
    * TEST 3 - Try to destroy some buffer objects that don't exist
    ***************************************************************************/

    x = cbuffDestroy(0x8000);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e8       	ldi	r25, 0x80	; 128
     f10:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <cbuffDestroy>
     f14:	8a 83       	std	Y+2, r24	; 0x02

    if (x == CBUFF_DESTROY_OK)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <main+0x198>
    {
        /* Destroyed a buffer that was not allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f1c:	ff cf       	rjmp	.-2      	; 0xf1c <main+0x196>
#endif
    }

    x = cbuffDestroy(0x0400);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	94 e0       	ldi	r25, 0x04	; 4
     f22:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <cbuffDestroy>
     f26:	8a 83       	std	Y+2, r24	; 0x02

    if (x == CBUFF_DESTROY_OK)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <main+0x1aa>
    {
        /* Destroyed a buffer that was not allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f2e:	ff cf       	rjmp	.-2      	; 0xf2e <main+0x1a8>

    /***************************************************************************
    * TEST 4 - Destroy the two testBufferObjs
    ***************************************************************************/

    x = cbuffDestroy(testBuffer1Num);
     f30:	8b 85       	ldd	r24, Y+11	; 0x0b
     f32:	9c 85       	ldd	r25, Y+12	; 0x0c
     f34:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <cbuffDestroy>
     f38:	8a 83       	std	Y+2, r24	; 0x02

    if (x != CBUFF_DESTROY_OK)
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <main+0x1bc>
    {
        /* Failed to destroy a buffer that was allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f40:	ff cf       	rjmp	.-2      	; 0xf40 <main+0x1ba>
#endif
    }

    x = cbuffDestroy(testBuffer2Num);
     f42:	8e 85       	ldd	r24, Y+14	; 0x0e
     f44:	9f 85       	ldd	r25, Y+15	; 0x0f
     f46:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <cbuffDestroy>
     f4a:	8a 83       	std	Y+2, r24	; 0x02

    if (x != CBUFF_DESTROY_OK)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	09 f0       	breq	.+2      	; 0xf54 <main+0x1ce>
    {
        /* Failed to destroy a buffer that was allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f52:	ff cf       	rjmp	.-2      	; 0xf52 <main+0x1cc>

    /***************************************************************************
    * TEST 5 - Create the two testBufferObjs again but in reverse order
    *          to test 2 - should assign buffer numbers in reverse order
    ***************************************************************************/
    testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE,
     f54:	8c e6       	ldi	r24, 0x6C	; 108
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	23 ea       	ldi	r18, 0xA3	; 163
     f5a:	32 e0       	ldi	r19, 0x02	; 2
     f5c:	60 e1       	ldi	r22, 0x10	; 16
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	a9 01       	movw	r20, r18
     f62:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     f66:	9f 87       	std	Y+15, r25	; 0x0f
     f68:	8e 87       	std	Y+14, r24	; 0x0e
    								 &testBuffer2Obj);
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     f6a:	84 e6       	ldi	r24, 0x64	; 100
     f6c:	92 e0       	ldi	r25, 0x02	; 2
     f6e:	26 e9       	ldi	r18, 0x96	; 150
     f70:	32 e0       	ldi	r19, 0x02	; 2
     f72:	68 e0       	ldi	r22, 0x08	; 8
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	a9 01       	movw	r20, r18
     f78:	0e 94 a4 00 	call	0x148	; 0x148 <cbuffCreate>
     f7c:	9c 87       	std	Y+12, r25	; 0x0c
     f7e:	8b 87       	std	Y+11, r24	; 0x0b
    								 &testBuffer1Obj);

    if (testBuffer1Num != 0x0008)
     f80:	8b 85       	ldd	r24, Y+11	; 0x0b
     f82:	9c 85       	ldd	r25, Y+12	; 0x0c
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	91 05       	cpc	r25, r1
     f88:	09 f0       	breq	.+2      	; 0xf8c <main+0x206>
    {
        /* If testBuffer1Num isn't 0x0008, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f8a:	ff cf       	rjmp	.-2      	; 0xf8a <main+0x204>
#endif
    }
    if (testBuffer2Num != 0x0004)
     f8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f8e:	9f 85       	ldd	r25, Y+15	; 0x0f
     f90:	84 30       	cpi	r24, 0x04	; 4
     f92:	91 05       	cpc	r25, r1
     f94:	09 f0       	breq	.+2      	; 0xf98 <main+0x212>
    {
        /* If testBuffer2Num isn't 0x0004, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f96:	ff cf       	rjmp	.-2      	; 0xf96 <main+0x210>
    }

    /***************************************************************************
    * TEST 6 - Ensure we can't get handle to buffers that doesn't exist
    ***************************************************************************/
    hInBuffer = cbuffOpen(0x8000);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e8       	ldi	r25, 0x80	; 128
     f9c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
     fa0:	99 8b       	std	Y+17, r25	; 0x11
     fa2:	88 8b       	std	Y+16, r24	; 0x10

    if (hInBuffer != (CBUFFOBJ *) 0)
     fa4:	88 89       	ldd	r24, Y+16	; 0x10
     fa6:	99 89       	ldd	r25, Y+17	; 0x11
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <main+0x228>
    {
        /* Managed to get a pointer to a buffer object that doesn't exist */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fac:	ff cf       	rjmp	.-2      	; 0xfac <main+0x226>
#endif
    }

    hInBuffer = cbuffOpen(0x0400);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	94 e0       	ldi	r25, 0x04	; 4
     fb2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
     fb6:	99 8b       	std	Y+17, r25	; 0x11
     fb8:	88 8b       	std	Y+16, r24	; 0x10

    if (hInBuffer != (CBUFFOBJ *) 0)
     fba:	88 89       	ldd	r24, Y+16	; 0x10
     fbc:	99 89       	ldd	r25, Y+17	; 0x11
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <main+0x23e>
    {
        /* Managed to get a pointer to a buffer object that doesn't exist */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fc2:	ff cf       	rjmp	.-2      	; 0xfc2 <main+0x23c>
    }

    /***************************************************************************
    * TEST 7 - Ensure we can get handle to properly created buffers
    ***************************************************************************/
    hInBuffer = cbuffOpen(inBufferNum);
     fc4:	8f 81       	ldd	r24, Y+7	; 0x07
     fc6:	98 85       	ldd	r25, Y+8	; 0x08
     fc8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
     fcc:	99 8b       	std	Y+17, r25	; 0x11
     fce:	88 8b       	std	Y+16, r24	; 0x10

    hOutBuffer = cbuffOpen(outBufferNum);
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
     fd8:	9b 8b       	std	Y+19, r25	; 0x13
     fda:	8a 8b       	std	Y+18, r24	; 0x12

    if (hInBuffer == (CBUFFOBJ *) 0)
     fdc:	88 89       	ldd	r24, Y+16	; 0x10
     fde:	99 89       	ldd	r25, Y+17	; 0x11
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <main+0x260>
    {
        /* Failed to get handle to valid, available buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fe4:	ff cf       	rjmp	.-2      	; 0xfe4 <main+0x25e>
#endif
    }
    if (hOutBuffer == (CBUFFOBJ *) 0)
     fe6:	8a 89       	ldd	r24, Y+18	; 0x12
     fe8:	9b 89       	ldd	r25, Y+19	; 0x13
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	09 f4       	brne	.+2      	; 0xff0 <main+0x26a>
    {
        /* Failed to get handle to valid, available buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fee:	ff cf       	rjmp	.-2      	; 0xfee <main+0x268>
    }

    /***************************************************************************
    * TEST 8 - Try to obtain handle to open buffers - should fail
    ***************************************************************************/
    hDummyHandle = cbuffOpen(inBufferNum);
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	98 85       	ldd	r25, Y+8	; 0x08
     ff4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
     ff8:	9d 8b       	std	Y+21, r25	; 0x15
     ffa:	8c 8b       	std	Y+20, r24	; 0x14

    if (hDummyHandle != (CBUFFOBJ *) 0)
     ffc:	8c 89       	ldd	r24, Y+20	; 0x14
     ffe:	9d 89       	ldd	r25, Y+21	; 0x15
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	09 f0       	breq	.+2      	; 0x1006 <main+0x280>
    {
        /* Managed to get handle to a buffer that is already open */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1004:	ff cf       	rjmp	.-2      	; 0x1004 <main+0x27e>
#endif
    }

    hDummyHandle = cbuffOpen(outBufferNum);
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
    100e:	9d 8b       	std	Y+21, r25	; 0x15
    1010:	8c 8b       	std	Y+20, r24	; 0x14

    if (hDummyHandle != (CBUFFOBJ *) 0)
    1012:	8c 89       	ldd	r24, Y+20	; 0x14
    1014:	9d 89       	ldd	r25, Y+21	; 0x15
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	09 f0       	breq	.+2      	; 0x101c <main+0x296>
    {
        /* Managed to get handle to a buffer that is already open */
#ifdef __i386__
        assert(0);
#else
        while(1);
    101a:	ff cf       	rjmp	.-2      	; 0x101a <main+0x294>

    /***************************************************************************
    * TEST 9 - Try to release handles to open buffers
    ***************************************************************************/

    inBufferNum = cbuffClose(hInBuffer);
    101c:	88 89       	ldd	r24, Y+16	; 0x10
    101e:	99 89       	ldd	r25, Y+17	; 0x11
    1020:	0e 94 ae 02 	call	0x55c	; 0x55c <cbuffClose>
    1024:	98 87       	std	Y+8, r25	; 0x08
    1026:	8f 83       	std	Y+7, r24	; 0x07

    outBufferNum = cbuffClose(hOutBuffer);
    1028:	8a 89       	ldd	r24, Y+18	; 0x12
    102a:	9b 89       	ldd	r25, Y+19	; 0x13
    102c:	0e 94 ae 02 	call	0x55c	; 0x55c <cbuffClose>
    1030:	9a 87       	std	Y+10, r25	; 0x0a
    1032:	89 87       	std	Y+9, r24	; 0x09

    if (inBufferNum != 0x0001)
    1034:	8f 81       	ldd	r24, Y+7	; 0x07
    1036:	98 85       	ldd	r25, Y+8	; 0x08
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	91 05       	cpc	r25, r1
    103c:	09 f0       	breq	.+2      	; 0x1040 <main+0x2ba>
    {
        /* Failed to close buffer object */
#ifdef __i386__
        assert(0);
#else
        while(1);
    103e:	ff cf       	rjmp	.-2      	; 0x103e <main+0x2b8>
#endif
    }
    if (outBufferNum != 0x0002)
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	9a 85       	ldd	r25, Y+10	; 0x0a
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	91 05       	cpc	r25, r1
    1048:	09 f0       	breq	.+2      	; 0x104c <main+0x2c6>
    {
        /* Failed to close buffer object */
#ifdef __i386__
        assert(0);
#else
        while(1);
    104a:	ff cf       	rjmp	.-2      	; 0x104a <main+0x2c4>

    /***************************************************************************
    * TEST 10 - Try to release handles to buffer which is not open
    ***************************************************************************/

    testBuffer1Num = cbuffClose(hOutBuffer);
    104c:	8a 89       	ldd	r24, Y+18	; 0x12
    104e:	9b 89       	ldd	r25, Y+19	; 0x13
    1050:	0e 94 ae 02 	call	0x55c	; 0x55c <cbuffClose>
    1054:	9c 87       	std	Y+12, r25	; 0x0c
    1056:	8b 87       	std	Y+11, r24	; 0x0b

    if (testBuffer1Num != 0)
    1058:	8b 85       	ldd	r24, Y+11	; 0x0b
    105a:	9c 85       	ldd	r25, Y+12	; 0x0c
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	09 f0       	breq	.+2      	; 0x1062 <main+0x2dc>
    {
        /* Managed to release a buffer object that was already released */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1060:	ff cf       	rjmp	.-2      	; 0x1060 <main+0x2da>

    /***************************************************************************
    * Open two main buffers for further tests
    ***************************************************************************/

    hInBuffer = cbuffOpen(inBufferNum);
    1062:	8f 81       	ldd	r24, Y+7	; 0x07
    1064:	98 85       	ldd	r25, Y+8	; 0x08
    1066:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
    106a:	99 8b       	std	Y+17, r25	; 0x11
    106c:	88 8b       	std	Y+16, r24	; 0x10

    hOutBuffer = cbuffOpen(outBufferNum);
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	0e 94 68 02 	call	0x4d0	; 0x4d0 <cbuffOpen>
    1076:	9b 8b       	std	Y+19, r25	; 0x13
    1078:	8a 8b       	std	Y+18, r24	; 0x12


    /***************************************************************************
    * TEST 11 - Check sizes of both buffers are correctly calculated
    ***************************************************************************/
    spaceRemainingInBuffer = cbuffGetSpace(hInBuffer);
    107a:	88 89       	ldd	r24, Y+16	; 0x10
    107c:	99 89       	ldd	r25, Y+17	; 0x11
    107e:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != INBUFFERSIZE)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	80 34       	cpi	r24, 0x40	; 64
    108c:	91 05       	cpc	r25, r1
    108e:	09 f0       	breq	.+2      	; 0x1092 <main+0x30c>
    {
        /* ERROR - We have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <main+0x30a>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1092:	8a 89       	ldd	r24, Y+18	; 0x12
    1094:	9b 89       	ldd	r25, Y+19	; 0x13
    1096:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	80 32       	cpi	r24, 0x20	; 32
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <main+0x324>
    {
        /* ERROR - We have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10a8:	ff cf       	rjmp	.-2      	; 0x10a8 <main+0x322>
#endif
    }

    dataInBuffer = cbuffGetFill(hInBuffer);
    10aa:	88 89       	ldd	r24, Y+16	; 0x10
    10ac:	99 89       	ldd	r25, Y+17	; 0x11
    10ae:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <main+0x33a>
    {
        /* ERROR - we have incorrect fill value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10be:	ff cf       	rjmp	.-2      	; 0x10be <main+0x338>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    10c0:	8a 89       	ldd	r24, Y+18	; 0x12
    10c2:	9b 89       	ldd	r25, Y+19	; 0x13
    10c4:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <main+0x350>
    {
        /* ERROR - we have incorrect fill value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10d4:	ff cf       	rjmp	.-2      	; 0x10d4 <main+0x34e>
    }

    /***************************************************************************
    * TEST 12 - Fill buffers - ensure we can't overrun using cbuffPutByte
    ***************************************************************************/
    writeData = 'A';
    10d6:	81 e4       	ldi	r24, 0x41	; 65
    10d8:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    10da:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer until cbuffPutByte tells us we can't write any more */
    while (x < 0xFF)
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <main+0x372>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    10de:	8a 89       	ldd	r24, Y+18	; 0x12
    10e0:	9b 89       	ldd	r25, Y+19	; 0x13
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	51 f4       	brne	.+20     	; 0x1100 <main+0x37a>
        {
            writeData++;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	8f 5f       	subi	r24, 0xFF	; 255
    10f0:	89 83       	std	Y+1, r24	; 0x01
            x++;
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    * TEST 12 - Fill buffers - ensure we can't overrun using cbuffPutByte
    ***************************************************************************/
    writeData = 'A';
    x = 0;
    /* Fill buffer until cbuffPutByte tells us we can't write any more */
    while (x < 0xFF)
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	81 f7       	brne	.-32     	; 0x10de <main+0x358>
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <main+0x37c>
            writeData++;
            x++;
        }
        else
        {
            break;
    1100:	00 00       	nop
        }
    }
    if (x == 0xFF)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	09 f4       	brne	.+2      	; 0x110a <main+0x384>
    {
        /* ERROR - Buffer overrun not detected */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1108:	ff cf       	rjmp	.-2      	; 0x1108 <main+0x382>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    110a:	8a 89       	ldd	r24, Y+18	; 0x12
    110c:	9b 89       	ldd	r25, Y+19	; 0x13
    110e:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 0)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <main+0x39a>
    {
        /* ERROR - Space remaining should be 0 */
#ifdef __i386__
        assert(0);
#else
        while(1);
    111e:	ff cf       	rjmp	.-2      	; 0x111e <main+0x398>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    1120:	8a 89       	ldd	r24, Y+18	; 0x12
    1122:	9b 89       	ldd	r25, Y+19	; 0x13
    1124:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != OUTBUFFERSIZE)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	80 32       	cpi	r24, 0x20	; 32
    1132:	91 05       	cpc	r25, r1
    1134:	09 f0       	breq	.+2      	; 0x1138 <main+0x3b2>
    {
        /* ERROR - Buffer should be full */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1136:	ff cf       	rjmp	.-2      	; 0x1136 <main+0x3b0>

    /***************************************************************************
    * TEST 13 - Read buffers - ensure we can't underrun using cbuffGetByte and
    *           check contents was stored correctly
    ***************************************************************************/
    readData = '\0';
    1138:	1e 8a       	std	Y+22, r1	; 0x16
    writeData = 'A';
    113a:	81 e4       	ldi	r24, 0x41	; 65
    113c:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    113e:	1a 82       	std	Y+2, r1	; 0x02
    /* Read buffer until cbuffGetByte tells us we can't read any more */
    while (x < 0xFF)
    1140:	15 c0       	rjmp	.+42     	; 0x116c <main+0x3e6>
    {
        if ((cbuffGetByte(hOutBuffer, &readData)) == CBUFF_GET_OK)
    1142:	8a 89       	ldd	r24, Y+18	; 0x12
    1144:	9b 89       	ldd	r25, Y+19	; 0x13
    1146:	9e 01       	movw	r18, r28
    1148:	2a 5e       	subi	r18, 0xEA	; 234
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	b9 01       	movw	r22, r18
    114e:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	79 f4       	brne	.+30     	; 0x1174 <main+0x3ee>
        {
            if (readData != writeData)
    1156:	9e 89       	ldd	r25, Y+22	; 0x16
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	98 17       	cp	r25, r24
    115c:	09 f0       	breq	.+2      	; 0x1160 <main+0x3da>
            {
                /* ERROR - data read was incorrect */
#ifdef __i386__
                assert(0);
#else
                while(1);
    115e:	ff cf       	rjmp	.-2      	; 0x115e <main+0x3d8>
#endif
            }
            else
            {
                writeData++;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	89 83       	std	Y+1, r24	; 0x01
                x++;
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	8f 5f       	subi	r24, 0xFF	; 255
    116a:	8a 83       	std	Y+2, r24	; 0x02
    ***************************************************************************/
    readData = '\0';
    writeData = 'A';
    x = 0;
    /* Read buffer until cbuffGetByte tells us we can't read any more */
    while (x < 0xFF)
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	8f 3f       	cpi	r24, 0xFF	; 255
    1170:	41 f7       	brne	.-48     	; 0x1142 <main+0x3bc>
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <main+0x3f0>
                x++;
            }
        }
        else
        {
            break;
    1174:	00 00       	nop
        }
    }
    if (x == 0xFF)
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	8f 3f       	cpi	r24, 0xFF	; 255
    117a:	09 f4       	brne	.+2      	; 0x117e <main+0x3f8>
    {
        /* ERROR - Buffer underrun not detected */
#ifdef __i386__
        assert(0);
#else
        while(1);
    117c:	ff cf       	rjmp	.-2      	; 0x117c <main+0x3f6>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    117e:	8a 89       	ldd	r24, Y+18	; 0x12
    1180:	9b 89       	ldd	r25, Y+19	; 0x13
    1182:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	80 32       	cpi	r24, 0x20	; 32
    1190:	91 05       	cpc	r25, r1
    1192:	09 f0       	breq	.+2      	; 0x1196 <main+0x410>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1194:	ff cf       	rjmp	.-2      	; 0x1194 <main+0x40e>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    1196:	8a 89       	ldd	r24, Y+18	; 0x12
    1198:	9b 89       	ldd	r25, Y+19	; 0x13
    119a:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	09 f0       	breq	.+2      	; 0x11ac <main+0x426>
    {
        /* ERROR - Buffer should be empty */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11aa:	ff cf       	rjmp	.-2      	; 0x11aa <main+0x424>
    /***************************************************************************
    * TEST 14 - Check buffer sizes calculate correctly when there is some data
    *           in the buffer, and also when for head-before-tail and tail-
    *           before-head situations
    ***************************************************************************/
    writeData = 'a';
    11ac:	81 e6       	ldi	r24, 0x61	; 97
    11ae:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    11b0:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <main+0x44c>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    11b4:	8a 89       	ldd	r24, Y+18	; 0x12
    11b6:	9b 89       	ldd	r25, Y+19	; 0x13
    11b8:	69 81       	ldd	r22, Y+1	; 0x01
    11ba:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	39 f4       	brne	.+14     	; 0x11d0 <main+0x44a>
        {
            writeData++;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	8f 5f       	subi	r24, 0xFF	; 255
    11c6:	89 83       	std	Y+1, r24	; 0x01
            x++;
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <main+0x44c>
        {
            /* ERROR - cbuffPutByte failed unexpectedly */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11d0:	ff cf       	rjmp	.-2      	; 0x11d0 <main+0x44a>
    *           before-head situations
    ***************************************************************************/
    writeData = 'a';
    x = 0;
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	86 31       	cpi	r24, 0x16	; 22
    11d6:	70 f3       	brcs	.-36     	; 0x11b4 <main+0x42e>
#endif
        }
    }

    /* Check sizes are correctly calculated */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    11d8:	8a 89       	ldd	r24, Y+18	; 0x12
    11da:	9b 89       	ldd	r25, Y+19	; 0x13
    11dc:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 10 )
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	8a 30       	cpi	r24, 0x0A	; 10
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <main+0x46a>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11ee:	ff cf       	rjmp	.-2      	; 0x11ee <main+0x468>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    11f0:	8a 89       	ldd	r24, Y+18	; 0x12
    11f2:	9b 89       	ldd	r25, Y+19	; 0x13
    11f4:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != (OUTBUFFERSIZE - 10))
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	86 31       	cpi	r24, 0x16	; 22
    1202:	91 05       	cpc	r25, r1
    1204:	09 f0       	breq	.+2      	; 0x1208 <main+0x482>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1206:	ff cf       	rjmp	.-2      	; 0x1206 <main+0x480>
#endif
    }

    /* Read out buffer contents*/
    while(cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    1208:	00 00       	nop
    120a:	8a 89       	ldd	r24, Y+18	; 0x12
    120c:	9b 89       	ldd	r25, Y+19	; 0x13
    120e:	9e 01       	movw	r18, r28
    1210:	2a 5e       	subi	r18, 0xEA	; 234
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	b9 01       	movw	r22, r18
    1216:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	b1 f3       	breq	.-20     	; 0x120a <main+0x484>
    /* Add some data to buffer so that inPointer buffer wrap occurs */
    writeData = 'A';
    121e:	81 e4       	ldi	r24, 0x41	; 65
    1220:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    1222:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <main+0x4be>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    1226:	8a 89       	ldd	r24, Y+18	; 0x12
    1228:	9b 89       	ldd	r25, Y+19	; 0x13
    122a:	69 81       	ldd	r22, Y+1	; 0x01
    122c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	39 f4       	brne	.+14     	; 0x1242 <main+0x4bc>
        {
            writeData++;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	89 83       	std	Y+1, r24	; 0x01
            x++;
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <main+0x4be>
        {
            /* ERROR - cbuffPutByte failed unexpectedly */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1242:	ff cf       	rjmp	.-2      	; 0x1242 <main+0x4bc>
    while(cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    /* Add some data to buffer so that inPointer buffer wrap occurs */
    writeData = 'A';
    x = 0;
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	86 31       	cpi	r24, 0x16	; 22
    1248:	70 f3       	brcs	.-36     	; 0x1226 <main+0x4a0>
#endif
        }
    }

    /* Check sizes are correctly calculated */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    124a:	8a 89       	ldd	r24, Y+18	; 0x12
    124c:	9b 89       	ldd	r25, Y+19	; 0x13
    124e:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 10 )
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	8a 30       	cpi	r24, 0x0A	; 10
    125c:	91 05       	cpc	r25, r1
    125e:	09 f0       	breq	.+2      	; 0x1262 <main+0x4dc>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1260:	ff cf       	rjmp	.-2      	; 0x1260 <main+0x4da>
#endif
    }
    dataInBuffer = cbuffGetFill(hOutBuffer);
    1262:	8a 89       	ldd	r24, Y+18	; 0x12
    1264:	9b 89       	ldd	r25, Y+19	; 0x13
    1266:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != (OUTBUFFERSIZE - 10))
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	86 31       	cpi	r24, 0x16	; 22
    1274:	91 05       	cpc	r25, r1
    1276:	09 f0       	breq	.+2      	; 0x127a <main+0x4f4>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1278:	ff cf       	rjmp	.-2      	; 0x1278 <main+0x4f2>
    /***************************************************************************
    * TEST 15 - Clear this buffer and ensure that function calls return that
    *           buffer is empty
    ***************************************************************************/
    /* Clear this buffer to start new tests */
    cbuffClearBuffer(hOutBuffer);
    127a:	8a 89       	ldd	r24, Y+18	; 0x12
    127c:	9b 89       	ldd	r25, Y+19	; 0x13
    127e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>

    /* Check buffer is empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1282:	8a 89       	ldd	r24, Y+18	; 0x12
    1284:	9b 89       	ldd	r25, Y+19	; 0x13
    1286:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	80 32       	cpi	r24, 0x20	; 32
    1294:	91 05       	cpc	r25, r1
    1296:	09 f0       	breq	.+2      	; 0x129a <main+0x514>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1298:	ff cf       	rjmp	.-2      	; 0x1298 <main+0x512>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    129a:	8a 89       	ldd	r24, Y+18	; 0x12
    129c:	9b 89       	ldd	r25, Y+19	; 0x13
    129e:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <main+0x52a>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12ae:	ff cf       	rjmp	.-2      	; 0x12ae <main+0x528>
    * TEST 16 - Check cbuffPeekHead and cbuffPeekTail don't read anything from
    *           an empty buffer
    * NOTE: This test relies upon the status of the previous test, i.e. that the
    *       buffers used are empty!
    ***************************************************************************/
    if ((cbuffPeekHead(hOutBuffer, &readData)) == CBUFF_GET_OK)
    12b0:	8a 89       	ldd	r24, Y+18	; 0x12
    12b2:	9b 89       	ldd	r25, Y+19	; 0x13
    12b4:	9e 01       	movw	r18, r28
    12b6:	2a 5e       	subi	r18, 0xEA	; 234
    12b8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ba:	b9 01       	movw	r22, r18
    12bc:	0e 94 98 04 	call	0x930	; 0x930 <cbuffPeekHead>
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <main+0x540>
    {
        /* ERROR - peeked head data that isn't there */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12c4:	ff cf       	rjmp	.-2      	; 0x12c4 <main+0x53e>
#endif
    }

    if ((cbuffPeekTail(hOutBuffer, &readData)) == CBUFF_GET_OK)
    12c6:	8a 89       	ldd	r24, Y+18	; 0x12
    12c8:	9b 89       	ldd	r25, Y+19	; 0x13
    12ca:	9e 01       	movw	r18, r28
    12cc:	2a 5e       	subi	r18, 0xEA	; 234
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	b9 01       	movw	r22, r18
    12d2:	0e 94 6f 04 	call	0x8de	; 0x8de <cbuffPeekTail>
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <main+0x556>
    {
        /* ERROR - peeked tail data that isn't there */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12da:	ff cf       	rjmp	.-2      	; 0x12da <main+0x554>
    /***************************************************************************
    * TEST 17 - Put some data in the buffer and then peek the head and tail
    *
    ***************************************************************************/
    /* Empty buffers to start with known state */
    cbuffClearBuffer(hOutBuffer);
    12dc:	8a 89       	ldd	r24, Y+18	; 0x12
    12de:	9b 89       	ldd	r25, Y+19	; 0x13
    12e0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>

    writeData = 'a';
    12e4:	81 e6       	ldi	r24, 0x61	; 97
    12e6:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 10; x++)
    12e8:	1a 82       	std	Y+2, r1	; 0x02
    12ea:	0b c0       	rjmp	.+22     	; 0x1302 <main+0x57c>
    {
        cbuffPutByte(hOutBuffer, writeData);
    12ec:	8a 89       	ldd	r24, Y+18	; 0x12
    12ee:	9b 89       	ldd	r25, Y+19	; 0x13
    12f0:	69 81       	ldd	r22, Y+1	; 0x01
    12f2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
        writeData++;
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	89 83       	std	Y+1, r24	; 0x01
    ***************************************************************************/
    /* Empty buffers to start with known state */
    cbuffClearBuffer(hOutBuffer);

    writeData = 'a';
    for (x = 0; x < 10; x++)
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	8a 83       	std	Y+2, r24	; 0x02
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	8a 30       	cpi	r24, 0x0A	; 10
    1306:	90 f3       	brcs	.-28     	; 0x12ec <main+0x566>
    {
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }

    if ((cbuffPeekHead(hOutBuffer, &readData)) != CBUFF_GET_OK)
    1308:	8a 89       	ldd	r24, Y+18	; 0x12
    130a:	9b 89       	ldd	r25, Y+19	; 0x13
    130c:	9e 01       	movw	r18, r28
    130e:	2a 5e       	subi	r18, 0xEA	; 234
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	b9 01       	movw	r22, r18
    1314:	0e 94 98 04 	call	0x930	; 0x930 <cbuffPeekHead>
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	09 f0       	breq	.+2      	; 0x131e <main+0x598>
    {
        /* ERROR - couldn't peek head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    131c:	ff cf       	rjmp	.-2      	; 0x131c <main+0x596>
#endif
    }

    if (readData != (writeData-1))
    131e:	8e 89       	ldd	r24, Y+22	; 0x16
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	28 17       	cp	r18, r24
    132e:	39 07       	cpc	r19, r25
    1330:	09 f0       	breq	.+2      	; 0x1334 <main+0x5ae>
    {
        /* ERROR - peeked incorrect head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1332:	ff cf       	rjmp	.-2      	; 0x1332 <main+0x5ac>
#endif
    }

    if ((cbuffPeekTail(hOutBuffer, &readData)) != CBUFF_GET_OK)
    1334:	8a 89       	ldd	r24, Y+18	; 0x12
    1336:	9b 89       	ldd	r25, Y+19	; 0x13
    1338:	9e 01       	movw	r18, r28
    133a:	2a 5e       	subi	r18, 0xEA	; 234
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
    133e:	b9 01       	movw	r22, r18
    1340:	0e 94 6f 04 	call	0x8de	; 0x8de <cbuffPeekTail>
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	09 f0       	breq	.+2      	; 0x134a <main+0x5c4>
    {
        /* ERROR - couldn't peek tail data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1348:	ff cf       	rjmp	.-2      	; 0x1348 <main+0x5c2>
#endif
    }

    if (readData != 'a')
    134a:	8e 89       	ldd	r24, Y+22	; 0x16
    134c:	81 36       	cpi	r24, 0x61	; 97
    134e:	09 f0       	breq	.+2      	; 0x1352 <main+0x5cc>
    {
        /* ERROR - peeked incorrect tail data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <main+0x5ca>
    /***************************************************************************
    * TEST 18 - Check cbuffPeekHead works when inPointer points to startOfBuffer
    * NOTE: This test relies upon the status of the previous test!
    ***************************************************************************/
    /* Read some bytes out of buffer */
    for (x = 0; x < 6; x++)
    1352:	1a 82       	std	Y+2, r1	; 0x02
    1354:	0b c0       	rjmp	.+22     	; 0x136c <main+0x5e6>
    {
        cbuffGetByte(hOutBuffer, &readData);
    1356:	8a 89       	ldd	r24, Y+18	; 0x12
    1358:	9b 89       	ldd	r25, Y+19	; 0x13
    135a:	9e 01       	movw	r18, r28
    135c:	2a 5e       	subi	r18, 0xEA	; 234
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    /***************************************************************************
    * TEST 18 - Check cbuffPeekHead works when inPointer points to startOfBuffer
    * NOTE: This test relies upon the status of the previous test!
    ***************************************************************************/
    /* Read some bytes out of buffer */
    for (x = 0; x < 6; x++)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	86 30       	cpi	r24, 0x06	; 6
    1370:	90 f3       	brcs	.-28     	; 0x1356 <main+0x5d0>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }

    /* Write enough bytes to get inPointer on startOfBuffer boundary */
    writeData = 'a';
    1372:	81 e6       	ldi	r24, 0x61	; 97
    1374:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 22; x++)
    1376:	1a 82       	std	Y+2, r1	; 0x02
    1378:	0b c0       	rjmp	.+22     	; 0x1390 <main+0x60a>
    {
        cbuffPutByte(hOutBuffer, writeData);
    137a:	8a 89       	ldd	r24, Y+18	; 0x12
    137c:	9b 89       	ldd	r25, Y+19	; 0x13
    137e:	69 81       	ldd	r22, Y+1	; 0x01
    1380:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
        writeData++;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	89 83       	std	Y+1, r24	; 0x01
        cbuffGetByte(hOutBuffer, &readData);
    }

    /* Write enough bytes to get inPointer on startOfBuffer boundary */
    writeData = 'a';
    for (x = 0; x < 22; x++)
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	8a 83       	std	Y+2, r24	; 0x02
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	86 31       	cpi	r24, 0x16	; 22
    1394:	90 f3       	brcs	.-28     	; 0x137a <main+0x5f4>
    {
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }

    if ((cbuffPeekHead(hOutBuffer, &readData)) != CBUFF_GET_OK)
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	9b 89       	ldd	r25, Y+19	; 0x13
    139a:	9e 01       	movw	r18, r28
    139c:	2a 5e       	subi	r18, 0xEA	; 234
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	b9 01       	movw	r22, r18
    13a2:	0e 94 98 04 	call	0x930	; 0x930 <cbuffPeekHead>
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	09 f0       	breq	.+2      	; 0x13ac <main+0x626>
    {
        /* ERROR - couldn't peek head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    13aa:	ff cf       	rjmp	.-2      	; 0x13aa <main+0x624>
#endif
    }

    if (readData != (writeData-1))
    13ac:	8e 89       	ldd	r24, Y+22	; 0x16
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	28 17       	cp	r18, r24
    13bc:	39 07       	cpc	r19, r25
    13be:	09 f0       	breq	.+2      	; 0x13c2 <main+0x63c>
    {
        /* ERROR - peeked incorrect head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    13c0:	ff cf       	rjmp	.-2      	; 0x13c0 <main+0x63a>

    /***************************************************************************
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    13c2:	8a 89       	ldd	r24, Y+18	; 0x12
    13c4:	9b 89       	ldd	r25, Y+19	; 0x13
    13c6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>
    writeData = '1';
    13ca:	81 e3       	ldi	r24, 0x31	; 49
    13cc:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 8; x++)
    13ce:	1a 82       	std	Y+2, r1	; 0x02
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <main+0x66a>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    13d2:	8a 89       	ldd	r24, Y+18	; 0x12
    13d4:	9b 89       	ldd	r25, Y+19	; 0x13
    13d6:	69 81       	ldd	r22, Y+1	; 0x01
    13d8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	39 f4       	brne	.+14     	; 0x13ee <main+0x668>
        {
            writeData++;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	89 83       	std	Y+1, r24	; 0x01
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <main+0x66a>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    13ee:	ff cf       	rjmp	.-2      	; 0x13ee <main+0x668>
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	70 f3       	brcs	.-36     	; 0x13d2 <main+0x64c>
            while(1);
#endif
        }
    }

    writeData-=2;
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	82 50       	subi	r24, 0x02	; 2
    13fa:	89 83       	std	Y+1, r24	; 0x01
    /* unput the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there      */
    x = 0;
    13fc:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUnputByte(hOutBuffer))
    13fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1400:	9b 89       	ldd	r25, Y+19	; 0x13
    1402:	0e 94 db 04 	call	0x9b6	; 0x9b6 <cbuffUnputByte>
    1406:	88 23       	and	r24, r24
    1408:	c9 f4       	brne	.+50     	; 0x143c <main+0x6b6>
        {
            if (cbuffPeekHead(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    140a:	8a 89       	ldd	r24, Y+18	; 0x12
    140c:	9b 89       	ldd	r25, Y+19	; 0x13
    140e:	9e 01       	movw	r18, r28
    1410:	2a 5e       	subi	r18, 0xEA	; 234
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 98 04 	call	0x930	; 0x930 <cbuffPeekHead>
    141a:	88 23       	and	r24, r24
    141c:	59 f0       	breq	.+22     	; 0x1434 <main+0x6ae>
            {
                if (readData != writeData)
    141e:	9e 89       	ldd	r25, Y+22	; 0x16
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	98 17       	cp	r25, r24
    1424:	09 f0       	breq	.+2      	; 0x1428 <main+0x6a2>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    1426:	ff cf       	rjmp	.-2      	; 0x1426 <main+0x6a0>
#endif
                }
                writeData--;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	81 50       	subi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
                x++;
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	8f 3f       	cpi	r24, 0xFF	; 255
    1438:	11 f7       	brne	.-60     	; 0x13fe <main+0x678>
    143a:	01 c0       	rjmp	.+2      	; 0x143e <main+0x6b8>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    143c:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to read too much data */
    if (x >= 8)
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	88 30       	cpi	r24, 0x08	; 8
    1442:	08 f0       	brcs	.+2      	; 0x1446 <main+0x6c0>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1444:	ff cf       	rjmp	.-2      	; 0x1444 <main+0x6be>
#endif
    }

    /* Check buffer is now empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1446:	8a 89       	ldd	r24, Y+18	; 0x12
    1448:	9b 89       	ldd	r25, Y+19	; 0x13
    144a:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	80 32       	cpi	r24, 0x20	; 32
    1458:	91 05       	cpc	r25, r1
    145a:	09 f0       	breq	.+2      	; 0x145e <main+0x6d8>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    145c:	ff cf       	rjmp	.-2      	; 0x145c <main+0x6d6>

    /***************************************************************************
    * TEST 20 - Try to unput over the wrap boundary
    ***************************************************************************/
    /* Start with an empty buffer */
    cbuffClearBuffer(hOutBuffer);
    145e:	8a 89       	ldd	r24, Y+18	; 0x12
    1460:	9b 89       	ldd	r25, Y+19	; 0x13
    1462:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>
    
    writeData = 'A';
    1466:	81 e4       	ldi	r24, 0x41	; 65
    1468:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 10; x++)
    146a:	1a 82       	std	Y+2, r1	; 0x02
    146c:	0b c0       	rjmp	.+22     	; 0x1484 <main+0x6fe>
    {
        cbuffPutByte(hOutBuffer, writeData);
    146e:	8a 89       	ldd	r24, Y+18	; 0x12
    1470:	9b 89       	ldd	r25, Y+19	; 0x13
    1472:	69 81       	ldd	r22, Y+1	; 0x01
    1474:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
        writeData++;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	89 83       	std	Y+1, r24	; 0x01
    ***************************************************************************/
    /* Start with an empty buffer */
    cbuffClearBuffer(hOutBuffer);
    
    writeData = 'A';
    for (x = 0; x < 10; x++)
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	8a 83       	std	Y+2, r24	; 0x02
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	8a 30       	cpi	r24, 0x0A	; 10
    1488:	90 f3       	brcs	.-28     	; 0x146e <main+0x6e8>
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }
    
    /* Read data out again */
    while (cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    148a:	00 00       	nop
    148c:	8a 89       	ldd	r24, Y+18	; 0x12
    148e:	9b 89       	ldd	r25, Y+19	; 0x13
    1490:	9e 01       	movw	r18, r28
    1492:	2a 5e       	subi	r18, 0xEA	; 234
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	b1 f3       	breq	.-20     	; 0x148c <main+0x706>
    
    /* Fill buffer so we wrap the boundary */
    writeData = 'A';
    14a0:	81 e4       	ldi	r24, 0x41	; 65
    14a2:	89 83       	std	Y+1, r24	; 0x01
    while (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <main+0x726>
    {
        writeData++;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	89 83       	std	Y+1, r24	; 0x01
    /* Read data out again */
    while (cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    
    /* Fill buffer so we wrap the boundary */
    writeData = 'A';
    while (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    14ac:	8a 89       	ldd	r24, Y+18	; 0x12
    14ae:	9b 89       	ldd	r25, Y+19	; 0x13
    14b0:	69 81       	ldd	r22, Y+1	; 0x01
    14b2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	b1 f3       	breq	.-20     	; 0x14a6 <main+0x720>
    {
        writeData++;
    }
    writeData-=2;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	82 50       	subi	r24, 0x02	; 2
    14be:	89 83       	std	Y+1, r24	; 0x01
    
    /* unput the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there and the wrap-around works */
    x = 0;
    14c0:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUnputByte(hOutBuffer))
    14c2:	8a 89       	ldd	r24, Y+18	; 0x12
    14c4:	9b 89       	ldd	r25, Y+19	; 0x13
    14c6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <cbuffUnputByte>
    14ca:	88 23       	and	r24, r24
    14cc:	c9 f4       	brne	.+50     	; 0x1500 <main+0x77a>
        {
            if (cbuffPeekHead(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    14ce:	8a 89       	ldd	r24, Y+18	; 0x12
    14d0:	9b 89       	ldd	r25, Y+19	; 0x13
    14d2:	9e 01       	movw	r18, r28
    14d4:	2a 5e       	subi	r18, 0xEA	; 234
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	b9 01       	movw	r22, r18
    14da:	0e 94 98 04 	call	0x930	; 0x930 <cbuffPeekHead>
    14de:	88 23       	and	r24, r24
    14e0:	59 f0       	breq	.+22     	; 0x14f8 <main+0x772>
            {
                if (readData != writeData)
    14e2:	9e 89       	ldd	r25, Y+22	; 0x16
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	98 17       	cp	r25, r24
    14e8:	09 f0       	breq	.+2      	; 0x14ec <main+0x766>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    14ea:	ff cf       	rjmp	.-2      	; 0x14ea <main+0x764>
#endif
                }
                writeData--;
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	81 50       	subi	r24, 0x01	; 1
    14f0:	89 83       	std	Y+1, r24	; 0x01
                x++;
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	8f 3f       	cpi	r24, 0xFF	; 255
    14fc:	11 f7       	brne	.-60     	; 0x14c2 <main+0x73c>
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <main+0x77c>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    1500:	00 00       	nop
        }
    } while(x < 0xFF);
    
    /* Check buffer is now empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1502:	8a 89       	ldd	r24, Y+18	; 0x12
    1504:	9b 89       	ldd	r25, Y+19	; 0x13
    1506:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	80 32       	cpi	r24, 0x20	; 32
    1514:	91 05       	cpc	r25, r1
    1516:	09 f0       	breq	.+2      	; 0x151a <main+0x794>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1518:	ff cf       	rjmp	.-2      	; 0x1518 <main+0x792>
    * TEST 20a - Check cbuffUngetByte function - first fill the buffer with
    *            some known data, then remove some, then unget it i.e. put it
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    151a:	8a 89       	ldd	r24, Y+18	; 0x12
    151c:	9b 89       	ldd	r25, Y+19	; 0x13
    151e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>
    writeData = 'a';
    1522:	81 e6       	ldi	r24, 0x61	; 97
    1524:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1526:	1a 82       	std	Y+2, r1	; 0x02
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <main+0x7c2>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    152a:	8a 89       	ldd	r24, Y+18	; 0x12
    152c:	9b 89       	ldd	r25, Y+19	; 0x13
    152e:	69 81       	ldd	r22, Y+1	; 0x01
    1530:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	39 f4       	brne	.+14     	; 0x1546 <main+0x7c0>
        {
            writeData++;
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	89 83       	std	Y+1, r24	; 0x01
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = 'a';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <main+0x7c2>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1546:	ff cf       	rjmp	.-2      	; 0x1546 <main+0x7c0>
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = 'a';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 32       	cpi	r24, 0x20	; 32
    154c:	70 f3       	brcs	.-36     	; 0x152a <main+0x7a4>
#endif
        }
    }

    /* Take out all the bytes of data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    154e:	1a 82       	std	Y+2, r1	; 0x02
    1550:	0e c0       	rjmp	.+28     	; 0x156e <main+0x7e8>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    1552:	8a 89       	ldd	r24, Y+18	; 0x12
    1554:	9b 89       	ldd	r25, Y+19	; 0x13
    1556:	9e 01       	movw	r18, r28
    1558:	2a 5e       	subi	r18, 0xEA	; 234
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	b9 01       	movw	r22, r18
    155e:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	09 f0       	breq	.+2      	; 0x1568 <main+0x7e2>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1566:	ff cf       	rjmp	.-2      	; 0x1566 <main+0x7e0>
#endif
        }
    }

    /* Take out all the bytes of data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	80 32       	cpi	r24, 0x20	; 32
    1572:	78 f3       	brcs	.-34     	; 0x1552 <main+0x7cc>
            while(1);
#endif
        }
    }
    
    writeData-=1;
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	89 83       	std	Y+1, r24	; 0x01
    
    /* unget all the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there          */
    x = 0;
    157a:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUngetByte(hOutBuffer))
    157c:	8a 89       	ldd	r24, Y+18	; 0x12
    157e:	9b 89       	ldd	r25, Y+19	; 0x13
    1580:	0e 94 3a 05 	call	0xa74	; 0xa74 <cbuffUngetByte>
    1584:	88 23       	and	r24, r24
    1586:	c9 f4       	brne	.+50     	; 0x15ba <main+0x834>
        {
            if (cbuffPeekTail(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    1588:	8a 89       	ldd	r24, Y+18	; 0x12
    158a:	9b 89       	ldd	r25, Y+19	; 0x13
    158c:	9e 01       	movw	r18, r28
    158e:	2a 5e       	subi	r18, 0xEA	; 234
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	b9 01       	movw	r22, r18
    1594:	0e 94 6f 04 	call	0x8de	; 0x8de <cbuffPeekTail>
    1598:	88 23       	and	r24, r24
    159a:	59 f0       	breq	.+22     	; 0x15b2 <main+0x82c>
            {
                if (readData != writeData)
    159c:	9e 89       	ldd	r25, Y+22	; 0x16
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	98 17       	cp	r25, r24
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <main+0x820>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    15a4:	ff cf       	rjmp	.-2      	; 0x15a4 <main+0x81e>
#endif
                }
                writeData--;
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	81 50       	subi	r24, 0x01	; 1
    15aa:	89 83       	std	Y+1, r24	; 0x01
                x++;
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	8f 3f       	cpi	r24, 0xFF	; 255
    15b6:	11 f7       	brne	.-60     	; 0x157c <main+0x7f6>
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <main+0x836>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    15ba:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to unget more data than available */
    if (x != OUTBUFFERSIZE)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	80 32       	cpi	r24, 0x20	; 32
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <main+0x83e>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    15c2:	ff cf       	rjmp	.-2      	; 0x15c2 <main+0x83c>
#endif
    }

    /* Check buffer contains has no space */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    15c4:	8a 89       	ldd	r24, Y+18	; 0x12
    15c6:	9b 89       	ldd	r25, Y+19	; 0x13
    15c8:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 0)
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	09 f0       	breq	.+2      	; 0x15da <main+0x854>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    15d8:	ff cf       	rjmp	.-2      	; 0x15d8 <main+0x852>
    *            the start of the buffer boundary. Then fill the buffer with 
    *            some known data, then remove some, then unget it i.e. put it
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    15da:	8a 89       	ldd	r24, Y+18	; 0x12
    15dc:	9b 89       	ldd	r25, Y+19	; 0x13
    15de:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>
    writeData = '1';
    15e2:	81 e3       	ldi	r24, 0x31	; 49
    15e4:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 8; x++)
    15e6:	1a 82       	std	Y+2, r1	; 0x02
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <main+0x882>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    15ea:	8a 89       	ldd	r24, Y+18	; 0x12
    15ec:	9b 89       	ldd	r25, Y+19	; 0x13
    15ee:	69 81       	ldd	r22, Y+1	; 0x01
    15f0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	39 f4       	brne	.+14     	; 0x1606 <main+0x880>
        {
            writeData++;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	89 83       	std	Y+1, r24	; 0x01
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <main+0x882>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1606:	ff cf       	rjmp	.-2      	; 0x1606 <main+0x880>
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	88 30       	cpi	r24, 0x08	; 8
    160c:	70 f3       	brcs	.-36     	; 0x15ea <main+0x864>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < 8; x++)
    160e:	1a 82       	std	Y+2, r1	; 0x02
    1610:	0e c0       	rjmp	.+28     	; 0x162e <main+0x8a8>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    1612:	8a 89       	ldd	r24, Y+18	; 0x12
    1614:	9b 89       	ldd	r25, Y+19	; 0x13
    1616:	9e 01       	movw	r18, r28
    1618:	2a 5e       	subi	r18, 0xEA	; 234
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	b9 01       	movw	r22, r18
    161e:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	09 f0       	breq	.+2      	; 0x1628 <main+0x8a2>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1626:	ff cf       	rjmp	.-2      	; 0x1626 <main+0x8a0>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < 8; x++)
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	8f 5f       	subi	r24, 0xFF	; 255
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	88 30       	cpi	r24, 0x08	; 8
    1632:	78 f3       	brcs	.-34     	; 0x1612 <main+0x88c>
#endif
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    1634:	81 e4       	ldi	r24, 0x41	; 65
    1636:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1638:	1a 82       	std	Y+2, r1	; 0x02
    163a:	0f c0       	rjmp	.+30     	; 0x165a <main+0x8d4>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    163c:	8a 89       	ldd	r24, Y+18	; 0x12
    163e:	9b 89       	ldd	r25, Y+19	; 0x13
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cbuffPutByte>
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	39 f4       	brne	.+14     	; 0x1658 <main+0x8d2>
        {
            writeData++;
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	01 c0       	rjmp	.+2      	; 0x165a <main+0x8d4>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1658:	ff cf       	rjmp	.-2      	; 0x1658 <main+0x8d2>
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 32       	cpi	r24, 0x20	; 32
    165e:	70 f3       	brcs	.-36     	; 0x163c <main+0x8b6>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1660:	1a 82       	std	Y+2, r1	; 0x02
    1662:	0e c0       	rjmp	.+28     	; 0x1680 <main+0x8fa>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    1664:	8a 89       	ldd	r24, Y+18	; 0x12
    1666:	9b 89       	ldd	r25, Y+19	; 0x13
    1668:	9e 01       	movw	r18, r28
    166a:	2a 5e       	subi	r18, 0xEA	; 234
    166c:	3f 4f       	sbci	r19, 0xFF	; 255
    166e:	b9 01       	movw	r22, r18
    1670:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <main+0x8f4>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1678:	ff cf       	rjmp	.-2      	; 0x1678 <main+0x8f2>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	8f 5f       	subi	r24, 0xFF	; 255
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 32       	cpi	r24, 0x20	; 32
    1684:	78 f3       	brcs	.-34     	; 0x1664 <main+0x8de>
            while(1);
#endif
        }
    }
        
    writeData-=1;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	81 50       	subi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
    
    /* unget all the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there - this   */
    /* 'ungets' over the wrap boundary                            */
    x = 0;
    168c:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUngetByte(hOutBuffer))
    168e:	8a 89       	ldd	r24, Y+18	; 0x12
    1690:	9b 89       	ldd	r25, Y+19	; 0x13
    1692:	0e 94 3a 05 	call	0xa74	; 0xa74 <cbuffUngetByte>
    1696:	88 23       	and	r24, r24
    1698:	c9 f4       	brne	.+50     	; 0x16cc <main+0x946>
        {
            if (cbuffPeekTail(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    169a:	8a 89       	ldd	r24, Y+18	; 0x12
    169c:	9b 89       	ldd	r25, Y+19	; 0x13
    169e:	9e 01       	movw	r18, r28
    16a0:	2a 5e       	subi	r18, 0xEA	; 234
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 6f 04 	call	0x8de	; 0x8de <cbuffPeekTail>
    16aa:	88 23       	and	r24, r24
    16ac:	59 f0       	breq	.+22     	; 0x16c4 <main+0x93e>
            {
                if (readData != writeData)
    16ae:	9e 89       	ldd	r25, Y+22	; 0x16
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	98 17       	cp	r25, r24
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <main+0x932>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    16b6:	ff cf       	rjmp	.-2      	; 0x16b6 <main+0x930>
#endif
                }
                writeData--;
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	81 50       	subi	r24, 0x01	; 1
    16bc:	89 83       	std	Y+1, r24	; 0x01
                x++;
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	8f 3f       	cpi	r24, 0xFF	; 255
    16c8:	11 f7       	brne	.-60     	; 0x168e <main+0x908>
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <main+0x948>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    16cc:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to unget more data than available */
    if (x != OUTBUFFERSIZE)
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	80 32       	cpi	r24, 0x20	; 32
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <main+0x950>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    16d4:	ff cf       	rjmp	.-2      	; 0x16d4 <main+0x94e>
#endif
    }

    /* Check buffer contains has no space */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    16d6:	8a 89       	ldd	r24, Y+18	; 0x12
    16d8:	9b 89       	ldd	r25, Y+19	; 0x13
    16da:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 0)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	09 f0       	breq	.+2      	; 0x16ec <main+0x966>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    16ea:	ff cf       	rjmp	.-2      	; 0x16ea <main+0x964>
    
    /***************************************************************************
    * TEST 21 - Try to put data in circular buffer from an array
    ***************************************************************************/
    /* Clear buffers */
    cbuffClearBuffer(hInBuffer);
    16ec:	88 89       	ldd	r24, Y+16	; 0x10
    16ee:	99 89       	ldd	r25, Y+17	; 0x11
    16f0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>
    cbuffClearBuffer(hOutBuffer);
    16f4:	8a 89       	ldd	r24, Y+18	; 0x12
    16f6:	9b 89       	ldd	r25, Y+19	; 0x13
    16f8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    16fc:	1a 82       	std	Y+2, r1	; 0x02
    16fe:	0c c0       	rjmp	.+24     	; 0x1718 <main+0x992>
    {
        testBuffer2[x] = x + 'A';
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	2a 81       	ldd	r18, Y+2	; 0x02
    1708:	2f 5b       	subi	r18, 0xBF	; 191
    170a:	84 59       	subi	r24, 0x94	; 148
    170c:	9d 4f       	sbci	r25, 0xFD	; 253
    170e:	fc 01       	movw	r30, r24
    1710:	20 83       	st	Z, r18
    /* Clear buffers */
    cbuffClearBuffer(hInBuffer);
    cbuffClearBuffer(hOutBuffer);

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	8a 83       	std	Y+2, r24	; 0x02
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	80 31       	cpi	r24, 0x10	; 16
    171c:	88 f3       	brcs	.-30     	; 0x1700 <main+0x97a>
    {
        testBuffer2[x] = x + 'A';
    }

    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    171e:	8a 89       	ldd	r24, Y+18	; 0x12
    1720:	9b 89       	ldd	r25, Y+19	; 0x13
    1722:	2c e6       	ldi	r18, 0x6C	; 108
    1724:	32 e0       	ldi	r19, 0x02	; 2
    1726:	b9 01       	movw	r22, r18
    1728:	40 e1       	ldi	r20, 0x10	; 16
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05

    if (dataInBuffer != 16)
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	80 31       	cpi	r24, 0x10	; 16
    173a:	91 05       	cpc	r25, r1
    173c:	09 f0       	breq	.+2      	; 0x1740 <main+0x9ba>
    {
        /* ERROR - didn't write expected number of bytes in buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    173e:	ff cf       	rjmp	.-2      	; 0x173e <main+0x9b8>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    1740:	8a 89       	ldd	r24, Y+18	; 0x12
    1742:	9b 89       	ldd	r25, Y+19	; 0x13
    1744:	0e 94 aa 03 	call	0x754	; 0x754 <cbuffGetFill>
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    174c:	8a 89       	ldd	r24, Y+18	; 0x12
    174e:	9b 89       	ldd	r25, Y+19	; 0x13
    1750:	0e 94 3b 03 	call	0x676	; 0x676 <cbuffGetSpace>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03

    if (dataInBuffer != 16)
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	80 31       	cpi	r24, 0x10	; 16
    175e:	91 05       	cpc	r25, r1
    1760:	09 f0       	breq	.+2      	; 0x1764 <main+0x9de>
    {
        /* ERROR - buffer fill doesn't match expected value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1762:	ff cf       	rjmp	.-2      	; 0x1762 <main+0x9dc>
#endif
    }

    if (spaceRemainingInBuffer != 16)
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	80 31       	cpi	r24, 0x10	; 16
    176a:	91 05       	cpc	r25, r1
    176c:	09 f0       	breq	.+2      	; 0x1770 <main+0x9ea>
    {
        /* ERROR - bytes remaining doesn't match expected value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    176e:	ff cf       	rjmp	.-2      	; 0x176e <main+0x9e8>
#endif
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    1770:	1a 82       	std	Y+2, r1	; 0x02
    1772:	16 c0       	rjmp	.+44     	; 0x17a0 <main+0xa1a>
    {
        cbuffGetByte(hOutBuffer, &readData);
    1774:	8a 89       	ldd	r24, Y+18	; 0x12
    1776:	9b 89       	ldd	r25, Y+19	; 0x13
    1778:	9e 01       	movw	r18, r28
    177a:	2a 5e       	subi	r18, 0xEA	; 234
    177c:	3f 4f       	sbci	r19, 0xFF	; 255
    177e:	b9 01       	movw	r22, r18
    1780:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
        if (testBuffer2[x] != readData)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	84 59       	subi	r24, 0x94	; 148
    178c:	9d 4f       	sbci	r25, 0xFD	; 253
    178e:	fc 01       	movw	r30, r24
    1790:	90 81       	ld	r25, Z
    1792:	8e 89       	ldd	r24, Y+22	; 0x16
    1794:	98 17       	cp	r25, r24
    1796:	09 f0       	breq	.+2      	; 0x179a <main+0xa14>
            /* ERROR - data read from buffer doesn't match data written to    */
            /* buffer                                                         */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1798:	ff cf       	rjmp	.-2      	; 0x1798 <main+0xa12>
        while(1);
#endif
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	8a 83       	std	Y+2, r24	; 0x02
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	80 31       	cpi	r24, 0x10	; 16
    17a4:	38 f3       	brcs	.-50     	; 0x1774 <main+0x9ee>
    }

    /***************************************************************************
    * TEST 22 - Try to overfill a circular buffer from an array
    ***************************************************************************/
    cbuffClearBuffer(hOutBuffer);
    17a6:	8a 89       	ldd	r24, Y+18	; 0x12
    17a8:	9b 89       	ldd	r25, Y+19	; 0x13
    17aa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    17ae:	1a 82       	std	Y+2, r1	; 0x02
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <main+0xa44>
    {
        testBuffer2[x] = x + 'a';
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2a 81       	ldd	r18, Y+2	; 0x02
    17ba:	2f 59       	subi	r18, 0x9F	; 159
    17bc:	84 59       	subi	r24, 0x94	; 148
    17be:	9d 4f       	sbci	r25, 0xFD	; 253
    17c0:	fc 01       	movw	r30, r24
    17c2:	20 83       	st	Z, r18
    * TEST 22 - Try to overfill a circular buffer from an array
    ***************************************************************************/
    cbuffClearBuffer(hOutBuffer);

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	80 31       	cpi	r24, 0x10	; 16
    17ce:	88 f3       	brcs	.-30     	; 0x17b2 <main+0xa2c>
    {
        testBuffer2[x] = x + 'a';
    }

    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    17d0:	8a 89       	ldd	r24, Y+18	; 0x12
    17d2:	9b 89       	ldd	r25, Y+19	; 0x13
    17d4:	2c e6       	ldi	r18, 0x6C	; 108
    17d6:	32 e0       	ldi	r19, 0x02	; 2
    17d8:	b9 01       	movw	r22, r18
    17da:	40 e1       	ldi	r20, 0x10	; 16
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	80 31       	cpi	r24, 0x10	; 16
    17ec:	91 05       	cpc	r25, r1
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <main+0xa6c>
        /* ERROR - failed to write correct number of bytes to buffer which    */
        /*         had enough space                                           */
#ifdef __i386__
        assert(0);
#else
        while(1);
    17f0:	ff cf       	rjmp	.-2      	; 0x17f0 <main+0xa6a>
#endif
    }
    
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    17f2:	8a 89       	ldd	r24, Y+18	; 0x12
    17f4:	9b 89       	ldd	r25, Y+19	; 0x13
    17f6:	2c e6       	ldi	r18, 0x6C	; 108
    17f8:	32 e0       	ldi	r19, 0x02	; 2
    17fa:	b9 01       	movw	r22, r18
    17fc:	40 e1       	ldi	r20, 0x10	; 16
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	80 31       	cpi	r24, 0x10	; 16
    180e:	91 05       	cpc	r25, r1
    1810:	09 f0       	breq	.+2      	; 0x1814 <main+0xa8e>
        /* ERROR - failed to write correct number of bytes to buffer which    */
        /*         had enough space                                           */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1812:	ff cf       	rjmp	.-2      	; 0x1812 <main+0xa8c>
#endif
    }
    
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1814:	8a 89       	ldd	r24, Y+18	; 0x12
    1816:	9b 89       	ldd	r25, Y+19	; 0x13
    1818:	2c e6       	ldi	r18, 0x6C	; 108
    181a:	32 e0       	ldi	r19, 0x02	; 2
    181c:	b9 01       	movw	r22, r18
    181e:	40 e1       	ldi	r20, 0x10	; 16
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05

    if (dataInBuffer != 0)
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	09 f0       	breq	.+2      	; 0x1834 <main+0xaae>
    {
        /* ERROR - managed to put data into a full buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1832:	ff cf       	rjmp	.-2      	; 0x1832 <main+0xaac>
    /***************************************************************************
    * TEST 23 - Try write a circular buffer from an array over the circ buff
    *           boundary
    ***************************************************************************/
    /* Put new data in buffer */
    for(x = 0; x < 16; x++)
    1834:	1a 82       	std	Y+2, r1	; 0x02
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <main+0xaca>
    {
        testBuffer2[x] = x + '0';
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	2a 81       	ldd	r18, Y+2	; 0x02
    1840:	20 5d       	subi	r18, 0xD0	; 208
    1842:	84 59       	subi	r24, 0x94	; 148
    1844:	9d 4f       	sbci	r25, 0xFD	; 253
    1846:	fc 01       	movw	r30, r24
    1848:	20 83       	st	Z, r18
    /***************************************************************************
    * TEST 23 - Try write a circular buffer from an array over the circ buff
    *           boundary
    ***************************************************************************/
    /* Put new data in buffer */
    for(x = 0; x < 16; x++)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 31       	cpi	r24, 0x10	; 16
    1854:	88 f3       	brcs	.-30     	; 0x1838 <main+0xab2>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Remove eight bytes from buffer tail, and read eight bytes out */
    for (x = 0; x < 8; x++)
    1856:	1a 82       	std	Y+2, r1	; 0x02
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <main+0xaf2>
    {
        cbuffUnputByte(hOutBuffer);
    185a:	8a 89       	ldd	r24, Y+18	; 0x12
    185c:	9b 89       	ldd	r25, Y+19	; 0x13
    185e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <cbuffUnputByte>
        cbuffGetByte(hOutBuffer, &readData);
    1862:	8a 89       	ldd	r24, Y+18	; 0x12
    1864:	9b 89       	ldd	r25, Y+19	; 0x13
    1866:	9e 01       	movw	r18, r28
    1868:	2a 5e       	subi	r18, 0xEA	; 234
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	b9 01       	movw	r22, r18
    186e:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Remove eight bytes from buffer tail, and read eight bytes out */
    for (x = 0; x < 8; x++)
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	88 30       	cpi	r24, 0x08	; 8
    187c:	70 f3       	brcs	.-36     	; 0x185a <main+0xad4>
        cbuffUnputByte(hOutBuffer);
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    187e:	8a 89       	ldd	r24, Y+18	; 0x12
    1880:	9b 89       	ldd	r25, Y+19	; 0x13
    1882:	2c e6       	ldi	r18, 0x6C	; 108
    1884:	32 e0       	ldi	r19, 0x02	; 2
    1886:	b9 01       	movw	r22, r18
    1888:	40 e1       	ldi	r20, 0x10	; 16
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	80 31       	cpi	r24, 0x10	; 16
    189a:	91 05       	cpc	r25, r1
    189c:	09 f0       	breq	.+2      	; 0x18a0 <main+0xb1a>
    {
        /* ERROR - couldn't get all expected data into buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    189e:	ff cf       	rjmp	.-2      	; 0x189e <main+0xb18>
#endif
    }
    
    /* Read data out and check all is ok */
    /* First, read sixteen bytes out */
    for (x = 0; x < 16; x++)
    18a0:	1a 82       	std	Y+2, r1	; 0x02
    18a2:	0b c0       	rjmp	.+22     	; 0x18ba <main+0xb34>
    {
        cbuffGetByte(hOutBuffer, &readData);
    18a4:	8a 89       	ldd	r24, Y+18	; 0x12
    18a6:	9b 89       	ldd	r25, Y+19	; 0x13
    18a8:	9e 01       	movw	r18, r28
    18aa:	2a 5e       	subi	r18, 0xEA	; 234
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	b9 01       	movw	r22, r18
    18b0:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
#endif
    }
    
    /* Read data out and check all is ok */
    /* First, read sixteen bytes out */
    for (x = 0; x < 16; x++)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	80 31       	cpi	r24, 0x10	; 16
    18be:	90 f3       	brcs	.-28     	; 0x18a4 <main+0xb1e>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    18c0:	1a 82       	std	Y+2, r1	; 0x02
    18c2:	16 c0       	rjmp	.+44     	; 0x18f0 <main+0xb6a>
    {
        cbuffGetByte(hOutBuffer, &readData);
    18c4:	8a 89       	ldd	r24, Y+18	; 0x12
    18c6:	9b 89       	ldd	r25, Y+19	; 0x13
    18c8:	9e 01       	movw	r18, r28
    18ca:	2a 5e       	subi	r18, 0xEA	; 234
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	b9 01       	movw	r22, r18
    18d0:	0e 94 01 04 	call	0x802	; 0x802 <cbuffGetByte>
        if (testBuffer2[x] != readData)
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	84 59       	subi	r24, 0x94	; 148
    18dc:	9d 4f       	sbci	r25, 0xFD	; 253
    18de:	fc 01       	movw	r30, r24
    18e0:	90 81       	ld	r25, Z
    18e2:	8e 89       	ldd	r24, Y+22	; 0x16
    18e4:	98 17       	cp	r25, r24
    18e6:	09 f0       	breq	.+2      	; 0x18ea <main+0xb64>
            /* ERROR - data read from buffer doesn't match data written to    */
            /* buffer                                                         */
#ifdef __i386__
            assert(0);
#else
            while(1);
    18e8:	ff cf       	rjmp	.-2      	; 0x18e8 <main+0xb62>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 31       	cpi	r24, 0x10	; 16
    18f4:	38 f3       	brcs	.-50     	; 0x18c4 <main+0xb3e>

    /***************************************************************************
    * TEST 24 - Try to read data out of circular buffer into an array
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    18f6:	8a 89       	ldd	r24, Y+18	; 0x12
    18f8:	9b 89       	ldd	r25, Y+19	; 0x13
    18fa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    18fe:	1a 82       	std	Y+2, r1	; 0x02
    1900:	0c c0       	rjmp	.+24     	; 0x191a <main+0xb94>
    {
        testBuffer2[x] = x + 'a';
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	2a 81       	ldd	r18, Y+2	; 0x02
    190a:	2f 59       	subi	r18, 0x9F	; 159
    190c:	84 59       	subi	r24, 0x94	; 148
    190e:	9d 4f       	sbci	r25, 0xFD	; 253
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	8a 83       	std	Y+2, r24	; 0x02
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	80 31       	cpi	r24, 0x10	; 16
    191e:	88 f3       	brcs	.-30     	; 0x1902 <main+0xb7c>
    {
        testBuffer2[x] = x + 'a';
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1920:	8a 89       	ldd	r24, Y+18	; 0x12
    1922:	9b 89       	ldd	r25, Y+19	; 0x13
    1924:	2c e6       	ldi	r18, 0x6C	; 108
    1926:	32 e0       	ldi	r19, 0x02	; 2
    1928:	b9 01       	movw	r22, r18
    192a:	40 e1       	ldi	r20, 0x10	; 16
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1936:	1a 82       	std	Y+2, r1	; 0x02
    1938:	0a c0       	rjmp	.+20     	; 0x194e <main+0xbc8>
    {
        testBuffer2[x] = 0;
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	84 59       	subi	r24, 0x94	; 148
    1942:	9d 4f       	sbci	r25, 0xFD	; 253
    1944:	fc 01       	movw	r30, r24
    1946:	10 82       	st	Z, r1
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	8f 5f       	subi	r24, 0xFF	; 255
    194c:	8a 83       	std	Y+2, r24	; 0x02
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	80 31       	cpi	r24, 0x10	; 16
    1952:	98 f3       	brcs	.-26     	; 0x193a <main+0xbb4>
    {
        testBuffer2[x] = 0;
    }
    
    /* Read buffer out into local array */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1954:	8a 89       	ldd	r24, Y+18	; 0x12
    1956:	9b 89       	ldd	r25, Y+19	; 0x13
    1958:	2c e6       	ldi	r18, 0x6C	; 108
    195a:	32 e0       	ldi	r19, 0x02	; 2
    195c:	b9 01       	movw	r22, r18
    195e:	40 e1       	ldi	r20, 0x10	; 16
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	0e 94 28 06 	call	0xc50	; 0xc50 <cbuffGetArray>
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	80 31       	cpi	r24, 0x10	; 16
    1970:	91 05       	cpc	r25, r1
    1972:	09 f0       	breq	.+2      	; 0x1976 <main+0xbf0>
    {
        /* ERROR - didn't read required quantity of data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1974:	ff cf       	rjmp	.-2      	; 0x1974 <main+0xbee>
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1976:	1a 82       	std	Y+2, r1	; 0x02
    1978:	15 c0       	rjmp	.+42     	; 0x19a4 <main+0xc1e>
    {
        if (testBuffer2[x] != x + 'a')
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	84 59       	subi	r24, 0x94	; 148
    1982:	9d 4f       	sbci	r25, 0xFD	; 253
    1984:	fc 01       	movw	r30, r24
    1986:	80 81       	ld	r24, Z
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	8f 59       	subi	r24, 0x9F	; 159
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	09 f0       	breq	.+2      	; 0x199e <main+0xc18>
        {
            /* ERROR - data read doesn't match data written */
#ifdef __i386__
        assert(0);
#else
        while(1);
    199c:	ff cf       	rjmp	.-2      	; 0x199c <main+0xc16>
        while(1);
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	8a 83       	std	Y+2, r24	; 0x02
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	80 31       	cpi	r24, 0x10	; 16
    19a8:	40 f3       	brcs	.-48     	; 0x197a <main+0xbf4>

    /***************************************************************************
    * TEST 25 - Try to underflow a circular buffer when reading to array
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    19aa:	8a 89       	ldd	r24, Y+18	; 0x12
    19ac:	9b 89       	ldd	r25, Y+19	; 0x13
    19ae:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    19b2:	1a 82       	std	Y+2, r1	; 0x02
    19b4:	0c c0       	rjmp	.+24     	; 0x19ce <main+0xc48>
    {
        testBuffer2[x] = x + 'A';
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	2a 81       	ldd	r18, Y+2	; 0x02
    19be:	2f 5b       	subi	r18, 0xBF	; 191
    19c0:	84 59       	subi	r24, 0x94	; 148
    19c2:	9d 4f       	sbci	r25, 0xFD	; 253
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	8f 5f       	subi	r24, 0xFF	; 255
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 31       	cpi	r24, 0x10	; 16
    19d2:	88 f3       	brcs	.-30     	; 0x19b6 <main+0xc30>
    {
        testBuffer2[x] = x + 'A';
    }
    
    /* Put some data from array in the buffer */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    19d4:	8a 89       	ldd	r24, Y+18	; 0x12
    19d6:	9b 89       	ldd	r25, Y+19	; 0x13
    19d8:	2c e6       	ldi	r18, 0x6C	; 108
    19da:	32 e0       	ldi	r19, 0x02	; 2
    19dc:	b9 01       	movw	r22, r18
    19de:	48 e0       	ldi	r20, 0x08	; 8
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    19ea:	1a 82       	std	Y+2, r1	; 0x02
    19ec:	0a c0       	rjmp	.+20     	; 0x1a02 <main+0xc7c>
    {
        testBuffer2[x] = 0;
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	84 59       	subi	r24, 0x94	; 148
    19f6:	9d 4f       	sbci	r25, 0xFD	; 253
    19f8:	fc 01       	movw	r30, r24
    19fa:	10 82       	st	Z, r1
    
    /* Put some data from array in the buffer */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 31       	cpi	r24, 0x10	; 16
    1a06:	98 f3       	brcs	.-26     	; 0x19ee <main+0xc68>
    {
        testBuffer2[x] = 0;
    }
    
    /* Try to read more that is there */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1a08:	8a 89       	ldd	r24, Y+18	; 0x12
    1a0a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a0c:	2c e6       	ldi	r18, 0x6C	; 108
    1a0e:	32 e0       	ldi	r19, 0x02	; 2
    1a10:	b9 01       	movw	r22, r18
    1a12:	40 e1       	ldi	r20, 0x10	; 16
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	0e 94 28 06 	call	0xc50	; 0xc50 <cbuffGetArray>
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 8)
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	88 30       	cpi	r24, 0x08	; 8
    1a24:	91 05       	cpc	r25, r1
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <main+0xca4>
        /* ERROR - read more/less data than in buffer - should only have read */
        /*         8 bytes                                                    */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1a28:	ff cf       	rjmp	.-2      	; 0x1a28 <main+0xca2>

    /***************************************************************************
    * TEST 26 - Try to read circular buffer into array over buffer boundary
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    1a2a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a2c:	9b 89       	ldd	r25, Y+19	; 0x13
    1a2e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1a32:	1a 82       	std	Y+2, r1	; 0x02
    1a34:	0c c0       	rjmp	.+24     	; 0x1a4e <main+0xcc8>
    {
        testBuffer2[x] = x + '0';
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3e:	20 5d       	subi	r18, 0xD0	; 208
    1a40:	84 59       	subi	r24, 0x94	; 148
    1a42:	9d 4f       	sbci	r25, 0xFD	; 253
    1a44:	fc 01       	movw	r30, r24
    1a46:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 31       	cpi	r24, 0x10	; 16
    1a52:	88 f3       	brcs	.-30     	; 0x1a36 <main+0xcb0>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Put some data in the buffer with data from array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1a54:	8a 89       	ldd	r24, Y+18	; 0x12
    1a56:	9b 89       	ldd	r25, Y+19	; 0x13
    1a58:	2c e6       	ldi	r18, 0x6C	; 108
    1a5a:	32 e0       	ldi	r19, 0x02	; 2
    1a5c:	b9 01       	movw	r22, r18
    1a5e:	40 e1       	ldi	r20, 0x10	; 16
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    1a6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a6c:	9b 89       	ldd	r25, Y+19	; 0x13
    1a6e:	2c e6       	ldi	r18, 0x6C	; 108
    1a70:	32 e0       	ldi	r19, 0x02	; 2
    1a72:	b9 01       	movw	r22, r18
    1a74:	48 e0       	ldi	r20, 0x08	; 8
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Read the some data out */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1a80:	8a 89       	ldd	r24, Y+18	; 0x12
    1a82:	9b 89       	ldd	r25, Y+19	; 0x13
    1a84:	2c e6       	ldi	r18, 0x6C	; 108
    1a86:	32 e0       	ldi	r19, 0x02	; 2
    1a88:	b9 01       	movw	r22, r18
    1a8a:	40 e1       	ldi	r20, 0x10	; 16
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	0e 94 28 06 	call	0xc50	; 0xc50 <cbuffGetArray>
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 8);
    1a96:	8a 89       	ldd	r24, Y+18	; 0x12
    1a98:	9b 89       	ldd	r25, Y+19	; 0x13
    1a9a:	2c e6       	ldi	r18, 0x6C	; 108
    1a9c:	32 e0       	ldi	r19, 0x02	; 2
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	48 e0       	ldi	r20, 0x08	; 8
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	0e 94 28 06 	call	0xc50	; 0xc50 <cbuffGetArray>
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Put some more data in the buffer, writing over buffer boundary */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1aac:	8a 89       	ldd	r24, Y+18	; 0x12
    1aae:	9b 89       	ldd	r25, Y+19	; 0x13
    1ab0:	2c e6       	ldi	r18, 0x6C	; 108
    1ab2:	32 e0       	ldi	r19, 0x02	; 2
    1ab4:	b9 01       	movw	r22, r18
    1ab6:	40 e1       	ldi	r20, 0x10	; 16
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	0e 94 95 05 	call	0xb2a	; 0xb2a <cbuffPutArray>
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1ac2:	1a 82       	std	Y+2, r1	; 0x02
    1ac4:	0a c0       	rjmp	.+20     	; 0x1ada <main+0xd54>
    {
        testBuffer2[x] = 0;
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	84 59       	subi	r24, 0x94	; 148
    1ace:	9d 4f       	sbci	r25, 0xFD	; 253
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	10 82       	st	Z, r1
    
    /* Put some more data in the buffer, writing over buffer boundary */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 31       	cpi	r24, 0x10	; 16
    1ade:	98 f3       	brcs	.-26     	; 0x1ac6 <main+0xd40>
    {
        testBuffer2[x] = 0;
    }
    
    /* Read out over the boundary into the array */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1ae0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae2:	9b 89       	ldd	r25, Y+19	; 0x13
    1ae4:	2c e6       	ldi	r18, 0x6C	; 108
    1ae6:	32 e0       	ldi	r19, 0x02	; 2
    1ae8:	b9 01       	movw	r22, r18
    1aea:	40 e1       	ldi	r20, 0x10	; 16
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	0e 94 28 06 	call	0xc50	; 0xc50 <cbuffGetArray>
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	80 31       	cpi	r24, 0x10	; 16
    1afc:	91 05       	cpc	r25, r1
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <main+0xd7c>
    {
        /* ERROR - didn't read 16 bytes from buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1b00:	ff cf       	rjmp	.-2      	; 0x1b00 <main+0xd7a>
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1b02:	1a 82       	std	Y+2, r1	; 0x02
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <main+0xda8>
    {
        if (testBuffer2[x] != x + '0')
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	84 59       	subi	r24, 0x94	; 148
    1b0e:	9d 4f       	sbci	r25, 0xFD	; 253
    1b10:	fc 01       	movw	r30, r24
    1b12:	80 81       	ld	r24, Z
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	88 2f       	mov	r24, r24
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	c0 96       	adiw	r24, 0x30	; 48
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <main+0xda2>
        {
            /* ERROR - data read doesn't match data written */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1b26:	ff cf       	rjmp	.-2      	; 0x1b26 <main+0xda0>
        while(1);
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	80 31       	cpi	r24, 0x10	; 16
    1b32:	48 f3       	brcs	.-46     	; 0x1b06 <main+0xd80>
    
    /* Congratulations! If we stop here all tests passed */
#ifdef __i386__
    printf("*** All tests for -cbuff- passed ***");
#else
    while(1);
    1b34:	ff cf       	rjmp	.-2      	; 0x1b34 <main+0xdae>

00001b36 <_exit>:
    1b36:	f8 94       	cli

00001b38 <__stop_program>:
    1b38:	ff cf       	rjmp	.-2      	; 0x1b38 <__stop_program>
