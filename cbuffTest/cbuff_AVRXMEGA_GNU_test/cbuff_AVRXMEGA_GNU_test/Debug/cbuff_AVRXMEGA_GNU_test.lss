
cbuff_AVRXMEGA_GNU_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bf2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000b0  00802000  00802000  00001c66  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000023d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000151  00000000  00000000  00002411  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000788  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000173  00000000  00000000  00002cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152e  00000000  00000000  00002e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  0000438c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000403  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000009e  00000000  00000000  000048cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__ctors_end>
       4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
       c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      28:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      30:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      44:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      4c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      50:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      58:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      5c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      60:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      64:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      68:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      6c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      70:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      78:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      7c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      80:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      84:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      8c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      90:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      94:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      98:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      9c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      a8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      ac:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      b0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      b4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      b8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      bc:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      c0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      c4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      c8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      cc:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      d0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      d4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      d8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      dc:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      e0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      e4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      e8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      ec:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      f0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      f4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      f8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
      fc:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     100:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     104:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     108:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     10c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     110:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     114:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     118:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     11c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     120:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     124:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     128:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     12c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     130:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     134:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     138:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     13c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     140:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     144:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     148:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     14c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     150:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     154:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     158:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     15c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     160:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     164:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     168:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     16c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     170:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     174:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     178:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     17c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     180:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     184:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     188:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     18c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     190:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     194:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     198:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     19c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1a0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1a4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1a8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1ac:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1b0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1b4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1b8:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1bc:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1c0:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
     1c4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	df e5       	ldi	r29, 0x5F	; 95
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	cd bf       	out	0x3d, r28	; 61
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	0c bf       	out	0x3c, r16	; 60

000001d8 <__do_clear_bss>:
     1d8:	10 e2       	ldi	r17, 0x20	; 32
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b0 e2       	ldi	r27, 0x20	; 32
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	a0 3b       	cpi	r26, 0xB0	; 176
     1e4:	b1 07       	cpc	r27, r17
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>
     1e8:	0e 94 22 07 	call	0xe44	; 0xe44 <main>
     1ec:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <_exit>

000001f0 <__bad_interrupt>:
     1f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f4 <cbuffInit>:
* \note
* -# Must be called before using any functions in the CBUFF module
*
*******************************************************************************/
void cbuffInit(void)
{
     1f4:	df 93       	push	r29
     1f6:	cf 93       	push	r28
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
                                        /* Initialise the linked list pointer */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     1fc:	10 92 00 20 	sts	0x2000, r1
     200:	10 92 01 20 	sts	0x2001, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     204:	10 92 02 20 	sts	0x2002, r1
     208:	10 92 03 20 	sts	0x2003, r1
}
     20c:	cf 91       	pop	r28
     20e:	df 91       	pop	r29
     210:	08 95       	ret

00000212 <cbuffDeinit>:
* - The content of any buffers will remain in memory after this function is
*   called. If you have any data there that you don't want other to see, ensure
*   that you clear the buffer's contents before deinitialising this module.
*******************************************************************************/
void cbuffDeinit(void)
{
     212:	df 93       	push	r29
     214:	cf 93       	push	r28
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
                                        /* Clear the linked list pointer      */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
     21a:	10 92 00 20 	sts	0x2000, r1
     21e:	10 92 01 20 	sts	0x2001, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
     222:	10 92 02 20 	sts	0x2002, r1
     226:	10 92 03 20 	sts	0x2003, r1
}
     22a:	cf 91       	pop	r28
     22c:	df 91       	pop	r29
     22e:	08 95       	ret

00000230 <cbuffCreate>:
*    greater to be useful. This will, however, not be checked by this function.
*******************************************************************************/
CBUFFNUM   cbuffCreate(CBUFF        * buffer,
                       unsigned int   sizeOfBuffer,
                       CBUFFOBJ     * newCircBufferObj)
{
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
     238:	2a 97       	sbiw	r28, 0x0a	; 10
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	8d 83       	std	Y+5, r24	; 0x05
     240:	9e 83       	std	Y+6, r25	; 0x06
     242:	6f 83       	std	Y+7, r22	; 0x07
     244:	78 87       	std	Y+8, r23	; 0x08
     246:	49 87       	std	Y+9, r20	; 0x09
     248:	5a 87       	std	Y+10, r21	; 0x0a
    CBUFFOBJ * localCircBufferObj;
    CBUFFNUM circBuffNum = 0x0001;      /* Assign starting buffer number, 1,  */
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	9a 83       	std	Y+2, r25	; 0x02
                                        /* next free buffer number            */
                                        /* 0 reserved for alloc failed!       */

                                        /* Ensure there is a buffer and it    */
                                        /* has size                           */
    if ((buffer != (unsigned char *) 0) && (sizeOfBuffer != 0))
     252:	8d 81       	ldd	r24, Y+5	; 0x05
     254:	9e 81       	ldd	r25, Y+6	; 0x06
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	09 f4       	brne	.+2      	; 0x25c <cbuffCreate+0x2c>
     25a:	11 c1       	rjmp	.+546    	; 0x47e <cbuffCreate+0x24e>
     25c:	8f 81       	ldd	r24, Y+7	; 0x07
     25e:	98 85       	ldd	r25, Y+8	; 0x08
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	09 f4       	brne	.+2      	; 0x266 <cbuffCreate+0x36>
     264:	0c c1       	rjmp	.+536    	; 0x47e <cbuffCreate+0x24e>
    {
                                        /* Ensure we got somewhere to create  */
                                        /* our buffer object                  */
        if (newCircBufferObj != (CBUFFOBJ *) 0)
     266:	89 85       	ldd	r24, Y+9	; 0x09
     268:	9a 85       	ldd	r25, Y+10	; 0x0a
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	09 f4       	brne	.+2      	; 0x270 <cbuffCreate+0x40>
     26e:	07 c1       	rjmp	.+526    	; 0x47e <cbuffCreate+0x24e>
                                        /* Find place for buffer object in    */
                                        /* the linked list and assign number  */
                                        /* If there is nothing in the list,   */
                                        /* just put this object in the first  */
                                        /* position                           */
            if (activeCbuffObjs == 0 && startOfCbuffObjs == (CBUFFOBJ *) 0)
     270:	80 91 02 20 	lds	r24, 0x2002
     274:	90 91 03 20 	lds	r25, 0x2003
     278:	00 97       	sbiw	r24, 0x00	; 0
     27a:	09 f0       	breq	.+2      	; 0x27e <cbuffCreate+0x4e>
     27c:	6e c0       	rjmp	.+220    	; 0x35a <cbuffCreate+0x12a>
     27e:	80 91 00 20 	lds	r24, 0x2000
     282:	90 91 01 20 	lds	r25, 0x2001
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	09 f0       	breq	.+2      	; 0x28c <cbuffCreate+0x5c>
     28a:	67 c0       	rjmp	.+206    	; 0x35a <cbuffCreate+0x12a>
            {
                                        /* Insert buffer object at start of   */
                                        /* list                               */
                startOfCbuffObjs = newCircBufferObj;
     28c:	89 85       	ldd	r24, Y+9	; 0x09
     28e:	9a 85       	ldd	r25, Y+10	; 0x0a
     290:	80 93 00 20 	sts	0x2000, r24
     294:	90 93 01 20 	sts	0x2001, r25
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     298:	80 91 00 20 	lds	r24, 0x2000
     29c:	90 91 01 20 	lds	r25, 0x2001
     2a0:	2d 81       	ldd	r18, Y+5	; 0x05
     2a2:	3e 81       	ldd	r19, Y+6	; 0x06
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
     2a8:	31 83       	std	Z+1, r19	; 0x01
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     2aa:	80 91 00 20 	lds	r24, 0x2000
     2ae:	90 91 01 20 	lds	r25, 0x2001
     2b2:	2f 81       	ldd	r18, Y+7	; 0x07
     2b4:	38 85       	ldd	r19, Y+8	; 0x08
     2b6:	21 50       	subi	r18, 0x01	; 1
     2b8:	30 40       	sbci	r19, 0x00	; 0
     2ba:	4d 81       	ldd	r20, Y+5	; 0x05
     2bc:	5e 81       	ldd	r21, Y+6	; 0x06
     2be:	24 0f       	add	r18, r20
     2c0:	35 1f       	adc	r19, r21
     2c2:	fc 01       	movw	r30, r24
     2c4:	22 83       	std	Z+2, r18	; 0x02
     2c6:	33 83       	std	Z+3, r19	; 0x03
                                              (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     2c8:	80 91 00 20 	lds	r24, 0x2000
     2cc:	90 91 01 20 	lds	r25, 0x2001
     2d0:	2d 81       	ldd	r18, Y+5	; 0x05
     2d2:	3e 81       	ldd	r19, Y+6	; 0x06
     2d4:	fc 01       	movw	r30, r24
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
                startOfCbuffObjs->outPointer = buffer;
     2da:	80 91 00 20 	lds	r24, 0x2000
     2de:	90 91 01 20 	lds	r25, 0x2001
     2e2:	2d 81       	ldd	r18, Y+5	; 0x05
     2e4:	3e 81       	ldd	r19, Y+6	; 0x06
     2e6:	fc 01       	movw	r30, r24
     2e8:	26 83       	std	Z+6, r18	; 0x06
     2ea:	37 83       	std	Z+7, r19	; 0x07
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     2ec:	80 91 00 20 	lds	r24, 0x2000
     2f0:	90 91 01 20 	lds	r25, 0x2001
     2f4:	fc 01       	movw	r30, r24
     2f6:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     2f8:	80 91 00 20 	lds	r24, 0x2000
     2fc:	90 91 01 20 	lds	r25, 0x2001
     300:	20 91 00 20 	lds	r18, 0x2000
     304:	30 91 01 20 	lds	r19, 0x2001
     308:	f9 01       	movw	r30, r18
     30a:	22 85       	ldd	r18, Z+10	; 0x0a
     30c:	20 64       	ori	r18, 0x40	; 64
     30e:	fc 01       	movw	r30, r24
     310:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to NULL            */
                startOfCbuffObjs->nextCircBufferObj = (CBUFFOBJ *) 0;
     312:	80 91 00 20 	lds	r24, 0x2000
     316:	90 91 01 20 	lds	r25, 0x2001
     31a:	fc 01       	movw	r30, r24
     31c:	13 86       	std	Z+11, r1	; 0x0b
     31e:	14 86       	std	Z+12, r1	; 0x0c
                                        /* Assign it a number                 */
                activeCbuffObjs |= circBuffNum;
     320:	20 91 02 20 	lds	r18, 0x2002
     324:	30 91 03 20 	lds	r19, 0x2003
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	82 2b       	or	r24, r18
     32e:	93 2b       	or	r25, r19
     330:	80 93 02 20 	sts	0x2002, r24
     334:	90 93 03 20 	sts	0x2003, r25
                startOfCbuffObjs->bufferNumber = circBuffNum;
     338:	80 91 00 20 	lds	r24, 0x2000
     33c:	90 91 01 20 	lds	r25, 0x2001
     340:	29 81       	ldd	r18, Y+1	; 0x01
     342:	3a 81       	ldd	r19, Y+2	; 0x02
     344:	fc 01       	movw	r30, r24
     346:	20 87       	std	Z+8, r18	; 0x08
     348:	31 87       	std	Z+9, r19	; 0x09
                                        /* Return buffer number               */
                return startOfCbuffObjs->bufferNumber;
     34a:	80 91 00 20 	lds	r24, 0x2000
     34e:	90 91 01 20 	lds	r25, 0x2001
     352:	fc 01       	movw	r30, r24
     354:	80 85       	ldd	r24, Z+8	; 0x08
     356:	91 85       	ldd	r25, Z+9	; 0x09
     358:	94 c0       	rjmp	.+296    	; 0x482 <cbuffCreate+0x252>
            }
                                        /* Otherwise, if we haven't allocated */
                                        /* all the cbuff objects we can       */
                                        /* support, insert another            */
            else if (activeCbuffObjs != 0xFFFF)
     35a:	80 91 02 20 	lds	r24, 0x2002
     35e:	90 91 03 20 	lds	r25, 0x2003
     362:	ff ef       	ldi	r31, 0xFF	; 255
     364:	8f 3f       	cpi	r24, 0xFF	; 255
     366:	9f 07       	cpc	r25, r31
     368:	09 f4       	brne	.+2      	; 0x36c <cbuffCreate+0x13c>
     36a:	89 c0       	rjmp	.+274    	; 0x47e <cbuffCreate+0x24e>
            {
                                        /* Insert this object at the start of */
                                        /* the list                           */
                localCircBufferObj = startOfCbuffObjs;
     36c:	80 91 00 20 	lds	r24, 0x2000
     370:	90 91 01 20 	lds	r25, 0x2001
     374:	8b 83       	std	Y+3, r24	; 0x03
     376:	9c 83       	std	Y+4, r25	; 0x04
                startOfCbuffObjs = newCircBufferObj;
     378:	89 85       	ldd	r24, Y+9	; 0x09
     37a:	9a 85       	ldd	r25, Y+10	; 0x0a
     37c:	80 93 00 20 	sts	0x2000, r24
     380:	90 93 01 20 	sts	0x2001, r25
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     384:	80 91 00 20 	lds	r24, 0x2000
     388:	90 91 01 20 	lds	r25, 0x2001
     38c:	2d 81       	ldd	r18, Y+5	; 0x05
     38e:	3e 81       	ldd	r19, Y+6	; 0x06
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
     394:	31 83       	std	Z+1, r19	; 0x01
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     396:	80 91 00 20 	lds	r24, 0x2000
     39a:	90 91 01 20 	lds	r25, 0x2001
     39e:	2f 81       	ldd	r18, Y+7	; 0x07
     3a0:	38 85       	ldd	r19, Y+8	; 0x08
     3a2:	21 50       	subi	r18, 0x01	; 1
     3a4:	30 40       	sbci	r19, 0x00	; 0
     3a6:	4d 81       	ldd	r20, Y+5	; 0x05
     3a8:	5e 81       	ldd	r21, Y+6	; 0x06
     3aa:	24 0f       	add	r18, r20
     3ac:	35 1f       	adc	r19, r21
     3ae:	fc 01       	movw	r30, r24
     3b0:	22 83       	std	Z+2, r18	; 0x02
     3b2:	33 83       	std	Z+3, r19	; 0x03
                                                  (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     3b4:	80 91 00 20 	lds	r24, 0x2000
     3b8:	90 91 01 20 	lds	r25, 0x2001
     3bc:	2d 81       	ldd	r18, Y+5	; 0x05
     3be:	3e 81       	ldd	r19, Y+6	; 0x06
     3c0:	fc 01       	movw	r30, r24
     3c2:	24 83       	std	Z+4, r18	; 0x04
     3c4:	35 83       	std	Z+5, r19	; 0x05
                startOfCbuffObjs->outPointer = buffer;
     3c6:	80 91 00 20 	lds	r24, 0x2000
     3ca:	90 91 01 20 	lds	r25, 0x2001
     3ce:	2d 81       	ldd	r18, Y+5	; 0x05
     3d0:	3e 81       	ldd	r19, Y+6	; 0x06
     3d2:	fc 01       	movw	r30, r24
     3d4:	26 83       	std	Z+6, r18	; 0x06
     3d6:	37 83       	std	Z+7, r19	; 0x07
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     3d8:	80 91 00 20 	lds	r24, 0x2000
     3dc:	90 91 01 20 	lds	r25, 0x2001
     3e0:	fc 01       	movw	r30, r24
     3e2:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     3e4:	80 91 00 20 	lds	r24, 0x2000
     3e8:	90 91 01 20 	lds	r25, 0x2001
     3ec:	20 91 00 20 	lds	r18, 0x2000
     3f0:	30 91 01 20 	lds	r19, 0x2001
     3f4:	f9 01       	movw	r30, r18
     3f6:	22 85       	ldd	r18, Z+10	; 0x0a
     3f8:	20 64       	ori	r18, 0x40	; 64
     3fa:	fc 01       	movw	r30, r24
     3fc:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to next buffer     */
                                        /* object                             */
                startOfCbuffObjs->nextCircBufferObj = localCircBufferObj;
     3fe:	80 91 00 20 	lds	r24, 0x2000
     402:	90 91 01 20 	lds	r25, 0x2001
     406:	2b 81       	ldd	r18, Y+3	; 0x03
     408:	3c 81       	ldd	r19, Y+4	; 0x04
     40a:	fc 01       	movw	r30, r24
     40c:	23 87       	std	Z+11, r18	; 0x0b
     40e:	34 87       	std	Z+12, r19	; 0x0c
                                        /* Find a free cbuff number for this  */
                                        /* buffer                             */
                                        /* Cbuff Number '1' is assigned, so   */
                                        /* start looking from '2' for a free  */
                                        /* number                             */
                circBuffNum <<= 1;
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	9a 83       	std	Y+2, r25	; 0x02
                
                do
                {
                    if (!(activeCbuffObjs & circBuffNum))
     41c:	20 91 02 20 	lds	r18, 0x2002
     420:	30 91 03 20 	lds	r19, 0x2003
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	82 23       	and	r24, r18
     42a:	93 23       	and	r25, r19
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	e9 f4       	brne	.+58     	; 0x46a <cbuffCreate+0x23a>
                    {
                                        /* Assign the buffer number           */
                        activeCbuffObjs |= circBuffNum;
     430:	20 91 02 20 	lds	r18, 0x2002
     434:	30 91 03 20 	lds	r19, 0x2003
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	82 2b       	or	r24, r18
     43e:	93 2b       	or	r25, r19
     440:	80 93 02 20 	sts	0x2002, r24
     444:	90 93 03 20 	sts	0x2003, r25
                        startOfCbuffObjs->bufferNumber = circBuffNum;
     448:	80 91 00 20 	lds	r24, 0x2000
     44c:	90 91 01 20 	lds	r25, 0x2001
     450:	29 81       	ldd	r18, Y+1	; 0x01
     452:	3a 81       	ldd	r19, Y+2	; 0x02
     454:	fc 01       	movw	r30, r24
     456:	20 87       	std	Z+8, r18	; 0x08
     458:	31 87       	std	Z+9, r19	; 0x09
                        return startOfCbuffObjs->bufferNumber;
     45a:	80 91 00 20 	lds	r24, 0x2000
     45e:	90 91 01 20 	lds	r25, 0x2001
     462:	fc 01       	movw	r30, r24
     464:	80 85       	ldd	r24, Z+8	; 0x08
     466:	91 85       	ldd	r25, Z+9	; 0x09
     468:	0c c0       	rjmp	.+24     	; 0x482 <cbuffCreate+0x252>
                    }
                                        /* That wasn't free; try next bit     */
                    circBuffNum <<= 1;
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	89 83       	std	Y+1, r24	; 0x01
     474:	9a 83       	std	Y+2, r25	; 0x02
                                        /* Mask just in case unsigned int is  */
                                        /* bigger than 16-bits                */
                    circBuffNum &= 0xFFFF;
                } while(circBuffNum != 0x0000);
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	79 f6       	brne	.-98     	; 0x41c <cbuffCreate+0x1ec>
            }
        }
	}
                                        /* If buffer allocation failed,       */
                                        /* return 0 to callee                 */
    return 0;
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
}
     482:	2a 96       	adiw	r28, 0x0a	; 10
     484:	cd bf       	out	0x3d, r28	; 61
     486:	de bf       	out	0x3e, r29	; 62
     488:	cf 91       	pop	r28
     48a:	df 91       	pop	r29
     48c:	08 95       	ret

0000048e <cbuffDestroy>:
* -# Destroying a buffer object does not delete the buffer's content, nor free
*   the associated CBUFFOBJ memory used
* -# An open buffer cannot be destroyed. Such a case returns a FAIL
*******************************************************************************/
unsigned char cbuffDestroy(CBUFFNUM bufferNumber)
{
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	00 d0       	rcall	.+0      	; 0x494 <cbuffDestroy+0x6>
     494:	00 d0       	rcall	.+0      	; 0x496 <cbuffDestroy+0x8>
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	8d 83       	std	Y+5, r24	; 0x05
     49c:	9e 83       	std	Y+6, r25	; 0x06
    CBUFFOBJ * localCircBufferObj;
    CBUFFOBJ * previousCircBufferObj;
                                        /* Make sure there is something to    */
                                        /* remove                             */
    if (startOfCbuffObjs != (CBUFFOBJ *) 0)
     49e:	80 91 00 20 	lds	r24, 0x2000
     4a2:	90 91 01 20 	lds	r25, 0x2001
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	09 f4       	brne	.+2      	; 0x4ac <cbuffDestroy+0x1e>
     4aa:	75 c0       	rjmp	.+234    	; 0x596 <cbuffDestroy+0x108>
    {
                                        /* Check if first object is the one   */
                                        /* we are looking for                 */
        if (startOfCbuffObjs->bufferNumber == bufferNumber)
     4ac:	80 91 00 20 	lds	r24, 0x2000
     4b0:	90 91 01 20 	lds	r25, 0x2001
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 85       	ldd	r18, Z+8	; 0x08
     4b8:	31 85       	ldd	r19, Z+9	; 0x09
     4ba:	8d 81       	ldd	r24, Y+5	; 0x05
     4bc:	9e 81       	ldd	r25, Y+6	; 0x06
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	e1 f4       	brne	.+56     	; 0x4fc <cbuffDestroy+0x6e>
        {
                                        /* Copy where this object is pointing */
                                        /* to into startOfCbuffObjs           */
            startOfCbuffObjs = startOfCbuffObjs->nextCircBufferObj;
     4c4:	80 91 00 20 	lds	r24, 0x2000
     4c8:	90 91 01 20 	lds	r25, 0x2001
     4cc:	fc 01       	movw	r30, r24
     4ce:	83 85       	ldd	r24, Z+11	; 0x0b
     4d0:	94 85       	ldd	r25, Z+12	; 0x0c
     4d2:	80 93 00 20 	sts	0x2000, r24
     4d6:	90 93 01 20 	sts	0x2001, r25
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
            activeCbuffObjs &= ~bufferNumber;
     4da:	8d 81       	ldd	r24, Y+5	; 0x05
     4dc:	9e 81       	ldd	r25, Y+6	; 0x06
     4de:	9c 01       	movw	r18, r24
     4e0:	20 95       	com	r18
     4e2:	30 95       	com	r19
     4e4:	80 91 02 20 	lds	r24, 0x2002
     4e8:	90 91 03 20 	lds	r25, 0x2003
     4ec:	82 23       	and	r24, r18
     4ee:	93 23       	and	r25, r19
     4f0:	80 93 02 20 	sts	0x2002, r24
     4f4:	90 93 03 20 	sts	0x2003, r25
                                        /* Destroyed the desired object       */
            return CBUFF_DESTROY_OK;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	4e c0       	rjmp	.+156    	; 0x598 <cbuffDestroy+0x10a>
        }
                                        /* Otherwise loop through all objects */
                                        /* if there are some                  */
        else if (startOfCbuffObjs->nextCircBufferObj != (CBUFFOBJ *) 0)
     4fc:	80 91 00 20 	lds	r24, 0x2000
     500:	90 91 01 20 	lds	r25, 0x2001
     504:	fc 01       	movw	r30, r24
     506:	83 85       	ldd	r24, Z+11	; 0x0b
     508:	94 85       	ldd	r25, Z+12	; 0x0c
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	09 f4       	brne	.+2      	; 0x510 <cbuffDestroy+0x82>
     50e:	43 c0       	rjmp	.+134    	; 0x596 <cbuffDestroy+0x108>
        {
                                        /* Keep a copy of previous object     */
                                        /* pointer                            */
            previousCircBufferObj = startOfCbuffObjs;
     510:	80 91 00 20 	lds	r24, 0x2000
     514:	90 91 01 20 	lds	r25, 0x2001
     518:	8b 83       	std	Y+3, r24	; 0x03
     51a:	9c 83       	std	Y+4, r25	; 0x04
                                        /* Get next object in the list        */
            localCircBufferObj = startOfCbuffObjs->nextCircBufferObj;
     51c:	80 91 00 20 	lds	r24, 0x2000
     520:	90 91 01 20 	lds	r25, 0x2001
     524:	fc 01       	movw	r30, r24
     526:	83 85       	ldd	r24, Z+11	; 0x0b
     528:	94 85       	ldd	r25, Z+12	; 0x0c
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	9a 83       	std	Y+2, r25	; 0x02
                                        /* Loop through each item and check   */
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	fc 01       	movw	r30, r24
     534:	20 85       	ldd	r18, Z+8	; 0x08
     536:	31 85       	ldd	r19, Z+9	; 0x09
     538:	8d 81       	ldd	r24, Y+5	; 0x05
     53a:	9e 81       	ldd	r25, Y+6	; 0x06
     53c:	28 17       	cp	r18, r24
     53e:	39 07       	cpc	r19, r25
     540:	d9 f4       	brne	.+54     	; 0x578 <cbuffDestroy+0xea>
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
                                          localCircBufferObj->nextCircBufferObj;
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	fc 01       	movw	r30, r24
     548:	23 85       	ldd	r18, Z+11	; 0x0b
     54a:	34 85       	ldd	r19, Z+12	; 0x0c
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	fc 01       	movw	r30, r24
     552:	23 87       	std	Z+11, r18	; 0x0b
     554:	34 87       	std	Z+12, r19	; 0x0c
                                          localCircBufferObj->nextCircBufferObj;
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
                    activeCbuffObjs &= ~bufferNumber;
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	9e 81       	ldd	r25, Y+6	; 0x06
     55a:	9c 01       	movw	r18, r24
     55c:	20 95       	com	r18
     55e:	30 95       	com	r19
     560:	80 91 02 20 	lds	r24, 0x2002
     564:	90 91 03 20 	lds	r25, 0x2003
     568:	82 23       	and	r24, r18
     56a:	93 23       	and	r25, r19
     56c:	80 93 02 20 	sts	0x2002, r24
     570:	90 93 03 20 	sts	0x2003, r25
                                        /* Destroyed the desired object       */
                    return CBUFF_DESTROY_OK;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	10 c0       	rjmp	.+32     	; 0x598 <cbuffDestroy+0x10a>
                }
                else
                {
                                        /* That wasn't it                     */
                                        /* Move to next object in the list    */
                    previousCircBufferObj = localCircBufferObj;
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	8b 83       	std	Y+3, r24	; 0x03
     57e:	9c 83       	std	Y+4, r25	; 0x04
                    localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	fc 01       	movw	r30, r24
     586:	83 85       	ldd	r24, Z+11	; 0x0b
     588:	94 85       	ldd	r25, Z+12	; 0x0c
     58a:	89 83       	std	Y+1, r24	; 0x01
     58c:	9a 83       	std	Y+2, r25	; 0x02
                }
            } while (localCircBufferObj != (CBUFFOBJ *) 0);
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	61 f6       	brne	.-104    	; 0x52e <cbuffDestroy+0xa0>
        }
        
    }
                                        /* Couldn't find the desired object   */
    return CBUFF_DESTROY_FAIL;
     596:	80 e0       	ldi	r24, 0x00	; 0
}
     598:	26 96       	adiw	r28, 0x06	; 6
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <cbuffOpen>:
* \note
* -# Caller must have created (cbuffCreate()) at least one circular buffer
*    object before calling this function
*******************************************************************************/
HCBUFF cbuffOpen(CBUFFNUM bufferNumber)
{
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <cbuffOpen+0x6>
     5aa:	0f 92       	push	r0
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	8b 83       	std	Y+3, r24	; 0x03
     5b2:	9c 83       	std	Y+4, r25	; 0x04
	CBUFFOBJ * localCircBufferObj;

                                        /* Check that a CBUFFNUM object    */
                                        /* exists with bufferNumber           */
    localCircBufferObj = startOfCbuffObjs;
     5b4:	80 91 00 20 	lds	r24, 0x2000
     5b8:	90 91 01 20 	lds	r25, 0x2001
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	9a 83       	std	Y+2, r25	; 0x02

    do
    {
	    if (localCircBufferObj->bufferNumber == bufferNumber)
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	fc 01       	movw	r30, r24
     5c6:	20 85       	ldd	r18, Z+8	; 0x08
     5c8:	31 85       	ldd	r19, Z+9	; 0x09
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	9c 81       	ldd	r25, Y+4	; 0x04
     5ce:	28 17       	cp	r18, r24
     5d0:	39 07       	cpc	r19, r25
     5d2:	d1 f4       	brne	.+52     	; 0x608 <cbuffOpen+0x64>
	    {
    	                                /* Check buffer is not already open   */
            if (!(localCircBufferObj->localFlag & CBUFF_OPEN))
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	fc 01       	movw	r30, r24
     5da:	82 85       	ldd	r24, Z+10	; 0x0a
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	80 72       	andi	r24, 0x20	; 32
     5e2:	90 70       	andi	r25, 0x00	; 0
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	69 f4       	brne	.+26     	; 0x602 <cbuffOpen+0x5e>
            {
                                        /* Note that it is now in use         */
                localCircBufferObj->localFlag |= CBUFF_OPEN;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	9a 81       	ldd	r25, Y+2	; 0x02
     5ec:	fc 01       	movw	r30, r24
     5ee:	82 85       	ldd	r24, Z+10	; 0x0a
     5f0:	28 2f       	mov	r18, r24
     5f2:	20 62       	ori	r18, 0x20	; 32
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	fc 01       	movw	r30, r24
     5fa:	22 87       	std	Z+10, r18	; 0x0a
    	                                /* Return handle to it                */
    	        return localCircBufferObj;
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	10 c0       	rjmp	.+32     	; 0x622 <cbuffOpen+0x7e>
    	    }
    	                                /* If buffer is already open, return  */
    	                                /* NULL handle pointer                */
    	    else
    	    {
        	    return (CBUFFOBJ *) 0;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0d c0       	rjmp	.+26     	; 0x622 <cbuffOpen+0x7e>
        	}
    	}
    	else
    	{
        	localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	fc 01       	movw	r30, r24
     60e:	83 85       	ldd	r24, Z+11	; 0x0b
     610:	94 85       	ldd	r25, Z+12	; 0x0c
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	9a 83       	std	Y+2, r25	; 0x02
        }
	} while (localCircBufferObj != (CBUFFOBJ *) 0);
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	89 f6       	brne	.-94     	; 0x5c0 <cbuffOpen+0x1c>

    	                                /* Return handle to NULL otherwise    */
    return (CBUFFOBJ *) 0;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
}
     622:	24 96       	adiw	r28, 0x04	; 4
     624:	cd bf       	out	0x3d, r28	; 61
     626:	de bf       	out	0x3e, r29	; 62
     628:	cf 91       	pop	r28
     62a:	df 91       	pop	r29
     62c:	08 95       	ret

0000062e <cbuffClose>:
* \note
* -# Caller must have 'allocated' and opened at least one circular buffer object
*    before calling this function
*******************************************************************************/
CBUFFNUM cbuffClose(HCBUFF hCircBuffer)
{
     62e:	df 93       	push	r29
     630:	cf 93       	push	r28
     632:	0f 92       	push	r0
     634:	0f 92       	push	r0
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	89 83       	std	Y+1, r24	; 0x01
     63c:	9a 83       	std	Y+2, r25	; 0x02
    	                                /* Check buffer is actually open      */
    if (hCircBuffer->localFlag & CBUFF_OPEN)
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	fc 01       	movw	r30, r24
     644:	82 85       	ldd	r24, Z+10	; 0x0a
     646:	88 2f       	mov	r24, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	80 72       	andi	r24, 0x20	; 32
     64c:	90 70       	andi	r25, 0x00	; 0
     64e:	00 97       	sbiw	r24, 0x00	; 0
     650:	81 f0       	breq	.+32     	; 0x672 <cbuffClose+0x44>
    {
    	                                /* Note that this buffer object is    */
    	                                /* closed                             */
        hCircBuffer->localFlag &= ~CBUFF_OPEN;
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	9a 81       	ldd	r25, Y+2	; 0x02
     656:	fc 01       	movw	r30, r24
     658:	82 85       	ldd	r24, Z+10	; 0x0a
     65a:	28 2f       	mov	r18, r24
     65c:	2f 7d       	andi	r18, 0xDF	; 223
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	fc 01       	movw	r30, r24
     664:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Return buffer object's buffer      */
                                        /* number                             */
        return hCircBuffer->bufferNumber;
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	9a 81       	ldd	r25, Y+2	; 0x02
     66a:	fc 01       	movw	r30, r24
     66c:	80 85       	ldd	r24, Z+8	; 0x08
     66e:	91 85       	ldd	r25, Z+9	; 0x09
     670:	02 c0       	rjmp	.+4      	; 0x676 <cbuffClose+0x48>
    }
                                        /* Otherwise return 0 to say that     */
                                        /* buffer object wasn't open          */
    else
    {
        return (CBUFFNUM) 0;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <cbuffPutByte>:
* -# cbuffOpen() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned char cbuffPutByte(HCBUFF hCircBuffer,
                           CBUFF  data)
{
     680:	df 93       	push	r29
     682:	cf 93       	push	r28
     684:	00 d0       	rcall	.+0      	; 0x686 <cbuffPutByte+0x6>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	89 83       	std	Y+1, r24	; 0x01
     68c:	9a 83       	std	Y+2, r25	; 0x02
     68e:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	fc 01       	movw	r30, r24
     696:	82 85       	ldd	r24, Z+10	; 0x0a
     698:	88 23       	and	r24, r24
     69a:	14 f4       	brge	.+4      	; 0x6a0 <cbuffPutByte+0x20>
    {
        return CBUFF_PUT_FAIL;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	4e c0       	rjmp	.+156    	; 0x73c <cbuffPutByte+0xbc>
    }

    *hCircBuffer->inPointer = data;     /* Put data in buffer                 */
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	fc 01       	movw	r30, r24
     6a6:	84 81       	ldd	r24, Z+4	; 0x04
     6a8:	95 81       	ldd	r25, Z+5	; 0x05
     6aa:	2b 81       	ldd	r18, Y+3	; 0x03
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18

    hCircBuffer->inPointer++;           /* Increment pointer                  */
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	fc 01       	movw	r30, r24
     6b6:	84 81       	ldd	r24, Z+4	; 0x04
     6b8:	95 81       	ldd	r25, Z+5	; 0x05
     6ba:	9c 01       	movw	r18, r24
     6bc:	2f 5f       	subi	r18, 0xFF	; 255
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	fc 01       	movw	r30, r24
     6c6:	24 83       	std	Z+4, r18	; 0x04
     6c8:	35 83       	std	Z+5, r19	; 0x05

                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	fc 01       	movw	r30, r24
     6d0:	82 85       	ldd	r24, Z+10	; 0x0a
     6d2:	28 2f       	mov	r18, r24
     6d4:	2f 7b       	andi	r18, 0xBF	; 191
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	fc 01       	movw	r30, r24
     6dc:	22 87       	std	Z+10, r18	; 0x0a

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
    if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	fc 01       	movw	r30, r24
     6e4:	24 81       	ldd	r18, Z+4	; 0x04
     6e6:	35 81       	ldd	r19, Z+5	; 0x05
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	fc 01       	movw	r30, r24
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	93 81       	ldd	r25, Z+3	; 0x03
     6f2:	82 17       	cp	r24, r18
     6f4:	93 07       	cpc	r25, r19
     6f6:	50 f4       	brcc	.+20     	; 0x70c <cbuffPutByte+0x8c>
    {
        hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 81       	ld	r18, Z
     700:	31 81       	ldd	r19, Z+1	; 0x01
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	fc 01       	movw	r30, r24
     708:	24 83       	std	Z+4, r18	; 0x04
     70a:	35 83       	std	Z+5, r19	; 0x05
    }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	fc 01       	movw	r30, r24
     712:	24 81       	ldd	r18, Z+4	; 0x04
     714:	35 81       	ldd	r19, Z+5	; 0x05
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	9a 81       	ldd	r25, Y+2	; 0x02
     71a:	fc 01       	movw	r30, r24
     71c:	86 81       	ldd	r24, Z+6	; 0x06
     71e:	97 81       	ldd	r25, Z+7	; 0x07
     720:	28 17       	cp	r18, r24
     722:	39 07       	cpc	r19, r25
     724:	51 f4       	brne	.+20     	; 0x73a <cbuffPutByte+0xba>
    {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
        hCircBuffer->localFlag |= CBUFF_FULL;
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	9a 81       	ldd	r25, Y+2	; 0x02
     72a:	fc 01       	movw	r30, r24
     72c:	82 85       	ldd	r24, Z+10	; 0x0a
     72e:	28 2f       	mov	r18, r24
     730:	20 68       	ori	r18, 0x80	; 128
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	fc 01       	movw	r30, r24
     738:	22 87       	std	Z+10, r18	; 0x0a
    }

    return CBUFF_PUT_OK;
     73a:	81 e0       	ldi	r24, 0x01	; 1
}
     73c:	23 96       	adiw	r28, 0x03	; 3
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	de bf       	out	0x3e, r29	; 62
     742:	cf 91       	pop	r28
     744:	df 91       	pop	r29
     746:	08 95       	ret

00000748 <cbuffGetSpace>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetSpace(HCBUFF hCircBuffer)
{
     748:	df 93       	push	r29
     74a:	cf 93       	push	r28
     74c:	0f 92       	push	r0
     74e:	0f 92       	push	r0
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	9a 83       	std	Y+2, r25	; 0x02
#endif

                                        /* If CBUFF_FULL is              */
                                        /* set, then there is no space in     */
                                        /* buffer; simply return 0            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	9a 81       	ldd	r25, Y+2	; 0x02
     75c:	fc 01       	movw	r30, r24
     75e:	82 85       	ldd	r24, Z+10	; 0x0a
     760:	88 23       	and	r24, r24
     762:	1c f4       	brge	.+6      	; 0x76a <cbuffGetSpace+0x22>
    {
        return 0;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	5a c0       	rjmp	.+180    	; 0x81e <cbuffGetSpace+0xd6>
    }
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	fc 01       	movw	r30, r24
     770:	82 85       	ldd	r24, Z+10	; 0x0a
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	80 74       	andi	r24, 0x40	; 64
     778:	90 70       	andi	r25, 0x00	; 0
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	89 f0       	breq	.+34     	; 0x7a0 <cbuffGetSpace+0x58>
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	9a 81       	ldd	r25, Y+2	; 0x02
     782:	fc 01       	movw	r30, r24
     784:	82 81       	ldd	r24, Z+2	; 0x02
     786:	93 81       	ldd	r25, Z+3	; 0x03
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	9c 01       	movw	r18, r24
                                hCircBuffer->startOfBuffer);
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     796:	a9 01       	movw	r20, r18
     798:	48 1b       	sub	r20, r24
     79a:	59 0b       	sbc	r21, r25
     79c:	ca 01       	movw	r24, r20
     79e:	3f c0       	rjmp	.+126    	; 0x81e <cbuffGetSpace+0xd6>
                                        /* If inPointer is larger than the    */
                                        /* outPointer in physical value, the  */
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	fc 01       	movw	r30, r24
     7a6:	24 81       	ldd	r18, Z+4	; 0x04
     7a8:	35 81       	ldd	r19, Z+5	; 0x05
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	fc 01       	movw	r30, r24
     7b0:	86 81       	ldd	r24, Z+6	; 0x06
     7b2:	97 81       	ldd	r25, Z+7	; 0x07
     7b4:	82 17       	cp	r24, r18
     7b6:	93 07       	cpc	r25, r19
     7b8:	18 f5       	brcc	.+70     	; 0x800 <cbuffGetSpace+0xb8>
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	fc 01       	movw	r30, r24
     7c0:	82 81       	ldd	r24, Z+2	; 0x02
     7c2:	93 81       	ldd	r25, Z+3	; 0x03
     7c4:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	fc 01       	movw	r30, r24
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     7d0:	a9 01       	movw	r20, r18
     7d2:	48 1b       	sub	r20, r24
     7d4:	59 0b       	sbc	r21, r25
     7d6:	ca 01       	movw	r24, r20
     7d8:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
                                 hCircBuffer->outPointer));
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	fc 01       	movw	r30, r24
     7e0:	86 81       	ldd	r24, Z+6	; 0x06
     7e2:	97 81       	ldd	r25, Z+7	; 0x07
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
     7e4:	ac 01       	movw	r20, r24
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	fc 01       	movw	r30, r24
     7ec:	84 81       	ldd	r24, Z+4	; 0x04
     7ee:	95 81       	ldd	r25, Z+5	; 0x05
     7f0:	ba 01       	movw	r22, r20
     7f2:	68 1b       	sub	r22, r24
     7f4:	79 0b       	sbc	r23, r25
     7f6:	cb 01       	movw	r24, r22
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	0f c0       	rjmp	.+30     	; 0x81e <cbuffGetSpace+0xd6>
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	fc 01       	movw	r30, r24
     806:	86 81       	ldd	r24, Z+6	; 0x06
     808:	97 81       	ldd	r25, Z+7	; 0x07
     80a:	9c 01       	movw	r18, r24
                               hCircBuffer->inPointer);
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	fc 01       	movw	r30, r24
     812:	84 81       	ldd	r24, Z+4	; 0x04
     814:	95 81       	ldd	r25, Z+5	; 0x05
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     816:	a9 01       	movw	r20, r18
     818:	48 1b       	sub	r20, r24
     81a:	59 0b       	sbc	r21, r25
     81c:	ca 01       	movw	r24, r20
#endif
#if 0
        return (localOutPointer - localInPointer);
#endif
    }
}
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	08 95       	ret

00000828 <cbuffGetFill>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	0f 92       	push	r0
     832:	0f 92       	push	r0
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	9a 83       	std	Y+2, r25	; 0x02
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	fc 01       	movw	r30, r24
     842:	82 81       	ldd	r24, Z+2	; 0x02
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	9c 01       	movw	r18, r24
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	a9 01       	movw	r20, r18
     854:	48 1b       	sub	r20, r24
     856:	59 0b       	sbc	r21, r25
     858:	ca 01       	movw	r24, r20
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
     85a:	8c 01       	movw	r16, r24
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
     864:	f8 01       	movw	r30, r16
     866:	e8 1b       	sub	r30, r24
     868:	f9 0b       	sbc	r31, r25
     86a:	cf 01       	movw	r24, r30
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     86c:	01 96       	adiw	r24, 0x01	; 1
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
}
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <cbuffClearBuffer>:
* \todo Consider renaming this function to 'cbuffResetBuffer()' and using this
*       function name for the function to acutally clear all of the data in the
*       buffer.
*******************************************************************************/
void cbuffClearBuffer(HCBUFF hCircBuffer)
{
     87c:	df 93       	push	r29
     87e:	cf 93       	push	r28
     880:	0f 92       	push	r0
     882:	0f 92       	push	r0
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	89 83       	std	Y+1, r24	; 0x01
     88a:	9a 83       	std	Y+2, r25	; 0x02
                                        /* Reset buffer pointers              */
    hCircBuffer->inPointer  = hCircBuffer->startOfBuffer;
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	9a 81       	ldd	r25, Y+2	; 0x02
     890:	fc 01       	movw	r30, r24
     892:	20 81       	ld	r18, Z
     894:	31 81       	ldd	r19, Z+1	; 0x01
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	fc 01       	movw	r30, r24
     89c:	24 83       	std	Z+4, r18	; 0x04
     89e:	35 83       	std	Z+5, r19	; 0x05
    hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 81       	ld	r18, Z
     8a8:	31 81       	ldd	r19, Z+1	; 0x01
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	fc 01       	movw	r30, r24
     8b0:	26 83       	std	Z+6, r18	; 0x06
     8b2:	37 83       	std	Z+7, r19	; 0x07
                                        /* Clear all flags                    */
    hCircBuffer->localFlag  = 0x00;
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	fc 01       	movw	r30, r24
     8ba:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
    hCircBuffer->localFlag |= CBUFF_EMPTY;
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	fc 01       	movw	r30, r24
     8c2:	82 85       	ldd	r24, Z+10	; 0x0a
     8c4:	28 2f       	mov	r18, r24
     8c6:	20 64       	ori	r18, 0x40	; 64
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	fc 01       	movw	r30, r24
     8ce:	22 87       	std	Z+10, r18	; 0x0a
}
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	cf 91       	pop	r28
     8d6:	df 91       	pop	r29
     8d8:	08 95       	ret

000008da <cbuffGetByte>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffGetByte(HCBUFF       hCircBuffer,
                           CBUFF      * data)
{
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <cbuffGetByte+0x6>
     8e0:	0f 92       	push	r0
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	6b 83       	std	Y+3, r22	; 0x03
     8ec:	7c 83       	std	Y+4, r23	; 0x04
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	fc 01       	movw	r30, r24
     8f4:	82 85       	ldd	r24, Z+10	; 0x0a
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	80 74       	andi	r24, 0x40	; 64
     8fc:	90 70       	andi	r25, 0x00	; 0
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	11 f0       	breq	.+4      	; 0x906 <cbuffGetByte+0x2c>
    {
        return CBUFF_GET_FAIL;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	51 c0       	rjmp	.+162    	; 0x9a8 <cbuffGetByte+0xce>
    }
                                        /* Read requested byte                */
    *data = *hCircBuffer->outPointer;
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	fc 01       	movw	r30, r24
     90c:	86 81       	ldd	r24, Z+6	; 0x06
     90e:	97 81       	ldd	r25, Z+7	; 0x07
     910:	fc 01       	movw	r30, r24
     912:	20 81       	ld	r18, Z
     914:	8b 81       	ldd	r24, Y+3	; 0x03
     916:	9c 81       	ldd	r25, Y+4	; 0x04
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
    hCircBuffer->outPointer++;
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	fc 01       	movw	r30, r24
     922:	86 81       	ldd	r24, Z+6	; 0x06
     924:	97 81       	ldd	r25, Z+7	; 0x07
     926:	9c 01       	movw	r18, r24
     928:	2f 5f       	subi	r18, 0xFF	; 255
     92a:	3f 4f       	sbci	r19, 0xFF	; 255
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	fc 01       	movw	r30, r24
     932:	26 83       	std	Z+6, r18	; 0x06
     934:	37 83       	std	Z+7, r19	; 0x07

                                        /* Implement wrap around              */
    if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	fc 01       	movw	r30, r24
     93c:	26 81       	ldd	r18, Z+6	; 0x06
     93e:	37 81       	ldd	r19, Z+7	; 0x07
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	fc 01       	movw	r30, r24
     946:	82 81       	ldd	r24, Z+2	; 0x02
     948:	93 81       	ldd	r25, Z+3	; 0x03
     94a:	82 17       	cp	r24, r18
     94c:	93 07       	cpc	r25, r19
     94e:	50 f4       	brcc	.+20     	; 0x964 <cbuffGetByte+0x8a>
    {
        hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	fc 01       	movw	r30, r24
     956:	20 81       	ld	r18, Z
     958:	31 81       	ldd	r19, Z+1	; 0x01
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	fc 01       	movw	r30, r24
     960:	26 83       	std	Z+6, r18	; 0x06
     962:	37 83       	std	Z+7, r19	; 0x07
    }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	fc 01       	movw	r30, r24
     96a:	26 81       	ldd	r18, Z+6	; 0x06
     96c:	37 81       	ldd	r19, Z+7	; 0x07
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	fc 01       	movw	r30, r24
     974:	84 81       	ldd	r24, Z+4	; 0x04
     976:	95 81       	ldd	r25, Z+5	; 0x05
     978:	28 17       	cp	r18, r24
     97a:	39 07       	cpc	r19, r25
     97c:	51 f4       	brne	.+20     	; 0x992 <cbuffGetByte+0xb8>
    {
                                        /* Note that the buffer is empty      */
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	fc 01       	movw	r30, r24
     984:	82 85       	ldd	r24, Z+10	; 0x0a
     986:	28 2f       	mov	r18, r24
     988:	20 64       	ori	r18, 0x40	; 64
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	fc 01       	movw	r30, r24
     990:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	fc 01       	movw	r30, r24
     998:	82 85       	ldd	r24, Z+10	; 0x0a
     99a:	28 2f       	mov	r18, r24
     99c:	2f 77       	andi	r18, 0x7F	; 127
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	fc 01       	movw	r30, r24
     9a4:	22 87       	std	Z+10, r18	; 0x0a

    return CBUFF_GET_OK;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
}
     9a8:	24 96       	adiw	r28, 0x04	; 4
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <cbuffPeekTail>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekTail(HCBUFF   hCircBuffer,
                           CBUFF  * data)
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <cbuffPeekTail+0x6>
     9ba:	0f 92       	push	r0
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	9a 83       	std	Y+2, r25	; 0x02
     9c4:	6b 83       	std	Y+3, r22	; 0x03
     9c6:	7c 83       	std	Y+4, r23	; 0x04
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	fc 01       	movw	r30, r24
     9ce:	82 85       	ldd	r24, Z+10	; 0x0a
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	80 74       	andi	r24, 0x40	; 64
     9d6:	90 70       	andi	r25, 0x00	; 0
     9d8:	00 97       	sbiw	r24, 0x00	; 0
     9da:	69 f4       	brne	.+26     	; 0x9f6 <cbuffPeekTail+0x42>
    {
                                        /* Return head value in data          */
        *data = *hCircBuffer->outPointer;
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	fc 01       	movw	r30, r24
     9e2:	86 81       	ldd	r24, Z+6	; 0x06
     9e4:	97 81       	ldd	r25, Z+7	; 0x07
     9e6:	fc 01       	movw	r30, r24
     9e8:	20 81       	ld	r18, Z
     9ea:	8b 81       	ldd	r24, Y+3	; 0x03
     9ec:	9c 81       	ldd	r25, Y+4	; 0x04
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
        return CBUFF_GET_OK;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <cbuffPeekTail+0x44>
    }
    else
    {
        return CBUFF_GET_FAIL;
     9f6:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     9f8:	24 96       	adiw	r28, 0x04	; 4
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	08 95       	ret

00000a04 <cbuffPeekHead>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekHead(HCBUFF   hCircBuffer,
                            CBUFF  * data)
{
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	00 d0       	rcall	.+0      	; 0xa0a <cbuffPeekHead+0x6>
     a0a:	0f 92       	push	r0
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	6b 83       	std	Y+3, r22	; 0x03
     a16:	7c 83       	std	Y+4, r23	; 0x04
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	fc 01       	movw	r30, r24
     a1e:	82 85       	ldd	r24, Z+10	; 0x0a
     a20:	88 2f       	mov	r24, r24
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	80 74       	andi	r24, 0x40	; 64
     a26:	90 70       	andi	r25, 0x00	; 0
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	39 f5       	brne	.+78     	; 0xa7a <cbuffPeekHead+0x76>
    {
                                        /* If inPointer doesn't point to      */
                                        /* startOfBuffer, return value at     */
                                        /* (inPointer - 1)                    */
        if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	fc 01       	movw	r30, r24
     a32:	24 81       	ldd	r18, Z+4	; 0x04
     a34:	35 81       	ldd	r19, Z+5	; 0x05
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	9a 81       	ldd	r25, Y+2	; 0x02
     a3a:	fc 01       	movw	r30, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	28 17       	cp	r18, r24
     a42:	39 07       	cpc	r19, r25
     a44:	69 f0       	breq	.+26     	; 0xa60 <cbuffPeekHead+0x5c>
        {
            *data = *(hCircBuffer->inPointer - sizeof(CBUFF));
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	9a 81       	ldd	r25, Y+2	; 0x02
     a4a:	fc 01       	movw	r30, r24
     a4c:	84 81       	ldd	r24, Z+4	; 0x04
     a4e:	95 81       	ldd	r25, Z+5	; 0x05
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	fc 01       	movw	r30, r24
     a54:	20 81       	ld	r18, Z
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
     a5e:	0b c0       	rjmp	.+22     	; 0xa76 <cbuffPeekHead+0x72>
        }
                                        /* Otherwise handle buffer wrap       */
                                        /* situation                          */
        else
        {
            *data = *hCircBuffer->endOfBuffer;
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	fc 01       	movw	r30, r24
     a66:	82 81       	ldd	r24, Z+2	; 0x02
     a68:	93 81       	ldd	r25, Z+3	; 0x03
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 81       	ld	r18, Z
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	fc 01       	movw	r30, r24
     a74:	20 83       	st	Z, r18
        }
        return CBUFF_GET_OK;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <cbuffPeekHead+0x78>
    }
    else
    {
        return CBUFF_GET_FAIL;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     a7c:	24 96       	adiw	r28, 0x04	; 4
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	08 95       	ret

00000a88 <cbuffUnputByte>:
*    buffer is now empty, this function will fail in its attempt
* -# The data itself is not removed; only the head pointer to the buffer is
*    moved back one position
*******************************************************************************/
unsigned char cbuffUnputByte(HCBUFF  hCircBuffer)
{
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	0f 92       	push	r0
     a8e:	0f 92       	push	r0
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	9a 83       	std	Y+2, r25	; 0x02
                                        /* Check to see if we can unput at    */
                                        /* all. If buffer is empty, do        */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	fc 01       	movw	r30, r24
     a9e:	82 85       	ldd	r24, Z+10	; 0x0a
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	80 74       	andi	r24, 0x40	; 64
     aa6:	90 70       	andi	r25, 0x00	; 0
     aa8:	00 97       	sbiw	r24, 0x00	; 0
     aaa:	11 f0       	breq	.+4      	; 0xab0 <cbuffUnputByte+0x28>
    {
        return 1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	47 c0       	rjmp	.+142    	; 0xb3e <cbuffUnputByte+0xb6>
    }
                                        /* unput the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	fc 01       	movw	r30, r24
     ab6:	24 81       	ldd	r18, Z+4	; 0x04
     ab8:	35 81       	ldd	r19, Z+5	; 0x05
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	71 f0       	breq	.+28     	; 0xae6 <cbuffUnputByte+0x5e>
    {
        hCircBuffer->inPointer--;
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	fc 01       	movw	r30, r24
     ad0:	84 81       	ldd	r24, Z+4	; 0x04
     ad2:	95 81       	ldd	r25, Z+5	; 0x05
     ad4:	9c 01       	movw	r18, r24
     ad6:	21 50       	subi	r18, 0x01	; 1
     ad8:	30 40       	sbci	r19, 0x00	; 0
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	fc 01       	movw	r30, r24
     ae0:	24 83       	std	Z+4, r18	; 0x04
     ae2:	35 83       	std	Z+5, r19	; 0x05
     ae4:	0a c0       	rjmp	.+20     	; 0xafa <cbuffUnputByte+0x72>
    }
                                        /* For boundary case implent wrap-    */
                                        /* around                             */
    else
    {
        hCircBuffer->inPointer = hCircBuffer->endOfBuffer;
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	fc 01       	movw	r30, r24
     aec:	22 81       	ldd	r18, Z+2	; 0x02
     aee:	33 81       	ldd	r19, Z+3	; 0x03
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	fc 01       	movw	r30, r24
     af6:	24 83       	std	Z+4, r18	; 0x04
     af8:	35 83       	std	Z+5, r19	; 0x05
    }
                                        /* Check if buffer is now empty       */
    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	fc 01       	movw	r30, r24
     b00:	24 81       	ldd	r18, Z+4	; 0x04
     b02:	35 81       	ldd	r19, Z+5	; 0x05
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	fc 01       	movw	r30, r24
     b0a:	86 81       	ldd	r24, Z+6	; 0x06
     b0c:	97 81       	ldd	r25, Z+7	; 0x07
     b0e:	28 17       	cp	r18, r24
     b10:	39 07       	cpc	r19, r25
     b12:	51 f4       	brne	.+20     	; 0xb28 <cbuffUnputByte+0xa0>
    {
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	9a 81       	ldd	r25, Y+2	; 0x02
     b18:	fc 01       	movw	r30, r24
     b1a:	82 85       	ldd	r24, Z+10	; 0x0a
     b1c:	28 2f       	mov	r18, r24
     b1e:	20 64       	ori	r18, 0x40	; 64
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	fc 01       	movw	r30, r24
     b26:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not full  */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	fc 01       	movw	r30, r24
     b2e:	82 85       	ldd	r24, Z+10	; 0x0a
     b30:	28 2f       	mov	r18, r24
     b32:	2f 77       	andi	r18, 0x7F	; 127
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	fc 01       	movw	r30, r24
     b3a:	22 87       	std	Z+10, r18	; 0x0a

    return 0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
}
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <cbuffUngetByte>:
*    values left over after a 'cbuffClearBuffer' will be 'ungot'. The buffer
*    can still be 'ungot' until the tail pointer gets back to the point
*    where it reaches the head pointer.
*******************************************************************************/
unsigned char  cbuffUngetByte(HCBUFF  hCircBuffer)
{
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	0f 92       	push	r0
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	9a 83       	std	Y+2, r25	; 0x02
                                        /* Check to see if we can unget at    */
                                        /* all. If buffer is full, do         */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	fc 01       	movw	r30, r24
     b5e:	82 85       	ldd	r24, Z+10	; 0x0a
     b60:	88 23       	and	r24, r24
     b62:	14 f4       	brge	.+4      	; 0xb68 <cbuffUngetByte+0x20>
    {
        return 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	47 c0       	rjmp	.+142    	; 0xbf6 <cbuffUngetByte+0xae>
    }
                                        /* unget the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->outPointer != hCircBuffer->startOfBuffer)
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	9a 81       	ldd	r25, Y+2	; 0x02
     b6c:	fc 01       	movw	r30, r24
     b6e:	26 81       	ldd	r18, Z+6	; 0x06
     b70:	37 81       	ldd	r19, Z+7	; 0x07
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	fc 01       	movw	r30, r24
     b78:	80 81       	ld	r24, Z
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	28 17       	cp	r18, r24
     b7e:	39 07       	cpc	r19, r25
     b80:	71 f0       	breq	.+28     	; 0xb9e <cbuffUngetByte+0x56>
    {
        hCircBuffer->outPointer--;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	9a 81       	ldd	r25, Y+2	; 0x02
     b86:	fc 01       	movw	r30, r24
     b88:	86 81       	ldd	r24, Z+6	; 0x06
     b8a:	97 81       	ldd	r25, Z+7	; 0x07
     b8c:	9c 01       	movw	r18, r24
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	30 40       	sbci	r19, 0x00	; 0
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	fc 01       	movw	r30, r24
     b98:	26 83       	std	Z+6, r18	; 0x06
     b9a:	37 83       	std	Z+7, r19	; 0x07
     b9c:	0a c0       	rjmp	.+20     	; 0xbb2 <cbuffUngetByte+0x6a>
    }
                                        /* For boundary case implementnt      */
                                        /* wraparound                         */
    else
    {
        hCircBuffer->outPointer = hCircBuffer->endOfBuffer;
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	9a 81       	ldd	r25, Y+2	; 0x02
     ba2:	fc 01       	movw	r30, r24
     ba4:	22 81       	ldd	r18, Z+2	; 0x02
     ba6:	33 81       	ldd	r19, Z+3	; 0x03
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	9a 81       	ldd	r25, Y+2	; 0x02
     bac:	fc 01       	movw	r30, r24
     bae:	26 83       	std	Z+6, r18	; 0x06
     bb0:	37 83       	std	Z+7, r19	; 0x07
    }
                                        /* Check if buffer is now full        */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	fc 01       	movw	r30, r24
     bb8:	26 81       	ldd	r18, Z+6	; 0x06
     bba:	37 81       	ldd	r19, Z+7	; 0x07
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	fc 01       	movw	r30, r24
     bc2:	84 81       	ldd	r24, Z+4	; 0x04
     bc4:	95 81       	ldd	r25, Z+5	; 0x05
     bc6:	28 17       	cp	r18, r24
     bc8:	39 07       	cpc	r19, r25
     bca:	51 f4       	brne	.+20     	; 0xbe0 <cbuffUngetByte+0x98>
    {
        hCircBuffer->localFlag |= CBUFF_FULL;
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	fc 01       	movw	r30, r24
     bd2:	82 85       	ldd	r24, Z+10	; 0x0a
     bd4:	28 2f       	mov	r18, r24
     bd6:	20 68       	ori	r18, 0x80	; 128
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	fc 01       	movw	r30, r24
     bde:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not empty */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	fc 01       	movw	r30, r24
     be6:	82 85       	ldd	r24, Z+10	; 0x0a
     be8:	28 2f       	mov	r18, r24
     bea:	2f 7b       	andi	r18, 0xBF	; 191
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	fc 01       	movw	r30, r24
     bf2:	22 87       	std	Z+10, r18	; 0x0a
    return 0;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
}
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <cbuffPutArray>:
* -# This function will not allow the buffer to overflow
*******************************************************************************/
unsigned int  cbuffPutArray(HCBUFF               hCircBuffer,
                            const CBUFF        * data,
                            unsigned int         noOfBytes)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	28 97       	sbiw	r28, 0x08	; 8
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	8b 83       	std	Y+3, r24	; 0x03
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	6d 83       	std	Y+5, r22	; 0x05
     c14:	7e 83       	std	Y+6, r23	; 0x06
     c16:	4f 83       	std	Y+7, r20	; 0x07
     c18:	58 87       	std	Y+8, r21	; 0x08
    unsigned int bytesWritten = 0;
     c1a:	19 82       	std	Y+1, r1	; 0x01
     c1c:	1a 82       	std	Y+2, r1	; 0x02
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	fc 01       	movw	r30, r24
     c24:	82 85       	ldd	r24, Z+10	; 0x0a
     c26:	88 23       	and	r24, r24
     c28:	0c f0       	brlt	.+2      	; 0xc2c <cbuffPutArray+0x2c>
     c2a:	5b c0       	rjmp	.+182    	; 0xce2 <cbuffPutArray+0xe2>
    {
        return bytesWritten;
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	6e c0       	rjmp	.+220    	; 0xd0e <cbuffPutArray+0x10e>


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
    {
                                        /* Put data in buffer                 */
        *hCircBuffer->inPointer = *data;
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	fc 01       	movw	r30, r24
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	95 81       	ldd	r25, Z+5	; 0x05
     c3c:	2d 81       	ldd	r18, Y+5	; 0x05
     c3e:	3e 81       	ldd	r19, Y+6	; 0x06
     c40:	f9 01       	movw	r30, r18
     c42:	20 81       	ld	r18, Z
     c44:	fc 01       	movw	r30, r24
     c46:	20 83       	st	Z, r18

        hCircBuffer->inPointer++;       /* Increment pointer to circular      */
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	9c 81       	ldd	r25, Y+4	; 0x04
     c4c:	fc 01       	movw	r30, r24
     c4e:	84 81       	ldd	r24, Z+4	; 0x04
     c50:	95 81       	ldd	r25, Z+5	; 0x05
     c52:	9c 01       	movw	r18, r24
     c54:	2f 5f       	subi	r18, 0xFF	; 255
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	9c 81       	ldd	r25, Y+4	; 0x04
     c5c:	fc 01       	movw	r30, r24
     c5e:	24 83       	std	Z+4, r18	; 0x04
     c60:	35 83       	std	Z+5, r19	; 0x05
                                        /* buffer                             */

        data++;                         /* Increment pointer to array data    */
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	8d 83       	std	Y+5, r24	; 0x05
     c6a:	9e 83       	std	Y+6, r25	; 0x06

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
        if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	fc 01       	movw	r30, r24
     c72:	24 81       	ldd	r18, Z+4	; 0x04
     c74:	35 81       	ldd	r19, Z+5	; 0x05
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	fc 01       	movw	r30, r24
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	82 17       	cp	r24, r18
     c82:	93 07       	cpc	r25, r19
     c84:	50 f4       	brcc	.+20     	; 0xc9a <cbuffPutArray+0x9a>
        {
            hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	fc 01       	movw	r30, r24
     c8c:	20 81       	ld	r18, Z
     c8e:	31 81       	ldd	r19, Z+1	; 0x01
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	fc 01       	movw	r30, r24
     c96:	24 83       	std	Z+4, r18	; 0x04
     c98:	35 83       	std	Z+5, r19	; 0x05
        }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

        if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	fc 01       	movw	r30, r24
     ca0:	24 81       	ldd	r18, Z+4	; 0x04
     ca2:	35 81       	ldd	r19, Z+5	; 0x05
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	fc 01       	movw	r30, r24
     caa:	86 81       	ldd	r24, Z+6	; 0x06
     cac:	97 81       	ldd	r25, Z+7	; 0x07
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	51 f4       	brne	.+20     	; 0xcc8 <cbuffPutArray+0xc8>
        {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
            hCircBuffer->localFlag |= CBUFF_FULL;
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	fc 01       	movw	r30, r24
     cba:	82 85       	ldd	r24, Z+10	; 0x0a
     cbc:	28 2f       	mov	r18, r24
     cbe:	20 68       	ori	r18, 0x80	; 128
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	fc 01       	movw	r30, r24
     cc6:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how much data we've written   */
        bytesWritten++;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	9a 83       	std	Y+2, r25	; 0x02
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
     cd2:	29 81       	ldd	r18, Y+1	; 0x01
     cd4:	3a 81       	ldd	r19, Y+2	; 0x02
     cd6:	8f 81       	ldd	r24, Y+7	; 0x07
     cd8:	98 85       	ldd	r25, Y+8	; 0x08
     cda:	28 17       	cp	r18, r24
     cdc:	39 07       	cpc	r19, r25
     cde:	51 f0       	breq	.+20     	; 0xcf4 <cbuffPutArray+0xf4>
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <cbuffPutArray+0xe4>
    {
        return bytesWritten;
    }


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
     ce2:	00 00       	nop
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	fc 01       	movw	r30, r24
     cea:	82 85       	ldd	r24, Z+10	; 0x0a
     cec:	88 23       	and	r24, r24
     cee:	0c f0       	brlt	.+2      	; 0xcf2 <cbuffPutArray+0xf2>
     cf0:	a0 cf       	rjmp	.-192    	; 0xc32 <cbuffPutArray+0x32>
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <cbuffPutArray+0xf6>
        bytesWritten++;
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
        {
            break;
     cf4:	00 00       	nop
        }
    }
                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	fc 01       	movw	r30, r24
     cfc:	82 85       	ldd	r24, Z+10	; 0x0a
     cfe:	28 2f       	mov	r18, r24
     d00:	2f 7b       	andi	r18, 0xBF	; 191
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	fc 01       	movw	r30, r24
     d08:	22 87       	std	Z+10, r18	; 0x0a

    return bytesWritten;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d0e:	28 96       	adiw	r28, 0x08	; 8
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <cbuffGetArray>:
*    enough to accomodate noOfBytes of data
*******************************************************************************/
unsigned int  cbuffGetArray(HCBUFF               hCircBuffer,
                            CBUFF              * data,
                            unsigned int         noOfBytes)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	28 97       	sbiw	r28, 0x08	; 8
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
     d2a:	9c 83       	std	Y+4, r25	; 0x04
     d2c:	6d 83       	std	Y+5, r22	; 0x05
     d2e:	7e 83       	std	Y+6, r23	; 0x06
     d30:	4f 83       	std	Y+7, r20	; 0x07
     d32:	58 87       	std	Y+8, r21	; 0x08
    unsigned int bytesRead = 0;
     d34:	19 82       	std	Y+1, r1	; 0x01
     d36:	1a 82       	std	Y+2, r1	; 0x02
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	fc 01       	movw	r30, r24
     d3e:	82 85       	ldd	r24, Z+10	; 0x0a
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	80 74       	andi	r24, 0x40	; 64
     d46:	90 70       	andi	r25, 0x00	; 0
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	09 f4       	brne	.+2      	; 0xd4e <cbuffGetArray+0x34>
     d4c:	5b c0       	rjmp	.+182    	; 0xe04 <cbuffGetArray+0xea>
    {
        return bytesRead;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	72 c0       	rjmp	.+228    	; 0xe38 <cbuffGetArray+0x11e>
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
    {
                                        /* Read requested byte                */
        *data = *hCircBuffer->outPointer;
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	fc 01       	movw	r30, r24
     d5a:	86 81       	ldd	r24, Z+6	; 0x06
     d5c:	97 81       	ldd	r25, Z+7	; 0x07
     d5e:	fc 01       	movw	r30, r24
     d60:	20 81       	ld	r18, Z
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
        hCircBuffer->outPointer++;
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	fc 01       	movw	r30, r24
     d70:	86 81       	ldd	r24, Z+6	; 0x06
     d72:	97 81       	ldd	r25, Z+7	; 0x07
     d74:	9c 01       	movw	r18, r24
     d76:	2f 5f       	subi	r18, 0xFF	; 255
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9c 81       	ldd	r25, Y+4	; 0x04
     d7e:	fc 01       	movw	r30, r24
     d80:	26 83       	std	Z+6, r18	; 0x06
     d82:	37 83       	std	Z+7, r19	; 0x07
                                        /* Increment array data pointer       */
        data++;
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	9e 83       	std	Y+6, r25	; 0x06

                                        /* Implement wrap around              */
        if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	fc 01       	movw	r30, r24
     d94:	26 81       	ldd	r18, Z+6	; 0x06
     d96:	37 81       	ldd	r19, Z+7	; 0x07
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	fc 01       	movw	r30, r24
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	50 f4       	brcc	.+20     	; 0xdbc <cbuffGetArray+0xa2>
        {
            hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	fc 01       	movw	r30, r24
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	fc 01       	movw	r30, r24
     db8:	26 83       	std	Z+6, r18	; 0x06
     dba:	37 83       	std	Z+7, r19	; 0x07
        }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
        if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	fc 01       	movw	r30, r24
     dc2:	26 81       	ldd	r18, Z+6	; 0x06
     dc4:	37 81       	ldd	r19, Z+7	; 0x07
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	fc 01       	movw	r30, r24
     dcc:	84 81       	ldd	r24, Z+4	; 0x04
     dce:	95 81       	ldd	r25, Z+5	; 0x05
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	51 f4       	brne	.+20     	; 0xdea <cbuffGetArray+0xd0>
        {
                                        /* Note that the buffer is empty      */
            hCircBuffer->localFlag |= CBUFF_EMPTY;
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	9c 81       	ldd	r25, Y+4	; 0x04
     dda:	fc 01       	movw	r30, r24
     ddc:	82 85       	ldd	r24, Z+10	; 0x0a
     dde:	28 2f       	mov	r18, r24
     de0:	20 64       	ori	r18, 0x40	; 64
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	fc 01       	movw	r30, r24
     de8:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how many bytes we've read     */
        bytesRead++;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	9a 83       	std	Y+2, r25	; 0x02

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
     df4:	29 81       	ldd	r18, Y+1	; 0x01
     df6:	3a 81       	ldd	r19, Y+2	; 0x02
     df8:	8f 81       	ldd	r24, Y+7	; 0x07
     dfa:	98 85       	ldd	r25, Y+8	; 0x08
     dfc:	28 17       	cp	r18, r24
     dfe:	39 07       	cpc	r19, r25
     e00:	71 f0       	breq	.+28     	; 0xe1e <cbuffGetArray+0x104>
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <cbuffGetArray+0xec>
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
        return bytesRead;
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
     e04:	00 00       	nop
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	fc 01       	movw	r30, r24
     e0c:	82 85       	ldd	r24, Z+10	; 0x0a
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	80 74       	andi	r24, 0x40	; 64
     e14:	90 70       	andi	r25, 0x00	; 0
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	09 f4       	brne	.+2      	; 0xe1c <cbuffGetArray+0x102>
     e1a:	9c cf       	rjmp	.-200    	; 0xd54 <cbuffGetArray+0x3a>
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <cbuffGetArray+0x106>

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
        {
            break;
     e1e:	00 00       	nop
        }
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	fc 01       	movw	r30, r24
     e26:	82 85       	ldd	r24, Z+10	; 0x0a
     e28:	28 2f       	mov	r18, r24
     e2a:	2f 77       	andi	r18, 0x7F	; 127
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	fc 01       	movw	r30, r24
     e32:	22 87       	std	Z+10, r18	; 0x0a

    return bytesRead;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e38:	28 96       	adiw	r28, 0x08	; 8
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <main>:
#if	defined(__18CXX)
void main (void)
#else
int main(void)
#endif
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	66 97       	sbiw	r28, 0x16	; 22
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	de bf       	out	0x3e, r29	; 62
    CBUFF               writeData = 0;
     e52:	19 82       	std	Y+1, r1	; 0x01
    CBUFF               readData = 0;
     e54:	1e 8a       	std	Y+22, r1	; 0x16
    unsigned char       x;              /* used for 'for' loops               */
    unsigned char       y;
    unsigned int        spaceRemainingInBuffer = 0;
     e56:	1b 82       	std	Y+3, r1	; 0x03
     e58:	1c 82       	std	Y+4, r1	; 0x04
    unsigned int        dataInBuffer = 0;
     e5a:	1d 82       	std	Y+5, r1	; 0x05
     e5c:	1e 82       	std	Y+6, r1	; 0x06

#ifdef __i386__
    printf("Running test suite for CIRCULAR BUFFER MODULE\n");
#endif
                                        /* Initialise buffer module           */
    cbuffInit();
     e5e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <cbuffInit>

    /***************************************************************************
    * TEST 1 - Try to create some buffer objects without passing the correct
    *          parameters. Each attempt should fail
    ***************************************************************************/
    inBufferNum = cbuffCreate((CBUFF *) 0, INBUFFERSIZE, &inBufferObj);
     e62:	2c e7       	ldi	r18, 0x7C	; 124
     e64:	30 e2       	ldi	r19, 0x20	; 32
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	60 e4       	ldi	r22, 0x40	; 64
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	a9 01       	movw	r20, r18
     e70:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08

    outBufferNum = cbuffCreate(outBuffer, 0, &outBufferObj);
     e78:	84 e4       	ldi	r24, 0x44	; 68
     e7a:	90 e2       	ldi	r25, 0x20	; 32
     e7c:	29 e8       	ldi	r18, 0x89	; 137
     e7e:	30 e2       	ldi	r19, 0x20	; 32
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	a9 01       	movw	r20, r18
     e86:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     e8a:	89 87       	std	Y+9, r24	; 0x09
     e8c:	9a 87       	std	Y+10, r25	; 0x0a

    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     e8e:	84 e6       	ldi	r24, 0x64	; 100
     e90:	90 e2       	ldi	r25, 0x20	; 32
     e92:	68 e0       	ldi	r22, 0x08	; 8
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     e9e:	8b 87       	std	Y+11, r24	; 0x0b
     ea0:	9c 87       	std	Y+12, r25	; 0x0c
    								 (CBUFFOBJ *) 0);

    if (inBufferNum != 0)
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	98 85       	ldd	r25, Y+8	; 0x08
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	09 f0       	breq	.+2      	; 0xeac <main+0x68>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     eaa:	ff cf       	rjmp	.-2      	; 0xeaa <main+0x66>
#endif
    }
    if (outBufferNum != 0)
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <main+0x72>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     eb4:	ff cf       	rjmp	.-2      	; 0xeb4 <main+0x70>
#endif
    }
    if (testBuffer1Num != 0)
     eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	09 f0       	breq	.+2      	; 0xec0 <main+0x7c>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     ebe:	ff cf       	rjmp	.-2      	; 0xebe <main+0x7a>
    }

    /***************************************************************************
    * TEST 1a - Try to destroy buffers when none exist - should fail
    ***************************************************************************/
    x = 0x0001;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8a 83       	std	Y+2, r24	; 0x02
    
    do
    {
        y = cbuffDestroy(x);
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 47 02 	call	0x48e	; 0x48e <cbuffDestroy>
     ece:	8d 87       	std	Y+13, r24	; 0x0d
    
        if (y != CBUFF_DESTROY_FAIL)
     ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed2:	88 23       	and	r24, r24
     ed4:	09 f0       	breq	.+2      	; 0xed8 <main+0x94>
        {
            /* Managed to destroy buffer although none exist */
#ifdef __i386__
            assert(0);
#else
            while(1);
     ed6:	ff cf       	rjmp	.-2      	; 0xed6 <main+0x92>
#endif
        }
        
        /* Shift value to test next potential buffer */
        x <<= 1;
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	88 0f       	add	r24, r24
     edc:	8a 83       	std	Y+2, r24	; 0x02
        /* Mask to ensure that value doesn't get bigger than 0x8000 */
        x &= 0xFFFF;
    } while (x != 0x0000);
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	88 23       	and	r24, r24
     ee2:	81 f7       	brne	.-32     	; 0xec4 <main+0x80>
    *           after 16 buffers have been created. Each buffer is created 
    *           with the same paramters. This would result in working code! It 
    *           is done only for test purposes.
    ***************************************************************************/
    
    for (x = 0; x < 16; x++)
     ee4:	1a 82       	std	Y+2, r1	; 0x02
     ee6:	13 c0       	rjmp	.+38     	; 0xf0e <main+0xca>
    {
        testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE, 
     ee8:	8c e6       	ldi	r24, 0x6C	; 108
     eea:	90 e2       	ldi	r25, 0x20	; 32
     eec:	23 ea       	ldi	r18, 0xA3	; 163
     eee:	30 e2       	ldi	r19, 0x20	; 32
     ef0:	60 e1       	ldi	r22, 0x10	; 16
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	a9 01       	movw	r20, r18
     ef6:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     efa:	8e 87       	std	Y+14, r24	; 0x0e
     efc:	9f 87       	std	Y+15, r25	; 0x0f
                                        &testBuffer2Obj);
        if (testBuffer2Num == 0)
     efe:	8e 85       	ldd	r24, Y+14	; 0x0e
     f00:	9f 85       	ldd	r25, Y+15	; 0x0f
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	09 f4       	brne	.+2      	; 0xf08 <main+0xc4>
        {
            /* Couldn't create a buffer with valid parameters */
#ifdef __i386__
            assert(0);
#else
            while(1);
     f06:	ff cf       	rjmp	.-2      	; 0xf06 <main+0xc2>
    *           after 16 buffers have been created. Each buffer is created 
    *           with the same paramters. This would result in working code! It 
    *           is done only for test purposes.
    ***************************************************************************/
    
    for (x = 0; x < 16; x++)
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	8a 83       	std	Y+2, r24	; 0x02
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	80 31       	cpi	r24, 0x10	; 16
     f12:	50 f3       	brcs	.-44     	; 0xee8 <main+0xa4>
#endif
        }
    }
    
    /* Now try to create a 17th buffer - should fail */
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE, 
     f14:	84 e6       	ldi	r24, 0x64	; 100
     f16:	90 e2       	ldi	r25, 0x20	; 32
     f18:	26 e9       	ldi	r18, 0x96	; 150
     f1a:	30 e2       	ldi	r19, 0x20	; 32
     f1c:	68 e0       	ldi	r22, 0x08	; 8
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	a9 01       	movw	r20, r18
     f22:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     f26:	8b 87       	std	Y+11, r24	; 0x0b
     f28:	9c 87       	std	Y+12, r25	; 0x0c
                                        &testBuffer1Obj);
    if (testBuffer1Num != 0)
     f2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	09 f0       	breq	.+2      	; 0xf34 <main+0xf0>
    {
    /* Managed to create a buffer although no space exists in linked list */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f32:	ff cf       	rjmp	.-2      	; 0xf32 <main+0xee>
#endif
    }
    
    /* Deinitialise buffer module now and then reinit - best way to start */
    /* a clean state for the following tests                              */
    cbuffDeinit();
     f34:	0e 94 09 01 	call	0x212	; 0x212 <cbuffDeinit>
    cbuffInit();
     f38:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <cbuffInit>
    
    /***************************************************************************
    * TEST 2 - Create some buffer objects
    ***************************************************************************/

    inBufferNum = cbuffCreate(inBuffer, INBUFFERSIZE, &inBufferObj);
     f3c:	84 e0       	ldi	r24, 0x04	; 4
     f3e:	90 e2       	ldi	r25, 0x20	; 32
     f40:	2c e7       	ldi	r18, 0x7C	; 124
     f42:	30 e2       	ldi	r19, 0x20	; 32
     f44:	60 e4       	ldi	r22, 0x40	; 64
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	a9 01       	movw	r20, r18
     f4a:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     f4e:	8f 83       	std	Y+7, r24	; 0x07
     f50:	98 87       	std	Y+8, r25	; 0x08
    outBufferNum = cbuffCreate(outBuffer, OUTBUFFERSIZE, &outBufferObj);
     f52:	84 e4       	ldi	r24, 0x44	; 68
     f54:	90 e2       	ldi	r25, 0x20	; 32
     f56:	29 e8       	ldi	r18, 0x89	; 137
     f58:	30 e2       	ldi	r19, 0x20	; 32
     f5a:	60 e2       	ldi	r22, 0x20	; 32
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	a9 01       	movw	r20, r18
     f60:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     f64:	89 87       	std	Y+9, r24	; 0x09
     f66:	9a 87       	std	Y+10, r25	; 0x0a
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     f68:	84 e6       	ldi	r24, 0x64	; 100
     f6a:	90 e2       	ldi	r25, 0x20	; 32
     f6c:	26 e9       	ldi	r18, 0x96	; 150
     f6e:	30 e2       	ldi	r19, 0x20	; 32
     f70:	68 e0       	ldi	r22, 0x08	; 8
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	a9 01       	movw	r20, r18
     f76:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     f7a:	8b 87       	std	Y+11, r24	; 0x0b
     f7c:	9c 87       	std	Y+12, r25	; 0x0c
    								 &testBuffer1Obj);
    testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE,
     f7e:	8c e6       	ldi	r24, 0x6C	; 108
     f80:	90 e2       	ldi	r25, 0x20	; 32
     f82:	23 ea       	ldi	r18, 0xA3	; 163
     f84:	30 e2       	ldi	r19, 0x20	; 32
     f86:	60 e1       	ldi	r22, 0x10	; 16
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
     f90:	8e 87       	std	Y+14, r24	; 0x0e
     f92:	9f 87       	std	Y+15, r25	; 0x0f
                                        /* number we got. The buffer number   */
                                        /* is not so important, but it checks */
                                        /* that the algorithm assigned        */
                                        /* consecutive numbers. If it didn't  */
                                        /* there might be a bug.              */
    if (inBufferNum != 0x0001)
     f94:	8f 81       	ldd	r24, Y+7	; 0x07
     f96:	98 85       	ldd	r25, Y+8	; 0x08
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <main+0x15c>
    {
        /* If inBufferNum isn't 0x0001, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f9e:	ff cf       	rjmp	.-2      	; 0xf9e <main+0x15a>
#endif
    }
    if (outBufferNum != 0x0002)
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f0       	breq	.+2      	; 0xfac <main+0x168>
    {
        /* If outBufferNum isn't 0x0002, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     faa:	ff cf       	rjmp	.-2      	; 0xfaa <main+0x166>
#endif
    }
    if (testBuffer1Num != 0x0004)
     fac:	8b 85       	ldd	r24, Y+11	; 0x0b
     fae:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	91 05       	cpc	r25, r1
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <main+0x174>
    {
        /* If testBuffer1Num isn't 0x0004, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fb6:	ff cf       	rjmp	.-2      	; 0xfb6 <main+0x172>
#endif
    }
    if (testBuffer2Num != 0x0008)
     fb8:	8e 85       	ldd	r24, Y+14	; 0x0e
     fba:	9f 85       	ldd	r25, Y+15	; 0x0f
     fbc:	88 30       	cpi	r24, 0x08	; 8
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <main+0x180>
    {
        /* If testBuffer2Num isn't 0x0008, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fc2:	ff cf       	rjmp	.-2      	; 0xfc2 <main+0x17e>

    /***************************************************************************
    * TEST 3 - Try to destroy some buffer objects that don't exist
    ***************************************************************************/

    x = cbuffDestroy(0x8000);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e8       	ldi	r25, 0x80	; 128
     fc8:	0e 94 47 02 	call	0x48e	; 0x48e <cbuffDestroy>
     fcc:	8a 83       	std	Y+2, r24	; 0x02

    if (x == CBUFF_DESTROY_OK)
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <main+0x192>
    {
        /* Destroyed a buffer that was not allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fd4:	ff cf       	rjmp	.-2      	; 0xfd4 <main+0x190>
#endif
    }

    x = cbuffDestroy(0x0400);
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	94 e0       	ldi	r25, 0x04	; 4
     fda:	0e 94 47 02 	call	0x48e	; 0x48e <cbuffDestroy>
     fde:	8a 83       	std	Y+2, r24	; 0x02

    if (x == CBUFF_DESTROY_OK)
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <main+0x1a4>
    {
        /* Destroyed a buffer that was not allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fe6:	ff cf       	rjmp	.-2      	; 0xfe6 <main+0x1a2>

    /***************************************************************************
    * TEST 4 - Destroy the two testBufferObjs
    ***************************************************************************/

    x = cbuffDestroy(testBuffer1Num);
     fe8:	8b 85       	ldd	r24, Y+11	; 0x0b
     fea:	9c 85       	ldd	r25, Y+12	; 0x0c
     fec:	0e 94 47 02 	call	0x48e	; 0x48e <cbuffDestroy>
     ff0:	8a 83       	std	Y+2, r24	; 0x02

    if (x != CBUFF_DESTROY_OK)
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f0       	breq	.+2      	; 0xffa <main+0x1b6>
    {
        /* Failed to destroy a buffer that was allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     ff8:	ff cf       	rjmp	.-2      	; 0xff8 <main+0x1b4>
#endif
    }

    x = cbuffDestroy(testBuffer2Num);
     ffa:	8e 85       	ldd	r24, Y+14	; 0x0e
     ffc:	9f 85       	ldd	r25, Y+15	; 0x0f
     ffe:	0e 94 47 02 	call	0x48e	; 0x48e <cbuffDestroy>
    1002:	8a 83       	std	Y+2, r24	; 0x02

    if (x != CBUFF_DESTROY_OK)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	09 f0       	breq	.+2      	; 0x100c <main+0x1c8>
    {
        /* Failed to destroy a buffer that was allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    100a:	ff cf       	rjmp	.-2      	; 0x100a <main+0x1c6>

    /***************************************************************************
    * TEST 5 - Create the two testBufferObjs again but in reverse order
    *          to test 2 - should assign buffer numbers in reverse order
    ***************************************************************************/
    testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE,
    100c:	8c e6       	ldi	r24, 0x6C	; 108
    100e:	90 e2       	ldi	r25, 0x20	; 32
    1010:	23 ea       	ldi	r18, 0xA3	; 163
    1012:	30 e2       	ldi	r19, 0x20	; 32
    1014:	60 e1       	ldi	r22, 0x10	; 16
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	a9 01       	movw	r20, r18
    101a:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
    101e:	8e 87       	std	Y+14, r24	; 0x0e
    1020:	9f 87       	std	Y+15, r25	; 0x0f
    								 &testBuffer2Obj);
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
    1022:	84 e6       	ldi	r24, 0x64	; 100
    1024:	90 e2       	ldi	r25, 0x20	; 32
    1026:	26 e9       	ldi	r18, 0x96	; 150
    1028:	30 e2       	ldi	r19, 0x20	; 32
    102a:	68 e0       	ldi	r22, 0x08	; 8
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	0e 94 18 01 	call	0x230	; 0x230 <cbuffCreate>
    1034:	8b 87       	std	Y+11, r24	; 0x0b
    1036:	9c 87       	std	Y+12, r25	; 0x0c
    								 &testBuffer1Obj);

    if (testBuffer1Num != 0x0008)
    1038:	8b 85       	ldd	r24, Y+11	; 0x0b
    103a:	9c 85       	ldd	r25, Y+12	; 0x0c
    103c:	88 30       	cpi	r24, 0x08	; 8
    103e:	91 05       	cpc	r25, r1
    1040:	09 f0       	breq	.+2      	; 0x1044 <main+0x200>
    {
        /* If testBuffer1Num isn't 0x0008, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1042:	ff cf       	rjmp	.-2      	; 0x1042 <main+0x1fe>
#endif
    }
    if (testBuffer2Num != 0x0004)
    1044:	8e 85       	ldd	r24, Y+14	; 0x0e
    1046:	9f 85       	ldd	r25, Y+15	; 0x0f
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	91 05       	cpc	r25, r1
    104c:	09 f0       	breq	.+2      	; 0x1050 <main+0x20c>
    {
        /* If testBuffer2Num isn't 0x0004, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
    104e:	ff cf       	rjmp	.-2      	; 0x104e <main+0x20a>
    }

    /***************************************************************************
    * TEST 6 - Ensure we can't get handle to buffers that doesn't exist
    ***************************************************************************/
    hInBuffer = cbuffOpen(0x8000);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e8       	ldi	r25, 0x80	; 128
    1054:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    1058:	88 8b       	std	Y+16, r24	; 0x10
    105a:	99 8b       	std	Y+17, r25	; 0x11

    if (hInBuffer != (CBUFFOBJ *) 0)
    105c:	88 89       	ldd	r24, Y+16	; 0x10
    105e:	99 89       	ldd	r25, Y+17	; 0x11
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	09 f0       	breq	.+2      	; 0x1066 <main+0x222>
    {
        /* Managed to get a pointer to a buffer object that doesn't exist */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1064:	ff cf       	rjmp	.-2      	; 0x1064 <main+0x220>
#endif
    }

    hInBuffer = cbuffOpen(0x0400);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	94 e0       	ldi	r25, 0x04	; 4
    106a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    106e:	88 8b       	std	Y+16, r24	; 0x10
    1070:	99 8b       	std	Y+17, r25	; 0x11

    if (hInBuffer != (CBUFFOBJ *) 0)
    1072:	88 89       	ldd	r24, Y+16	; 0x10
    1074:	99 89       	ldd	r25, Y+17	; 0x11
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	09 f0       	breq	.+2      	; 0x107c <main+0x238>
    {
        /* Managed to get a pointer to a buffer object that doesn't exist */
#ifdef __i386__
        assert(0);
#else
        while(1);
    107a:	ff cf       	rjmp	.-2      	; 0x107a <main+0x236>
    }

    /***************************************************************************
    * TEST 7 - Ensure we can get handle to properly created buffers
    ***************************************************************************/
    hInBuffer = cbuffOpen(inBufferNum);
    107c:	8f 81       	ldd	r24, Y+7	; 0x07
    107e:	98 85       	ldd	r25, Y+8	; 0x08
    1080:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    1084:	88 8b       	std	Y+16, r24	; 0x10
    1086:	99 8b       	std	Y+17, r25	; 0x11

    hOutBuffer = cbuffOpen(outBufferNum);
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    1090:	8a 8b       	std	Y+18, r24	; 0x12
    1092:	9b 8b       	std	Y+19, r25	; 0x13

    if (hInBuffer == (CBUFFOBJ *) 0)
    1094:	88 89       	ldd	r24, Y+16	; 0x10
    1096:	99 89       	ldd	r25, Y+17	; 0x11
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	09 f4       	brne	.+2      	; 0x109e <main+0x25a>
    {
        /* Failed to get handle to valid, available buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    109c:	ff cf       	rjmp	.-2      	; 0x109c <main+0x258>
#endif
    }
    if (hOutBuffer == (CBUFFOBJ *) 0)
    109e:	8a 89       	ldd	r24, Y+18	; 0x12
    10a0:	9b 89       	ldd	r25, Y+19	; 0x13
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <main+0x264>
    {
        /* Failed to get handle to valid, available buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10a6:	ff cf       	rjmp	.-2      	; 0x10a6 <main+0x262>
    }

    /***************************************************************************
    * TEST 8 - Try to obtain handle to open buffers - should fail
    ***************************************************************************/
    hDummyHandle = cbuffOpen(inBufferNum);
    10a8:	8f 81       	ldd	r24, Y+7	; 0x07
    10aa:	98 85       	ldd	r25, Y+8	; 0x08
    10ac:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    10b0:	8c 8b       	std	Y+20, r24	; 0x14
    10b2:	9d 8b       	std	Y+21, r25	; 0x15

    if (hDummyHandle != (CBUFFOBJ *) 0)
    10b4:	8c 89       	ldd	r24, Y+20	; 0x14
    10b6:	9d 89       	ldd	r25, Y+21	; 0x15
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <main+0x27a>
    {
        /* Managed to get handle to a buffer that is already open */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10bc:	ff cf       	rjmp	.-2      	; 0x10bc <main+0x278>
#endif
    }

    hDummyHandle = cbuffOpen(outBufferNum);
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    10c6:	8c 8b       	std	Y+20, r24	; 0x14
    10c8:	9d 8b       	std	Y+21, r25	; 0x15

    if (hDummyHandle != (CBUFFOBJ *) 0)
    10ca:	8c 89       	ldd	r24, Y+20	; 0x14
    10cc:	9d 89       	ldd	r25, Y+21	; 0x15
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <main+0x290>
    {
        /* Managed to get handle to a buffer that is already open */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10d2:	ff cf       	rjmp	.-2      	; 0x10d2 <main+0x28e>

    /***************************************************************************
    * TEST 9 - Try to release handles to open buffers
    ***************************************************************************/

    inBufferNum = cbuffClose(hInBuffer);
    10d4:	88 89       	ldd	r24, Y+16	; 0x10
    10d6:	99 89       	ldd	r25, Y+17	; 0x11
    10d8:	0e 94 17 03 	call	0x62e	; 0x62e <cbuffClose>
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08

    outBufferNum = cbuffClose(hOutBuffer);
    10e0:	8a 89       	ldd	r24, Y+18	; 0x12
    10e2:	9b 89       	ldd	r25, Y+19	; 0x13
    10e4:	0e 94 17 03 	call	0x62e	; 0x62e <cbuffClose>
    10e8:	89 87       	std	Y+9, r24	; 0x09
    10ea:	9a 87       	std	Y+10, r25	; 0x0a

    if (inBufferNum != 0x0001)
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <main+0x2b4>
    {
        /* Failed to close buffer object */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10f6:	ff cf       	rjmp	.-2      	; 0x10f6 <main+0x2b2>
#endif
    }
    if (outBufferNum != 0x0002)
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f0       	breq	.+2      	; 0x1104 <main+0x2c0>
    {
        /* Failed to close buffer object */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1102:	ff cf       	rjmp	.-2      	; 0x1102 <main+0x2be>

    /***************************************************************************
    * TEST 10 - Try to release handles to buffer which is not open
    ***************************************************************************/

    testBuffer1Num = cbuffClose(hOutBuffer);
    1104:	8a 89       	ldd	r24, Y+18	; 0x12
    1106:	9b 89       	ldd	r25, Y+19	; 0x13
    1108:	0e 94 17 03 	call	0x62e	; 0x62e <cbuffClose>
    110c:	8b 87       	std	Y+11, r24	; 0x0b
    110e:	9c 87       	std	Y+12, r25	; 0x0c

    if (testBuffer1Num != 0)
    1110:	8b 85       	ldd	r24, Y+11	; 0x0b
    1112:	9c 85       	ldd	r25, Y+12	; 0x0c
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	09 f0       	breq	.+2      	; 0x111a <main+0x2d6>
    {
        /* Managed to release a buffer object that was already released */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <main+0x2d4>

    /***************************************************************************
    * Open two main buffers for further tests
    ***************************************************************************/

    hInBuffer = cbuffOpen(inBufferNum);
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
    111c:	98 85       	ldd	r25, Y+8	; 0x08
    111e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    1122:	88 8b       	std	Y+16, r24	; 0x10
    1124:	99 8b       	std	Y+17, r25	; 0x11

    hOutBuffer = cbuffOpen(outBufferNum);
    1126:	89 85       	ldd	r24, Y+9	; 0x09
    1128:	9a 85       	ldd	r25, Y+10	; 0x0a
    112a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <cbuffOpen>
    112e:	8a 8b       	std	Y+18, r24	; 0x12
    1130:	9b 8b       	std	Y+19, r25	; 0x13


    /***************************************************************************
    * TEST 11 - Check sizes of both buffers are correctly calculated
    ***************************************************************************/
    spaceRemainingInBuffer = cbuffGetSpace(hInBuffer);
    1132:	88 89       	ldd	r24, Y+16	; 0x10
    1134:	99 89       	ldd	r25, Y+17	; 0x11
    1136:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    113a:	8b 83       	std	Y+3, r24	; 0x03
    113c:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != INBUFFERSIZE)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	80 34       	cpi	r24, 0x40	; 64
    1144:	91 05       	cpc	r25, r1
    1146:	09 f0       	breq	.+2      	; 0x114a <main+0x306>
    {
        /* ERROR - We have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1148:	ff cf       	rjmp	.-2      	; 0x1148 <main+0x304>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    114a:	8a 89       	ldd	r24, Y+18	; 0x12
    114c:	9b 89       	ldd	r25, Y+19	; 0x13
    114e:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	80 32       	cpi	r24, 0x20	; 32
    115c:	91 05       	cpc	r25, r1
    115e:	09 f0       	breq	.+2      	; 0x1162 <main+0x31e>
    {
        /* ERROR - We have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1160:	ff cf       	rjmp	.-2      	; 0x1160 <main+0x31c>
#endif
    }

    dataInBuffer = cbuffGetFill(hInBuffer);
    1162:	88 89       	ldd	r24, Y+16	; 0x10
    1164:	99 89       	ldd	r25, Y+17	; 0x11
    1166:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 0)
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	09 f0       	breq	.+2      	; 0x1178 <main+0x334>
    {
        /* ERROR - we have incorrect fill value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1176:	ff cf       	rjmp	.-2      	; 0x1176 <main+0x332>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    1178:	8a 89       	ldd	r24, Y+18	; 0x12
    117a:	9b 89       	ldd	r25, Y+19	; 0x13
    117c:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 0)
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	09 f0       	breq	.+2      	; 0x118e <main+0x34a>
    {
        /* ERROR - we have incorrect fill value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    118c:	ff cf       	rjmp	.-2      	; 0x118c <main+0x348>
    }

    /***************************************************************************
    * TEST 12 - Fill buffers - ensure we can't overrun using cbuffPutByte
    ***************************************************************************/
    writeData = 'A';
    118e:	81 e4       	ldi	r24, 0x41	; 65
    1190:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    1192:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer until cbuffPutByte tells us we can't write any more */
    while (x < 0xFF)
    1194:	0d c0       	rjmp	.+26     	; 0x11b0 <main+0x36c>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    1196:	8a 89       	ldd	r24, Y+18	; 0x12
    1198:	9b 89       	ldd	r25, Y+19	; 0x13
    119a:	69 81       	ldd	r22, Y+1	; 0x01
    119c:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	51 f4       	brne	.+20     	; 0x11b8 <main+0x374>
        {
            writeData++;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	89 83       	std	Y+1, r24	; 0x01
            x++;
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    * TEST 12 - Fill buffers - ensure we can't overrun using cbuffPutByte
    ***************************************************************************/
    writeData = 'A';
    x = 0;
    /* Fill buffer until cbuffPutByte tells us we can't write any more */
    while (x < 0xFF)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	8f 3f       	cpi	r24, 0xFF	; 255
    11b4:	81 f7       	brne	.-32     	; 0x1196 <main+0x352>
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <main+0x376>
            writeData++;
            x++;
        }
        else
        {
            break;
    11b8:	00 00       	nop
        }
    }
    if (x == 0xFF)
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	8f 3f       	cpi	r24, 0xFF	; 255
    11be:	09 f4       	brne	.+2      	; 0x11c2 <main+0x37e>
    {
        /* ERROR - Buffer overrun not detected */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11c0:	ff cf       	rjmp	.-2      	; 0x11c0 <main+0x37c>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    11c2:	8a 89       	ldd	r24, Y+18	; 0x12
    11c4:	9b 89       	ldd	r25, Y+19	; 0x13
    11c6:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    11ca:	8b 83       	std	Y+3, r24	; 0x03
    11cc:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != 0)
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <main+0x394>
    {
        /* ERROR - Space remaining should be 0 */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11d6:	ff cf       	rjmp	.-2      	; 0x11d6 <main+0x392>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    11d8:	8a 89       	ldd	r24, Y+18	; 0x12
    11da:	9b 89       	ldd	r25, Y+19	; 0x13
    11dc:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != OUTBUFFERSIZE)
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	80 32       	cpi	r24, 0x20	; 32
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <main+0x3ac>
    {
        /* ERROR - Buffer should be full */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11ee:	ff cf       	rjmp	.-2      	; 0x11ee <main+0x3aa>

    /***************************************************************************
    * TEST 13 - Read buffers - ensure we can't underrun using cbuffGetByte and
    *           check contents was stored correctly
    ***************************************************************************/
    readData = '\0';
    11f0:	1e 8a       	std	Y+22, r1	; 0x16
    writeData = 'A';
    11f2:	81 e4       	ldi	r24, 0x41	; 65
    11f4:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    11f6:	1a 82       	std	Y+2, r1	; 0x02
    /* Read buffer until cbuffGetByte tells us we can't read any more */
    while (x < 0xFF)
    11f8:	15 c0       	rjmp	.+42     	; 0x1224 <main+0x3e0>
    {
        if ((cbuffGetByte(hOutBuffer, &readData)) == CBUFF_GET_OK)
    11fa:	8a 89       	ldd	r24, Y+18	; 0x12
    11fc:	9b 89       	ldd	r25, Y+19	; 0x13
    11fe:	9e 01       	movw	r18, r28
    1200:	2a 5e       	subi	r18, 0xEA	; 234
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	b9 01       	movw	r22, r18
    1206:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	79 f4       	brne	.+30     	; 0x122c <main+0x3e8>
        {
            if (readData != writeData)
    120e:	9e 89       	ldd	r25, Y+22	; 0x16
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	98 17       	cp	r25, r24
    1214:	09 f0       	breq	.+2      	; 0x1218 <main+0x3d4>
            {
                /* ERROR - data read was incorrect */
#ifdef __i386__
                assert(0);
#else
                while(1);
    1216:	ff cf       	rjmp	.-2      	; 0x1216 <main+0x3d2>
#endif
            }
            else
            {
                writeData++;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	8f 5f       	subi	r24, 0xFF	; 255
    121c:	89 83       	std	Y+1, r24	; 0x01
                x++;
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	8f 5f       	subi	r24, 0xFF	; 255
    1222:	8a 83       	std	Y+2, r24	; 0x02
    ***************************************************************************/
    readData = '\0';
    writeData = 'A';
    x = 0;
    /* Read buffer until cbuffGetByte tells us we can't read any more */
    while (x < 0xFF)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	8f 3f       	cpi	r24, 0xFF	; 255
    1228:	41 f7       	brne	.-48     	; 0x11fa <main+0x3b6>
    122a:	01 c0       	rjmp	.+2      	; 0x122e <main+0x3ea>
                x++;
            }
        }
        else
        {
            break;
    122c:	00 00       	nop
        }
    }
    if (x == 0xFF)
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	8f 3f       	cpi	r24, 0xFF	; 255
    1232:	09 f4       	brne	.+2      	; 0x1236 <main+0x3f2>
    {
        /* ERROR - Buffer underrun not detected */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1234:	ff cf       	rjmp	.-2      	; 0x1234 <main+0x3f0>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1236:	8a 89       	ldd	r24, Y+18	; 0x12
    1238:	9b 89       	ldd	r25, Y+19	; 0x13
    123a:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	80 32       	cpi	r24, 0x20	; 32
    1248:	91 05       	cpc	r25, r1
    124a:	09 f0       	breq	.+2      	; 0x124e <main+0x40a>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    124c:	ff cf       	rjmp	.-2      	; 0x124c <main+0x408>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    124e:	8a 89       	ldd	r24, Y+18	; 0x12
    1250:	9b 89       	ldd	r25, Y+19	; 0x13
    1252:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    1256:	8d 83       	std	Y+5, r24	; 0x05
    1258:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 0)
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	09 f0       	breq	.+2      	; 0x1264 <main+0x420>
    {
        /* ERROR - Buffer should be empty */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1262:	ff cf       	rjmp	.-2      	; 0x1262 <main+0x41e>
    /***************************************************************************
    * TEST 14 - Check buffer sizes calculate correctly when there is some data
    *           in the buffer, and also when for head-before-tail and tail-
    *           before-head situations
    ***************************************************************************/
    writeData = 'a';
    1264:	81 e6       	ldi	r24, 0x61	; 97
    1266:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    1268:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    126a:	0f c0       	rjmp	.+30     	; 0x128a <main+0x446>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    126c:	8a 89       	ldd	r24, Y+18	; 0x12
    126e:	9b 89       	ldd	r25, Y+19	; 0x13
    1270:	69 81       	ldd	r22, Y+1	; 0x01
    1272:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	39 f4       	brne	.+14     	; 0x1288 <main+0x444>
        {
            writeData++;
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	89 83       	std	Y+1, r24	; 0x01
            x++;
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	01 c0       	rjmp	.+2      	; 0x128a <main+0x446>
        {
            /* ERROR - cbuffPutByte failed unexpectedly */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1288:	ff cf       	rjmp	.-2      	; 0x1288 <main+0x444>
    *           before-head situations
    ***************************************************************************/
    writeData = 'a';
    x = 0;
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	86 31       	cpi	r24, 0x16	; 22
    128e:	70 f3       	brcs	.-36     	; 0x126c <main+0x428>
#endif
        }
    }

    /* Check sizes are correctly calculated */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1290:	8a 89       	ldd	r24, Y+18	; 0x12
    1292:	9b 89       	ldd	r25, Y+19	; 0x13
    1294:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != 10 )
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	8a 30       	cpi	r24, 0x0A	; 10
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <main+0x464>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12a6:	ff cf       	rjmp	.-2      	; 0x12a6 <main+0x462>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    12a8:	8a 89       	ldd	r24, Y+18	; 0x12
    12aa:	9b 89       	ldd	r25, Y+19	; 0x13
    12ac:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != (OUTBUFFERSIZE - 10))
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	86 31       	cpi	r24, 0x16	; 22
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <main+0x47c>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12be:	ff cf       	rjmp	.-2      	; 0x12be <main+0x47a>
#endif
    }

    /* Read out buffer contents*/
    while(cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    12c0:	00 00       	nop
    12c2:	8a 89       	ldd	r24, Y+18	; 0x12
    12c4:	9b 89       	ldd	r25, Y+19	; 0x13
    12c6:	9e 01       	movw	r18, r28
    12c8:	2a 5e       	subi	r18, 0xEA	; 234
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	b9 01       	movw	r22, r18
    12ce:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	b1 f3       	breq	.-20     	; 0x12c2 <main+0x47e>
    /* Add some data to buffer so that inPointer buffer wrap occurs */
    writeData = 'A';
    12d6:	81 e4       	ldi	r24, 0x41	; 65
    12d8:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    12da:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <main+0x4b8>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    12de:	8a 89       	ldd	r24, Y+18	; 0x12
    12e0:	9b 89       	ldd	r25, Y+19	; 0x13
    12e2:	69 81       	ldd	r22, Y+1	; 0x01
    12e4:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	39 f4       	brne	.+14     	; 0x12fa <main+0x4b6>
        {
            writeData++;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	8f 5f       	subi	r24, 0xFF	; 255
    12f0:	89 83       	std	Y+1, r24	; 0x01
            x++;
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <main+0x4b8>
        {
            /* ERROR - cbuffPutByte failed unexpectedly */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12fa:	ff cf       	rjmp	.-2      	; 0x12fa <main+0x4b6>
    while(cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    /* Add some data to buffer so that inPointer buffer wrap occurs */
    writeData = 'A';
    x = 0;
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	86 31       	cpi	r24, 0x16	; 22
    1300:	70 f3       	brcs	.-36     	; 0x12de <main+0x49a>
#endif
        }
    }

    /* Check sizes are correctly calculated */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1302:	8a 89       	ldd	r24, Y+18	; 0x12
    1304:	9b 89       	ldd	r25, Y+19	; 0x13
    1306:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != 10 )
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	8a 30       	cpi	r24, 0x0A	; 10
    1314:	91 05       	cpc	r25, r1
    1316:	09 f0       	breq	.+2      	; 0x131a <main+0x4d6>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1318:	ff cf       	rjmp	.-2      	; 0x1318 <main+0x4d4>
#endif
    }
    dataInBuffer = cbuffGetFill(hOutBuffer);
    131a:	8a 89       	ldd	r24, Y+18	; 0x12
    131c:	9b 89       	ldd	r25, Y+19	; 0x13
    131e:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != (OUTBUFFERSIZE - 10))
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	86 31       	cpi	r24, 0x16	; 22
    132c:	91 05       	cpc	r25, r1
    132e:	09 f0       	breq	.+2      	; 0x1332 <main+0x4ee>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1330:	ff cf       	rjmp	.-2      	; 0x1330 <main+0x4ec>
    /***************************************************************************
    * TEST 15 - Clear this buffer and ensure that function calls return that
    *           buffer is empty
    ***************************************************************************/
    /* Clear this buffer to start new tests */
    cbuffClearBuffer(hOutBuffer);
    1332:	8a 89       	ldd	r24, Y+18	; 0x12
    1334:	9b 89       	ldd	r25, Y+19	; 0x13
    1336:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>

    /* Check buffer is empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    133a:	8a 89       	ldd	r24, Y+18	; 0x12
    133c:	9b 89       	ldd	r25, Y+19	; 0x13
    133e:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    1342:	8b 83       	std	Y+3, r24	; 0x03
    1344:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	80 32       	cpi	r24, 0x20	; 32
    134c:	91 05       	cpc	r25, r1
    134e:	09 f0       	breq	.+2      	; 0x1352 <main+0x50e>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <main+0x50c>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    1352:	8a 89       	ldd	r24, Y+18	; 0x12
    1354:	9b 89       	ldd	r25, Y+19	; 0x13
    1356:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 0)
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	09 f0       	breq	.+2      	; 0x1368 <main+0x524>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1366:	ff cf       	rjmp	.-2      	; 0x1366 <main+0x522>
    * TEST 16 - Check cbuffPeekHead and cbuffPeekTail don't read anything from
    *           an empty buffer
    * NOTE: This test relies upon the status of the previous test, i.e. that the
    *       buffers used are empty!
    ***************************************************************************/
    if ((cbuffPeekHead(hOutBuffer, &readData)) == CBUFF_GET_OK)
    1368:	8a 89       	ldd	r24, Y+18	; 0x12
    136a:	9b 89       	ldd	r25, Y+19	; 0x13
    136c:	9e 01       	movw	r18, r28
    136e:	2a 5e       	subi	r18, 0xEA	; 234
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	b9 01       	movw	r22, r18
    1374:	0e 94 02 05 	call	0xa04	; 0xa04 <cbuffPeekHead>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	09 f4       	brne	.+2      	; 0x137e <main+0x53a>
    {
        /* ERROR - peeked head data that isn't there */
#ifdef __i386__
        assert(0);
#else
        while(1);
    137c:	ff cf       	rjmp	.-2      	; 0x137c <main+0x538>
#endif
    }

    if ((cbuffPeekTail(hOutBuffer, &readData)) == CBUFF_GET_OK)
    137e:	8a 89       	ldd	r24, Y+18	; 0x12
    1380:	9b 89       	ldd	r25, Y+19	; 0x13
    1382:	9e 01       	movw	r18, r28
    1384:	2a 5e       	subi	r18, 0xEA	; 234
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <cbuffPeekTail>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	09 f4       	brne	.+2      	; 0x1394 <main+0x550>
    {
        /* ERROR - peeked tail data that isn't there */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1392:	ff cf       	rjmp	.-2      	; 0x1392 <main+0x54e>
    /***************************************************************************
    * TEST 17 - Put some data in the buffer and then peek the head and tail
    *
    ***************************************************************************/
    /* Empty buffers to start with known state */
    cbuffClearBuffer(hOutBuffer);
    1394:	8a 89       	ldd	r24, Y+18	; 0x12
    1396:	9b 89       	ldd	r25, Y+19	; 0x13
    1398:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>

    writeData = 'a';
    139c:	81 e6       	ldi	r24, 0x61	; 97
    139e:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 10; x++)
    13a0:	1a 82       	std	Y+2, r1	; 0x02
    13a2:	0b c0       	rjmp	.+22     	; 0x13ba <main+0x576>
    {
        cbuffPutByte(hOutBuffer, writeData);
    13a4:	8a 89       	ldd	r24, Y+18	; 0x12
    13a6:	9b 89       	ldd	r25, Y+19	; 0x13
    13a8:	69 81       	ldd	r22, Y+1	; 0x01
    13aa:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
        writeData++;
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	89 83       	std	Y+1, r24	; 0x01
    ***************************************************************************/
    /* Empty buffers to start with known state */
    cbuffClearBuffer(hOutBuffer);

    writeData = 'a';
    for (x = 0; x < 10; x++)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	8a 30       	cpi	r24, 0x0A	; 10
    13be:	90 f3       	brcs	.-28     	; 0x13a4 <main+0x560>
    {
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }

    if ((cbuffPeekHead(hOutBuffer, &readData)) != CBUFF_GET_OK)
    13c0:	8a 89       	ldd	r24, Y+18	; 0x12
    13c2:	9b 89       	ldd	r25, Y+19	; 0x13
    13c4:	9e 01       	movw	r18, r28
    13c6:	2a 5e       	subi	r18, 0xEA	; 234
    13c8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ca:	b9 01       	movw	r22, r18
    13cc:	0e 94 02 05 	call	0xa04	; 0xa04 <cbuffPeekHead>
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <main+0x592>
    {
        /* ERROR - couldn't peek head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    13d4:	ff cf       	rjmp	.-2      	; 0x13d4 <main+0x590>
#endif
    }

    if (readData != (writeData-1))
    13d6:	8e 89       	ldd	r24, Y+22	; 0x16
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	28 17       	cp	r18, r24
    13e6:	39 07       	cpc	r19, r25
    13e8:	09 f0       	breq	.+2      	; 0x13ec <main+0x5a8>
    {
        /* ERROR - peeked incorrect head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    13ea:	ff cf       	rjmp	.-2      	; 0x13ea <main+0x5a6>
#endif
    }

    if ((cbuffPeekTail(hOutBuffer, &readData)) != CBUFF_GET_OK)
    13ec:	8a 89       	ldd	r24, Y+18	; 0x12
    13ee:	9b 89       	ldd	r25, Y+19	; 0x13
    13f0:	9e 01       	movw	r18, r28
    13f2:	2a 5e       	subi	r18, 0xEA	; 234
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	b9 01       	movw	r22, r18
    13f8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <cbuffPeekTail>
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	09 f0       	breq	.+2      	; 0x1402 <main+0x5be>
    {
        /* ERROR - couldn't peek tail data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1400:	ff cf       	rjmp	.-2      	; 0x1400 <main+0x5bc>
#endif
    }

    if (readData != 'a')
    1402:	8e 89       	ldd	r24, Y+22	; 0x16
    1404:	81 36       	cpi	r24, 0x61	; 97
    1406:	09 f0       	breq	.+2      	; 0x140a <main+0x5c6>
    {
        /* ERROR - peeked incorrect tail data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1408:	ff cf       	rjmp	.-2      	; 0x1408 <main+0x5c4>
    /***************************************************************************
    * TEST 18 - Check cbuffPeekHead works when inPointer points to startOfBuffer
    * NOTE: This test relies upon the status of the previous test!
    ***************************************************************************/
    /* Read some bytes out of buffer */
    for (x = 0; x < 6; x++)
    140a:	1a 82       	std	Y+2, r1	; 0x02
    140c:	0b c0       	rjmp	.+22     	; 0x1424 <main+0x5e0>
    {
        cbuffGetByte(hOutBuffer, &readData);
    140e:	8a 89       	ldd	r24, Y+18	; 0x12
    1410:	9b 89       	ldd	r25, Y+19	; 0x13
    1412:	9e 01       	movw	r18, r28
    1414:	2a 5e       	subi	r18, 0xEA	; 234
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	b9 01       	movw	r22, r18
    141a:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    /***************************************************************************
    * TEST 18 - Check cbuffPeekHead works when inPointer points to startOfBuffer
    * NOTE: This test relies upon the status of the previous test!
    ***************************************************************************/
    /* Read some bytes out of buffer */
    for (x = 0; x < 6; x++)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	8a 83       	std	Y+2, r24	; 0x02
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	86 30       	cpi	r24, 0x06	; 6
    1428:	90 f3       	brcs	.-28     	; 0x140e <main+0x5ca>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }

    /* Write enough bytes to get inPointer on startOfBuffer boundary */
    writeData = 'a';
    142a:	81 e6       	ldi	r24, 0x61	; 97
    142c:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 22; x++)
    142e:	1a 82       	std	Y+2, r1	; 0x02
    1430:	0b c0       	rjmp	.+22     	; 0x1448 <main+0x604>
    {
        cbuffPutByte(hOutBuffer, writeData);
    1432:	8a 89       	ldd	r24, Y+18	; 0x12
    1434:	9b 89       	ldd	r25, Y+19	; 0x13
    1436:	69 81       	ldd	r22, Y+1	; 0x01
    1438:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
        writeData++;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	89 83       	std	Y+1, r24	; 0x01
        cbuffGetByte(hOutBuffer, &readData);
    }

    /* Write enough bytes to get inPointer on startOfBuffer boundary */
    writeData = 'a';
    for (x = 0; x < 22; x++)
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	8f 5f       	subi	r24, 0xFF	; 255
    1446:	8a 83       	std	Y+2, r24	; 0x02
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	86 31       	cpi	r24, 0x16	; 22
    144c:	90 f3       	brcs	.-28     	; 0x1432 <main+0x5ee>
    {
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }

    if ((cbuffPeekHead(hOutBuffer, &readData)) != CBUFF_GET_OK)
    144e:	8a 89       	ldd	r24, Y+18	; 0x12
    1450:	9b 89       	ldd	r25, Y+19	; 0x13
    1452:	9e 01       	movw	r18, r28
    1454:	2a 5e       	subi	r18, 0xEA	; 234
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	b9 01       	movw	r22, r18
    145a:	0e 94 02 05 	call	0xa04	; 0xa04 <cbuffPeekHead>
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	09 f0       	breq	.+2      	; 0x1464 <main+0x620>
    {
        /* ERROR - couldn't peek head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1462:	ff cf       	rjmp	.-2      	; 0x1462 <main+0x61e>
#endif
    }

    if (readData != (writeData-1))
    1464:	8e 89       	ldd	r24, Y+22	; 0x16
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	09 f0       	breq	.+2      	; 0x147a <main+0x636>
    {
        /* ERROR - peeked incorrect head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1478:	ff cf       	rjmp	.-2      	; 0x1478 <main+0x634>

    /***************************************************************************
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    147a:	8a 89       	ldd	r24, Y+18	; 0x12
    147c:	9b 89       	ldd	r25, Y+19	; 0x13
    147e:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>
    writeData = '1';
    1482:	81 e3       	ldi	r24, 0x31	; 49
    1484:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 8; x++)
    1486:	1a 82       	std	Y+2, r1	; 0x02
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <main+0x664>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    148a:	8a 89       	ldd	r24, Y+18	; 0x12
    148c:	9b 89       	ldd	r25, Y+19	; 0x13
    148e:	69 81       	ldd	r22, Y+1	; 0x01
    1490:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	39 f4       	brne	.+14     	; 0x14a6 <main+0x662>
        {
            writeData++;
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <main+0x664>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    14a6:	ff cf       	rjmp	.-2      	; 0x14a6 <main+0x662>
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	70 f3       	brcs	.-36     	; 0x148a <main+0x646>
            while(1);
#endif
        }
    }

    writeData-=2;
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	82 50       	subi	r24, 0x02	; 2
    14b2:	89 83       	std	Y+1, r24	; 0x01
    /* unput the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there      */
    x = 0;
    14b4:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUnputByte(hOutBuffer))
    14b6:	8a 89       	ldd	r24, Y+18	; 0x12
    14b8:	9b 89       	ldd	r25, Y+19	; 0x13
    14ba:	0e 94 44 05 	call	0xa88	; 0xa88 <cbuffUnputByte>
    14be:	88 23       	and	r24, r24
    14c0:	c9 f4       	brne	.+50     	; 0x14f4 <main+0x6b0>
        {
            if (cbuffPeekHead(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    14c2:	8a 89       	ldd	r24, Y+18	; 0x12
    14c4:	9b 89       	ldd	r25, Y+19	; 0x13
    14c6:	9e 01       	movw	r18, r28
    14c8:	2a 5e       	subi	r18, 0xEA	; 234
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	b9 01       	movw	r22, r18
    14ce:	0e 94 02 05 	call	0xa04	; 0xa04 <cbuffPeekHead>
    14d2:	88 23       	and	r24, r24
    14d4:	59 f0       	breq	.+22     	; 0x14ec <main+0x6a8>
            {
                if (readData != writeData)
    14d6:	9e 89       	ldd	r25, Y+22	; 0x16
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	98 17       	cp	r25, r24
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <main+0x69c>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    14de:	ff cf       	rjmp	.-2      	; 0x14de <main+0x69a>
#endif
                }
                writeData--;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	81 50       	subi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
                x++;
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	8f 3f       	cpi	r24, 0xFF	; 255
    14f0:	11 f7       	brne	.-60     	; 0x14b6 <main+0x672>
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <main+0x6b2>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    14f4:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to read too much data */
    if (x >= 8)
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	88 30       	cpi	r24, 0x08	; 8
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <main+0x6ba>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    14fc:	ff cf       	rjmp	.-2      	; 0x14fc <main+0x6b8>
#endif
    }

    /* Check buffer is now empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    14fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1500:	9b 89       	ldd	r25, Y+19	; 0x13
    1502:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    1506:	8b 83       	std	Y+3, r24	; 0x03
    1508:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	80 32       	cpi	r24, 0x20	; 32
    1510:	91 05       	cpc	r25, r1
    1512:	09 f0       	breq	.+2      	; 0x1516 <main+0x6d2>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1514:	ff cf       	rjmp	.-2      	; 0x1514 <main+0x6d0>

    /***************************************************************************
    * TEST 20 - Try to unput over the wrap boundary
    ***************************************************************************/
    /* Start with an empty buffer */
    cbuffClearBuffer(hOutBuffer);
    1516:	8a 89       	ldd	r24, Y+18	; 0x12
    1518:	9b 89       	ldd	r25, Y+19	; 0x13
    151a:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>
    
    writeData = 'A';
    151e:	81 e4       	ldi	r24, 0x41	; 65
    1520:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 10; x++)
    1522:	1a 82       	std	Y+2, r1	; 0x02
    1524:	0b c0       	rjmp	.+22     	; 0x153c <main+0x6f8>
    {
        cbuffPutByte(hOutBuffer, writeData);
    1526:	8a 89       	ldd	r24, Y+18	; 0x12
    1528:	9b 89       	ldd	r25, Y+19	; 0x13
    152a:	69 81       	ldd	r22, Y+1	; 0x01
    152c:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
        writeData++;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	89 83       	std	Y+1, r24	; 0x01
    ***************************************************************************/
    /* Start with an empty buffer */
    cbuffClearBuffer(hOutBuffer);
    
    writeData = 'A';
    for (x = 0; x < 10; x++)
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	8f 5f       	subi	r24, 0xFF	; 255
    153a:	8a 83       	std	Y+2, r24	; 0x02
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	8a 30       	cpi	r24, 0x0A	; 10
    1540:	90 f3       	brcs	.-28     	; 0x1526 <main+0x6e2>
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }
    
    /* Read data out again */
    while (cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    1542:	00 00       	nop
    1544:	8a 89       	ldd	r24, Y+18	; 0x12
    1546:	9b 89       	ldd	r25, Y+19	; 0x13
    1548:	9e 01       	movw	r18, r28
    154a:	2a 5e       	subi	r18, 0xEA	; 234
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
    154e:	b9 01       	movw	r22, r18
    1550:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	b1 f3       	breq	.-20     	; 0x1544 <main+0x700>
    
    /* Fill buffer so we wrap the boundary */
    writeData = 'A';
    1558:	81 e4       	ldi	r24, 0x41	; 65
    155a:	89 83       	std	Y+1, r24	; 0x01
    while (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <main+0x720>
    {
        writeData++;
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	89 83       	std	Y+1, r24	; 0x01
    /* Read data out again */
    while (cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    
    /* Fill buffer so we wrap the boundary */
    writeData = 'A';
    while (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    1564:	8a 89       	ldd	r24, Y+18	; 0x12
    1566:	9b 89       	ldd	r25, Y+19	; 0x13
    1568:	69 81       	ldd	r22, Y+1	; 0x01
    156a:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	b1 f3       	breq	.-20     	; 0x155e <main+0x71a>
    {
        writeData++;
    }
    writeData-=2;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	82 50       	subi	r24, 0x02	; 2
    1576:	89 83       	std	Y+1, r24	; 0x01
    
    /* unput the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there and the wrap-around works */
    x = 0;
    1578:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUnputByte(hOutBuffer))
    157a:	8a 89       	ldd	r24, Y+18	; 0x12
    157c:	9b 89       	ldd	r25, Y+19	; 0x13
    157e:	0e 94 44 05 	call	0xa88	; 0xa88 <cbuffUnputByte>
    1582:	88 23       	and	r24, r24
    1584:	c9 f4       	brne	.+50     	; 0x15b8 <main+0x774>
        {
            if (cbuffPeekHead(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    1586:	8a 89       	ldd	r24, Y+18	; 0x12
    1588:	9b 89       	ldd	r25, Y+19	; 0x13
    158a:	9e 01       	movw	r18, r28
    158c:	2a 5e       	subi	r18, 0xEA	; 234
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	b9 01       	movw	r22, r18
    1592:	0e 94 02 05 	call	0xa04	; 0xa04 <cbuffPeekHead>
    1596:	88 23       	and	r24, r24
    1598:	59 f0       	breq	.+22     	; 0x15b0 <main+0x76c>
            {
                if (readData != writeData)
    159a:	9e 89       	ldd	r25, Y+22	; 0x16
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	98 17       	cp	r25, r24
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <main+0x760>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    15a2:	ff cf       	rjmp	.-2      	; 0x15a2 <main+0x75e>
#endif
                }
                writeData--;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	81 50       	subi	r24, 0x01	; 1
    15a8:	89 83       	std	Y+1, r24	; 0x01
                x++;
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	8f 3f       	cpi	r24, 0xFF	; 255
    15b4:	11 f7       	brne	.-60     	; 0x157a <main+0x736>
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <main+0x776>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    15b8:	00 00       	nop
        }
    } while(x < 0xFF);
    
    /* Check buffer is now empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    15ba:	8a 89       	ldd	r24, Y+18	; 0x12
    15bc:	9b 89       	ldd	r25, Y+19	; 0x13
    15be:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	80 32       	cpi	r24, 0x20	; 32
    15cc:	91 05       	cpc	r25, r1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <main+0x78e>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    15d0:	ff cf       	rjmp	.-2      	; 0x15d0 <main+0x78c>
    * TEST 20a - Check cbuffUngetByte function - first fill the buffer with
    *            some known data, then remove some, then unget it i.e. put it
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    15d2:	8a 89       	ldd	r24, Y+18	; 0x12
    15d4:	9b 89       	ldd	r25, Y+19	; 0x13
    15d6:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>
    writeData = 'a';
    15da:	81 e6       	ldi	r24, 0x61	; 97
    15dc:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < OUTBUFFERSIZE; x++)
    15de:	1a 82       	std	Y+2, r1	; 0x02
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <main+0x7bc>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    15e2:	8a 89       	ldd	r24, Y+18	; 0x12
    15e4:	9b 89       	ldd	r25, Y+19	; 0x13
    15e6:	69 81       	ldd	r22, Y+1	; 0x01
    15e8:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	39 f4       	brne	.+14     	; 0x15fe <main+0x7ba>
        {
            writeData++;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	89 83       	std	Y+1, r24	; 0x01
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = 'a';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	8f 5f       	subi	r24, 0xFF	; 255
    15fa:	8a 83       	std	Y+2, r24	; 0x02
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <main+0x7bc>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    15fe:	ff cf       	rjmp	.-2      	; 0x15fe <main+0x7ba>
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = 'a';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	80 32       	cpi	r24, 0x20	; 32
    1604:	70 f3       	brcs	.-36     	; 0x15e2 <main+0x79e>
#endif
        }
    }

    /* Take out all the bytes of data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1606:	1a 82       	std	Y+2, r1	; 0x02
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <main+0x7e2>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    160a:	8a 89       	ldd	r24, Y+18	; 0x12
    160c:	9b 89       	ldd	r25, Y+19	; 0x13
    160e:	9e 01       	movw	r18, r28
    1610:	2a 5e       	subi	r18, 0xEA	; 234
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	b9 01       	movw	r22, r18
    1616:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	09 f0       	breq	.+2      	; 0x1620 <main+0x7dc>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    161e:	ff cf       	rjmp	.-2      	; 0x161e <main+0x7da>
#endif
        }
    }

    /* Take out all the bytes of data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	8a 83       	std	Y+2, r24	; 0x02
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 32       	cpi	r24, 0x20	; 32
    162a:	78 f3       	brcs	.-34     	; 0x160a <main+0x7c6>
            while(1);
#endif
        }
    }
    
    writeData-=1;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	81 50       	subi	r24, 0x01	; 1
    1630:	89 83       	std	Y+1, r24	; 0x01
    
    /* unget all the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there          */
    x = 0;
    1632:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUngetByte(hOutBuffer))
    1634:	8a 89       	ldd	r24, Y+18	; 0x12
    1636:	9b 89       	ldd	r25, Y+19	; 0x13
    1638:	0e 94 a4 05 	call	0xb48	; 0xb48 <cbuffUngetByte>
    163c:	88 23       	and	r24, r24
    163e:	c9 f4       	brne	.+50     	; 0x1672 <main+0x82e>
        {
            if (cbuffPeekTail(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    1640:	8a 89       	ldd	r24, Y+18	; 0x12
    1642:	9b 89       	ldd	r25, Y+19	; 0x13
    1644:	9e 01       	movw	r18, r28
    1646:	2a 5e       	subi	r18, 0xEA	; 234
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	b9 01       	movw	r22, r18
    164c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <cbuffPeekTail>
    1650:	88 23       	and	r24, r24
    1652:	59 f0       	breq	.+22     	; 0x166a <main+0x826>
            {
                if (readData != writeData)
    1654:	9e 89       	ldd	r25, Y+22	; 0x16
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	98 17       	cp	r25, r24
    165a:	09 f0       	breq	.+2      	; 0x165e <main+0x81a>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    165c:	ff cf       	rjmp	.-2      	; 0x165c <main+0x818>
#endif
                }
                writeData--;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	81 50       	subi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
                x++;
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	8f 3f       	cpi	r24, 0xFF	; 255
    166e:	11 f7       	brne	.-60     	; 0x1634 <main+0x7f0>
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <main+0x830>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    1672:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to unget more data than available */
    if (x != OUTBUFFERSIZE)
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 32       	cpi	r24, 0x20	; 32
    1678:	09 f0       	breq	.+2      	; 0x167c <main+0x838>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    167a:	ff cf       	rjmp	.-2      	; 0x167a <main+0x836>
#endif
    }

    /* Check buffer contains has no space */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    167c:	8a 89       	ldd	r24, Y+18	; 0x12
    167e:	9b 89       	ldd	r25, Y+19	; 0x13
    1680:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    1684:	8b 83       	std	Y+3, r24	; 0x03
    1686:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != 0)
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	09 f0       	breq	.+2      	; 0x1692 <main+0x84e>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1690:	ff cf       	rjmp	.-2      	; 0x1690 <main+0x84c>
    *            the start of the buffer boundary. Then fill the buffer with 
    *            some known data, then remove some, then unget it i.e. put it
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    1692:	8a 89       	ldd	r24, Y+18	; 0x12
    1694:	9b 89       	ldd	r25, Y+19	; 0x13
    1696:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>
    writeData = '1';
    169a:	81 e3       	ldi	r24, 0x31	; 49
    169c:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 8; x++)
    169e:	1a 82       	std	Y+2, r1	; 0x02
    16a0:	0f c0       	rjmp	.+30     	; 0x16c0 <main+0x87c>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    16a2:	8a 89       	ldd	r24, Y+18	; 0x12
    16a4:	9b 89       	ldd	r25, Y+19	; 0x13
    16a6:	69 81       	ldd	r22, Y+1	; 0x01
    16a8:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	39 f4       	brne	.+14     	; 0x16be <main+0x87a>
        {
            writeData++;
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	89 83       	std	Y+1, r24	; 0x01
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <main+0x87c>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    16be:	ff cf       	rjmp	.-2      	; 0x16be <main+0x87a>
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 30       	cpi	r24, 0x08	; 8
    16c4:	70 f3       	brcs	.-36     	; 0x16a2 <main+0x85e>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < 8; x++)
    16c6:	1a 82       	std	Y+2, r1	; 0x02
    16c8:	0e c0       	rjmp	.+28     	; 0x16e6 <main+0x8a2>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    16ca:	8a 89       	ldd	r24, Y+18	; 0x12
    16cc:	9b 89       	ldd	r25, Y+19	; 0x13
    16ce:	9e 01       	movw	r18, r28
    16d0:	2a 5e       	subi	r18, 0xEA	; 234
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	b9 01       	movw	r22, r18
    16d6:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <main+0x89c>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    16de:	ff cf       	rjmp	.-2      	; 0x16de <main+0x89a>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < 8; x++)
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	88 30       	cpi	r24, 0x08	; 8
    16ea:	78 f3       	brcs	.-34     	; 0x16ca <main+0x886>
#endif
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    16ec:	81 e4       	ldi	r24, 0x41	; 65
    16ee:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < OUTBUFFERSIZE; x++)
    16f0:	1a 82       	std	Y+2, r1	; 0x02
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <main+0x8ce>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    16f4:	8a 89       	ldd	r24, Y+18	; 0x12
    16f6:	9b 89       	ldd	r25, Y+19	; 0x13
    16f8:	69 81       	ldd	r22, Y+1	; 0x01
    16fa:	0e 94 40 03 	call	0x680	; 0x680 <cbuffPutByte>
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	39 f4       	brne	.+14     	; 0x1710 <main+0x8cc>
        {
            writeData++;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <main+0x8ce>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1710:	ff cf       	rjmp	.-2      	; 0x1710 <main+0x8cc>
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	80 32       	cpi	r24, 0x20	; 32
    1716:	70 f3       	brcs	.-36     	; 0x16f4 <main+0x8b0>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1718:	1a 82       	std	Y+2, r1	; 0x02
    171a:	0e c0       	rjmp	.+28     	; 0x1738 <main+0x8f4>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    171c:	8a 89       	ldd	r24, Y+18	; 0x12
    171e:	9b 89       	ldd	r25, Y+19	; 0x13
    1720:	9e 01       	movw	r18, r28
    1722:	2a 5e       	subi	r18, 0xEA	; 234
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	b9 01       	movw	r22, r18
    1728:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	09 f0       	breq	.+2      	; 0x1732 <main+0x8ee>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1730:	ff cf       	rjmp	.-2      	; 0x1730 <main+0x8ec>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	8f 5f       	subi	r24, 0xFF	; 255
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	80 32       	cpi	r24, 0x20	; 32
    173c:	78 f3       	brcs	.-34     	; 0x171c <main+0x8d8>
            while(1);
#endif
        }
    }
        
    writeData-=1;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	81 50       	subi	r24, 0x01	; 1
    1742:	89 83       	std	Y+1, r24	; 0x01
    
    /* unget all the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there - this   */
    /* 'ungets' over the wrap boundary                            */
    x = 0;
    1744:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUngetByte(hOutBuffer))
    1746:	8a 89       	ldd	r24, Y+18	; 0x12
    1748:	9b 89       	ldd	r25, Y+19	; 0x13
    174a:	0e 94 a4 05 	call	0xb48	; 0xb48 <cbuffUngetByte>
    174e:	88 23       	and	r24, r24
    1750:	c9 f4       	brne	.+50     	; 0x1784 <main+0x940>
        {
            if (cbuffPeekTail(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    1752:	8a 89       	ldd	r24, Y+18	; 0x12
    1754:	9b 89       	ldd	r25, Y+19	; 0x13
    1756:	9e 01       	movw	r18, r28
    1758:	2a 5e       	subi	r18, 0xEA	; 234
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	b9 01       	movw	r22, r18
    175e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <cbuffPeekTail>
    1762:	88 23       	and	r24, r24
    1764:	59 f0       	breq	.+22     	; 0x177c <main+0x938>
            {
                if (readData != writeData)
    1766:	9e 89       	ldd	r25, Y+22	; 0x16
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	98 17       	cp	r25, r24
    176c:	09 f0       	breq	.+2      	; 0x1770 <main+0x92c>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    176e:	ff cf       	rjmp	.-2      	; 0x176e <main+0x92a>
#endif
                }
                writeData--;
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	81 50       	subi	r24, 0x01	; 1
    1774:	89 83       	std	Y+1, r24	; 0x01
                x++;
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	8f 3f       	cpi	r24, 0xFF	; 255
    1780:	11 f7       	brne	.-60     	; 0x1746 <main+0x902>
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <main+0x942>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    1784:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to unget more data than available */
    if (x != OUTBUFFERSIZE)
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 32       	cpi	r24, 0x20	; 32
    178a:	09 f0       	breq	.+2      	; 0x178e <main+0x94a>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    178c:	ff cf       	rjmp	.-2      	; 0x178c <main+0x948>
#endif
    }

    /* Check buffer contains has no space */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    178e:	8a 89       	ldd	r24, Y+18	; 0x12
    1790:	9b 89       	ldd	r25, Y+19	; 0x13
    1792:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    1796:	8b 83       	std	Y+3, r24	; 0x03
    1798:	9c 83       	std	Y+4, r25	; 0x04
    if (spaceRemainingInBuffer != 0)
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <main+0x960>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    17a2:	ff cf       	rjmp	.-2      	; 0x17a2 <main+0x95e>
    
    /***************************************************************************
    * TEST 21 - Try to put data in circular buffer from an array
    ***************************************************************************/
    /* Clear buffers */
    cbuffClearBuffer(hInBuffer);
    17a4:	88 89       	ldd	r24, Y+16	; 0x10
    17a6:	99 89       	ldd	r25, Y+17	; 0x11
    17a8:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>
    cbuffClearBuffer(hOutBuffer);
    17ac:	8a 89       	ldd	r24, Y+18	; 0x12
    17ae:	9b 89       	ldd	r25, Y+19	; 0x13
    17b0:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    17b4:	1a 82       	std	Y+2, r1	; 0x02
    17b6:	0c c0       	rjmp	.+24     	; 0x17d0 <main+0x98c>
    {
        testBuffer2[x] = x + 'A';
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	2a 81       	ldd	r18, Y+2	; 0x02
    17c0:	2f 5b       	subi	r18, 0xBF	; 191
    17c2:	84 59       	subi	r24, 0x94	; 148
    17c4:	9f 4d       	sbci	r25, 0xDF	; 223
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
    /* Clear buffers */
    cbuffClearBuffer(hInBuffer);
    cbuffClearBuffer(hOutBuffer);

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	80 31       	cpi	r24, 0x10	; 16
    17d4:	88 f3       	brcs	.-30     	; 0x17b8 <main+0x974>
    {
        testBuffer2[x] = x + 'A';
    }

    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    17d6:	8a 89       	ldd	r24, Y+18	; 0x12
    17d8:	9b 89       	ldd	r25, Y+19	; 0x13
    17da:	2c e6       	ldi	r18, 0x6C	; 108
    17dc:	30 e2       	ldi	r19, 0x20	; 32
    17de:	b9 01       	movw	r22, r18
    17e0:	40 e1       	ldi	r20, 0x10	; 16
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	9e 83       	std	Y+6, r25	; 0x06

    if (dataInBuffer != 16)
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	80 31       	cpi	r24, 0x10	; 16
    17f2:	91 05       	cpc	r25, r1
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <main+0x9b4>
    {
        /* ERROR - didn't write expected number of bytes in buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    17f6:	ff cf       	rjmp	.-2      	; 0x17f6 <main+0x9b2>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    17f8:	8a 89       	ldd	r24, Y+18	; 0x12
    17fa:	9b 89       	ldd	r25, Y+19	; 0x13
    17fc:	0e 94 14 04 	call	0x828	; 0x828 <cbuffGetFill>
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	9e 83       	std	Y+6, r25	; 0x06
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1804:	8a 89       	ldd	r24, Y+18	; 0x12
    1806:	9b 89       	ldd	r25, Y+19	; 0x13
    1808:	0e 94 a4 03 	call	0x748	; 0x748 <cbuffGetSpace>
    180c:	8b 83       	std	Y+3, r24	; 0x03
    180e:	9c 83       	std	Y+4, r25	; 0x04

    if (dataInBuffer != 16)
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	80 31       	cpi	r24, 0x10	; 16
    1816:	91 05       	cpc	r25, r1
    1818:	09 f0       	breq	.+2      	; 0x181c <main+0x9d8>
    {
        /* ERROR - buffer fill doesn't match expected value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    181a:	ff cf       	rjmp	.-2      	; 0x181a <main+0x9d6>
#endif
    }

    if (spaceRemainingInBuffer != 16)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	80 31       	cpi	r24, 0x10	; 16
    1822:	91 05       	cpc	r25, r1
    1824:	09 f0       	breq	.+2      	; 0x1828 <main+0x9e4>
    {
        /* ERROR - bytes remaining doesn't match expected value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1826:	ff cf       	rjmp	.-2      	; 0x1826 <main+0x9e2>
#endif
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    1828:	1a 82       	std	Y+2, r1	; 0x02
    182a:	16 c0       	rjmp	.+44     	; 0x1858 <main+0xa14>
    {
        cbuffGetByte(hOutBuffer, &readData);
    182c:	8a 89       	ldd	r24, Y+18	; 0x12
    182e:	9b 89       	ldd	r25, Y+19	; 0x13
    1830:	9e 01       	movw	r18, r28
    1832:	2a 5e       	subi	r18, 0xEA	; 234
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	b9 01       	movw	r22, r18
    1838:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
        if (testBuffer2[x] != readData)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	84 59       	subi	r24, 0x94	; 148
    1844:	9f 4d       	sbci	r25, 0xDF	; 223
    1846:	fc 01       	movw	r30, r24
    1848:	90 81       	ld	r25, Z
    184a:	8e 89       	ldd	r24, Y+22	; 0x16
    184c:	98 17       	cp	r25, r24
    184e:	09 f0       	breq	.+2      	; 0x1852 <main+0xa0e>
            /* ERROR - data read from buffer doesn't match data written to    */
            /* buffer                                                         */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1850:	ff cf       	rjmp	.-2      	; 0x1850 <main+0xa0c>
        while(1);
#endif
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	80 31       	cpi	r24, 0x10	; 16
    185c:	38 f3       	brcs	.-50     	; 0x182c <main+0x9e8>
    }

    /***************************************************************************
    * TEST 22 - Try to overfill a circular buffer from an array
    ***************************************************************************/
    cbuffClearBuffer(hOutBuffer);
    185e:	8a 89       	ldd	r24, Y+18	; 0x12
    1860:	9b 89       	ldd	r25, Y+19	; 0x13
    1862:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    1866:	1a 82       	std	Y+2, r1	; 0x02
    1868:	0c c0       	rjmp	.+24     	; 0x1882 <main+0xa3e>
    {
        testBuffer2[x] = x + 'a';
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2a 81       	ldd	r18, Y+2	; 0x02
    1872:	2f 59       	subi	r18, 0x9F	; 159
    1874:	84 59       	subi	r24, 0x94	; 148
    1876:	9f 4d       	sbci	r25, 0xDF	; 223
    1878:	fc 01       	movw	r30, r24
    187a:	20 83       	st	Z, r18
    * TEST 22 - Try to overfill a circular buffer from an array
    ***************************************************************************/
    cbuffClearBuffer(hOutBuffer);

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	8f 5f       	subi	r24, 0xFF	; 255
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 31       	cpi	r24, 0x10	; 16
    1886:	88 f3       	brcs	.-30     	; 0x186a <main+0xa26>
    {
        testBuffer2[x] = x + 'a';
    }

    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1888:	8a 89       	ldd	r24, Y+18	; 0x12
    188a:	9b 89       	ldd	r25, Y+19	; 0x13
    188c:	2c e6       	ldi	r18, 0x6C	; 108
    188e:	30 e2       	ldi	r19, 0x20	; 32
    1890:	b9 01       	movw	r22, r18
    1892:	40 e1       	ldi	r20, 0x10	; 16
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 16)
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	80 31       	cpi	r24, 0x10	; 16
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f0       	breq	.+2      	; 0x18aa <main+0xa66>
        /* ERROR - failed to write correct number of bytes to buffer which    */
        /*         had enough space                                           */
#ifdef __i386__
        assert(0);
#else
        while(1);
    18a8:	ff cf       	rjmp	.-2      	; 0x18a8 <main+0xa64>
#endif
    }
    
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    18aa:	8a 89       	ldd	r24, Y+18	; 0x12
    18ac:	9b 89       	ldd	r25, Y+19	; 0x13
    18ae:	2c e6       	ldi	r18, 0x6C	; 108
    18b0:	30 e2       	ldi	r19, 0x20	; 32
    18b2:	b9 01       	movw	r22, r18
    18b4:	40 e1       	ldi	r20, 0x10	; 16
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 16)
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	80 31       	cpi	r24, 0x10	; 16
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <main+0xa88>
        /* ERROR - failed to write correct number of bytes to buffer which    */
        /*         had enough space                                           */
#ifdef __i386__
        assert(0);
#else
        while(1);
    18ca:	ff cf       	rjmp	.-2      	; 0x18ca <main+0xa86>
#endif
    }
    
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    18cc:	8a 89       	ldd	r24, Y+18	; 0x12
    18ce:	9b 89       	ldd	r25, Y+19	; 0x13
    18d0:	2c e6       	ldi	r18, 0x6C	; 108
    18d2:	30 e2       	ldi	r19, 0x20	; 32
    18d4:	b9 01       	movw	r22, r18
    18d6:	40 e1       	ldi	r20, 0x10	; 16
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	9e 83       	std	Y+6, r25	; 0x06

    if (dataInBuffer != 0)
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	9e 81       	ldd	r25, Y+6	; 0x06
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	09 f0       	breq	.+2      	; 0x18ec <main+0xaa8>
    {
        /* ERROR - managed to put data into a full buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    18ea:	ff cf       	rjmp	.-2      	; 0x18ea <main+0xaa6>
    /***************************************************************************
    * TEST 23 - Try write a circular buffer from an array over the circ buff
    *           boundary
    ***************************************************************************/
    /* Put new data in buffer */
    for(x = 0; x < 16; x++)
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	0c c0       	rjmp	.+24     	; 0x1908 <main+0xac4>
    {
        testBuffer2[x] = x + '0';
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	2a 81       	ldd	r18, Y+2	; 0x02
    18f8:	20 5d       	subi	r18, 0xD0	; 208
    18fa:	84 59       	subi	r24, 0x94	; 148
    18fc:	9f 4d       	sbci	r25, 0xDF	; 223
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
    /***************************************************************************
    * TEST 23 - Try write a circular buffer from an array over the circ buff
    *           boundary
    ***************************************************************************/
    /* Put new data in buffer */
    for(x = 0; x < 16; x++)
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	8a 83       	std	Y+2, r24	; 0x02
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 31       	cpi	r24, 0x10	; 16
    190c:	88 f3       	brcs	.-30     	; 0x18f0 <main+0xaac>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Remove eight bytes from buffer tail, and read eight bytes out */
    for (x = 0; x < 8; x++)
    190e:	1a 82       	std	Y+2, r1	; 0x02
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <main+0xaec>
    {
        cbuffUnputByte(hOutBuffer);
    1912:	8a 89       	ldd	r24, Y+18	; 0x12
    1914:	9b 89       	ldd	r25, Y+19	; 0x13
    1916:	0e 94 44 05 	call	0xa88	; 0xa88 <cbuffUnputByte>
        cbuffGetByte(hOutBuffer, &readData);
    191a:	8a 89       	ldd	r24, Y+18	; 0x12
    191c:	9b 89       	ldd	r25, Y+19	; 0x13
    191e:	9e 01       	movw	r18, r28
    1920:	2a 5e       	subi	r18, 0xEA	; 234
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	b9 01       	movw	r22, r18
    1926:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Remove eight bytes from buffer tail, and read eight bytes out */
    for (x = 0; x < 8; x++)
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	70 f3       	brcs	.-36     	; 0x1912 <main+0xace>
        cbuffUnputByte(hOutBuffer);
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1936:	8a 89       	ldd	r24, Y+18	; 0x12
    1938:	9b 89       	ldd	r25, Y+19	; 0x13
    193a:	2c e6       	ldi	r18, 0x6C	; 108
    193c:	30 e2       	ldi	r19, 0x20	; 32
    193e:	b9 01       	movw	r22, r18
    1940:	40 e1       	ldi	r20, 0x10	; 16
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 16)
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	9e 81       	ldd	r25, Y+6	; 0x06
    1950:	80 31       	cpi	r24, 0x10	; 16
    1952:	91 05       	cpc	r25, r1
    1954:	09 f0       	breq	.+2      	; 0x1958 <main+0xb14>
    {
        /* ERROR - couldn't get all expected data into buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1956:	ff cf       	rjmp	.-2      	; 0x1956 <main+0xb12>
#endif
    }
    
    /* Read data out and check all is ok */
    /* First, read sixteen bytes out */
    for (x = 0; x < 16; x++)
    1958:	1a 82       	std	Y+2, r1	; 0x02
    195a:	0b c0       	rjmp	.+22     	; 0x1972 <main+0xb2e>
    {
        cbuffGetByte(hOutBuffer, &readData);
    195c:	8a 89       	ldd	r24, Y+18	; 0x12
    195e:	9b 89       	ldd	r25, Y+19	; 0x13
    1960:	9e 01       	movw	r18, r28
    1962:	2a 5e       	subi	r18, 0xEA	; 234
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	b9 01       	movw	r22, r18
    1968:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
#endif
    }
    
    /* Read data out and check all is ok */
    /* First, read sixteen bytes out */
    for (x = 0; x < 16; x++)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	8f 5f       	subi	r24, 0xFF	; 255
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 31       	cpi	r24, 0x10	; 16
    1976:	90 f3       	brcs	.-28     	; 0x195c <main+0xb18>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    1978:	1a 82       	std	Y+2, r1	; 0x02
    197a:	16 c0       	rjmp	.+44     	; 0x19a8 <main+0xb64>
    {
        cbuffGetByte(hOutBuffer, &readData);
    197c:	8a 89       	ldd	r24, Y+18	; 0x12
    197e:	9b 89       	ldd	r25, Y+19	; 0x13
    1980:	9e 01       	movw	r18, r28
    1982:	2a 5e       	subi	r18, 0xEA	; 234
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	b9 01       	movw	r22, r18
    1988:	0e 94 6d 04 	call	0x8da	; 0x8da <cbuffGetByte>
        if (testBuffer2[x] != readData)
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	84 59       	subi	r24, 0x94	; 148
    1994:	9f 4d       	sbci	r25, 0xDF	; 223
    1996:	fc 01       	movw	r30, r24
    1998:	90 81       	ld	r25, Z
    199a:	8e 89       	ldd	r24, Y+22	; 0x16
    199c:	98 17       	cp	r25, r24
    199e:	09 f0       	breq	.+2      	; 0x19a2 <main+0xb5e>
            /* ERROR - data read from buffer doesn't match data written to    */
            /* buffer                                                         */
#ifdef __i386__
            assert(0);
#else
            while(1);
    19a0:	ff cf       	rjmp	.-2      	; 0x19a0 <main+0xb5c>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	8f 5f       	subi	r24, 0xFF	; 255
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	80 31       	cpi	r24, 0x10	; 16
    19ac:	38 f3       	brcs	.-50     	; 0x197c <main+0xb38>

    /***************************************************************************
    * TEST 24 - Try to read data out of circular buffer into an array
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    19ae:	8a 89       	ldd	r24, Y+18	; 0x12
    19b0:	9b 89       	ldd	r25, Y+19	; 0x13
    19b2:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    19b6:	1a 82       	std	Y+2, r1	; 0x02
    19b8:	0c c0       	rjmp	.+24     	; 0x19d2 <main+0xb8e>
    {
        testBuffer2[x] = x + 'a';
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	2a 81       	ldd	r18, Y+2	; 0x02
    19c2:	2f 59       	subi	r18, 0x9F	; 159
    19c4:	84 59       	subi	r24, 0x94	; 148
    19c6:	9f 4d       	sbci	r25, 0xDF	; 223
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	80 31       	cpi	r24, 0x10	; 16
    19d6:	88 f3       	brcs	.-30     	; 0x19ba <main+0xb76>
    {
        testBuffer2[x] = x + 'a';
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    19d8:	8a 89       	ldd	r24, Y+18	; 0x12
    19da:	9b 89       	ldd	r25, Y+19	; 0x13
    19dc:	2c e6       	ldi	r18, 0x6C	; 108
    19de:	30 e2       	ldi	r19, 0x20	; 32
    19e0:	b9 01       	movw	r22, r18
    19e2:	40 e1       	ldi	r20, 0x10	; 16
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    /* Clear local array */
    for(x = 0; x < 16; x++)
    19ee:	1a 82       	std	Y+2, r1	; 0x02
    19f0:	0a c0       	rjmp	.+20     	; 0x1a06 <main+0xbc2>
    {
        testBuffer2[x] = 0;
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	84 59       	subi	r24, 0x94	; 148
    19fa:	9f 4d       	sbci	r25, 0xDF	; 223
    19fc:	fc 01       	movw	r30, r24
    19fe:	10 82       	st	Z, r1
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	8a 83       	std	Y+2, r24	; 0x02
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	80 31       	cpi	r24, 0x10	; 16
    1a0a:	98 f3       	brcs	.-26     	; 0x19f2 <main+0xbae>
    {
        testBuffer2[x] = 0;
    }
    
    /* Read buffer out into local array */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1a0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a0e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a10:	2c e6       	ldi	r18, 0x6C	; 108
    1a12:	30 e2       	ldi	r19, 0x20	; 32
    1a14:	b9 01       	movw	r22, r18
    1a16:	40 e1       	ldi	r20, 0x10	; 16
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <cbuffGetArray>
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 16)
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	80 31       	cpi	r24, 0x10	; 16
    1a28:	91 05       	cpc	r25, r1
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <main+0xbea>
    {
        /* ERROR - didn't read required quantity of data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1a2c:	ff cf       	rjmp	.-2      	; 0x1a2c <main+0xbe8>
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1a2e:	1a 82       	std	Y+2, r1	; 0x02
    1a30:	15 c0       	rjmp	.+42     	; 0x1a5c <main+0xc18>
    {
        if (testBuffer2[x] != x + 'a')
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	84 59       	subi	r24, 0x94	; 148
    1a3a:	9f 4d       	sbci	r25, 0xDF	; 223
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	8f 59       	subi	r24, 0x9F	; 159
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	28 17       	cp	r18, r24
    1a50:	39 07       	cpc	r19, r25
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <main+0xc12>
        {
            /* ERROR - data read doesn't match data written */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1a54:	ff cf       	rjmp	.-2      	; 0x1a54 <main+0xc10>
        while(1);
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
    1a5a:	8a 83       	std	Y+2, r24	; 0x02
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	80 31       	cpi	r24, 0x10	; 16
    1a60:	40 f3       	brcs	.-48     	; 0x1a32 <main+0xbee>

    /***************************************************************************
    * TEST 25 - Try to underflow a circular buffer when reading to array
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    1a62:	8a 89       	ldd	r24, Y+18	; 0x12
    1a64:	9b 89       	ldd	r25, Y+19	; 0x13
    1a66:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1a6a:	1a 82       	std	Y+2, r1	; 0x02
    1a6c:	0c c0       	rjmp	.+24     	; 0x1a86 <main+0xc42>
    {
        testBuffer2[x] = x + 'A';
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	2a 81       	ldd	r18, Y+2	; 0x02
    1a76:	2f 5b       	subi	r18, 0xBF	; 191
    1a78:	84 59       	subi	r24, 0x94	; 148
    1a7a:	9f 4d       	sbci	r25, 0xDF	; 223
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	8a 83       	std	Y+2, r24	; 0x02
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 31       	cpi	r24, 0x10	; 16
    1a8a:	88 f3       	brcs	.-30     	; 0x1a6e <main+0xc2a>
    {
        testBuffer2[x] = x + 'A';
    }
    
    /* Put some data from array in the buffer */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    1a8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a8e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a90:	2c e6       	ldi	r18, 0x6C	; 108
    1a92:	30 e2       	ldi	r19, 0x20	; 32
    1a94:	b9 01       	movw	r22, r18
    1a96:	48 e0       	ldi	r20, 0x08	; 8
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1aa2:	1a 82       	std	Y+2, r1	; 0x02
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <main+0xc76>
    {
        testBuffer2[x] = 0;
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	84 59       	subi	r24, 0x94	; 148
    1aae:	9f 4d       	sbci	r25, 0xDF	; 223
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	10 82       	st	Z, r1
    
    /* Put some data from array in the buffer */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	80 31       	cpi	r24, 0x10	; 16
    1abe:	98 f3       	brcs	.-26     	; 0x1aa6 <main+0xc62>
    {
        testBuffer2[x] = 0;
    }
    
    /* Try to read more that is there */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1ac0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac2:	9b 89       	ldd	r25, Y+19	; 0x13
    1ac4:	2c e6       	ldi	r18, 0x6C	; 108
    1ac6:	30 e2       	ldi	r19, 0x20	; 32
    1ac8:	b9 01       	movw	r22, r18
    1aca:	40 e1       	ldi	r20, 0x10	; 16
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	0e 94 8d 06 	call	0xd1a	; 0xd1a <cbuffGetArray>
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 8)
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	88 30       	cpi	r24, 0x08	; 8
    1adc:	91 05       	cpc	r25, r1
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <main+0xc9e>
        /* ERROR - read more/less data than in buffer - should only have read */
        /*         8 bytes                                                    */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1ae0:	ff cf       	rjmp	.-2      	; 0x1ae0 <main+0xc9c>

    /***************************************************************************
    * TEST 26 - Try to read circular buffer into array over buffer boundary
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    1ae2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ae6:	0e 94 3e 04 	call	0x87c	; 0x87c <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1aea:	1a 82       	std	Y+2, r1	; 0x02
    1aec:	0c c0       	rjmp	.+24     	; 0x1b06 <main+0xcc2>
    {
        testBuffer2[x] = x + '0';
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	2a 81       	ldd	r18, Y+2	; 0x02
    1af6:	20 5d       	subi	r18, 0xD0	; 208
    1af8:	84 59       	subi	r24, 0x94	; 148
    1afa:	9f 4d       	sbci	r25, 0xDF	; 223
    1afc:	fc 01       	movw	r30, r24
    1afe:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	8f 5f       	subi	r24, 0xFF	; 255
    1b04:	8a 83       	std	Y+2, r24	; 0x02
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 31       	cpi	r24, 0x10	; 16
    1b0a:	88 f3       	brcs	.-30     	; 0x1aee <main+0xcaa>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Put some data in the buffer with data from array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1b0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b0e:	9b 89       	ldd	r25, Y+19	; 0x13
    1b10:	2c e6       	ldi	r18, 0x6C	; 108
    1b12:	30 e2       	ldi	r19, 0x20	; 32
    1b14:	b9 01       	movw	r22, r18
    1b16:	40 e1       	ldi	r20, 0x10	; 16
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    1b22:	8a 89       	ldd	r24, Y+18	; 0x12
    1b24:	9b 89       	ldd	r25, Y+19	; 0x13
    1b26:	2c e6       	ldi	r18, 0x6C	; 108
    1b28:	30 e2       	ldi	r19, 0x20	; 32
    1b2a:	b9 01       	movw	r22, r18
    1b2c:	48 e0       	ldi	r20, 0x08	; 8
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	9e 83       	std	Y+6, r25	; 0x06
    
    /* Read the some data out */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1b38:	8a 89       	ldd	r24, Y+18	; 0x12
    1b3a:	9b 89       	ldd	r25, Y+19	; 0x13
    1b3c:	2c e6       	ldi	r18, 0x6C	; 108
    1b3e:	30 e2       	ldi	r19, 0x20	; 32
    1b40:	b9 01       	movw	r22, r18
    1b42:	40 e1       	ldi	r20, 0x10	; 16
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	0e 94 8d 06 	call	0xd1a	; 0xd1a <cbuffGetArray>
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 8);
    1b4e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b50:	9b 89       	ldd	r25, Y+19	; 0x13
    1b52:	2c e6       	ldi	r18, 0x6C	; 108
    1b54:	30 e2       	ldi	r19, 0x20	; 32
    1b56:	b9 01       	movw	r22, r18
    1b58:	48 e0       	ldi	r20, 0x08	; 8
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <cbuffGetArray>
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    
    /* Put some more data in the buffer, writing over buffer boundary */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1b64:	8a 89       	ldd	r24, Y+18	; 0x12
    1b66:	9b 89       	ldd	r25, Y+19	; 0x13
    1b68:	2c e6       	ldi	r18, 0x6C	; 108
    1b6a:	30 e2       	ldi	r19, 0x20	; 32
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	40 e1       	ldi	r20, 0x10	; 16
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	0e 94 00 06 	call	0xc00	; 0xc00 <cbuffPutArray>
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1b7a:	1a 82       	std	Y+2, r1	; 0x02
    1b7c:	0a c0       	rjmp	.+20     	; 0x1b92 <main+0xd4e>
    {
        testBuffer2[x] = 0;
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	84 59       	subi	r24, 0x94	; 148
    1b86:	9f 4d       	sbci	r25, 0xDF	; 223
    1b88:	fc 01       	movw	r30, r24
    1b8a:	10 82       	st	Z, r1
    
    /* Put some more data in the buffer, writing over buffer boundary */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	80 31       	cpi	r24, 0x10	; 16
    1b96:	98 f3       	brcs	.-26     	; 0x1b7e <main+0xd3a>
    {
        testBuffer2[x] = 0;
    }
    
    /* Read out over the boundary into the array */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1b98:	8a 89       	ldd	r24, Y+18	; 0x12
    1b9a:	9b 89       	ldd	r25, Y+19	; 0x13
    1b9c:	2c e6       	ldi	r18, 0x6C	; 108
    1b9e:	30 e2       	ldi	r19, 0x20	; 32
    1ba0:	b9 01       	movw	r22, r18
    1ba2:	40 e1       	ldi	r20, 0x10	; 16
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <cbuffGetArray>
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    if (dataInBuffer != 16)
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	80 31       	cpi	r24, 0x10	; 16
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <main+0xd76>
    {
        /* ERROR - didn't read 16 bytes from buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1bb8:	ff cf       	rjmp	.-2      	; 0x1bb8 <main+0xd74>
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1bba:	1a 82       	std	Y+2, r1	; 0x02
    1bbc:	14 c0       	rjmp	.+40     	; 0x1be6 <main+0xda2>
    {
        if (testBuffer2[x] != x + '0')
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	84 59       	subi	r24, 0x94	; 148
    1bc6:	9f 4d       	sbci	r25, 0xDF	; 223
    1bc8:	fc 01       	movw	r30, r24
    1bca:	80 81       	ld	r24, Z
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	88 2f       	mov	r24, r24
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	c0 96       	adiw	r24, 0x30	; 48
    1bd8:	28 17       	cp	r18, r24
    1bda:	39 07       	cpc	r19, r25
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <main+0xd9c>
        {
            /* ERROR - data read doesn't match data written */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1bde:	ff cf       	rjmp	.-2      	; 0x1bde <main+0xd9a>
        while(1);
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	80 31       	cpi	r24, 0x10	; 16
    1bea:	48 f3       	brcs	.-46     	; 0x1bbe <main+0xd7a>
    
    /* Congratulations! If we stop here all tests passed */
#ifdef __i386__
    printf("*** All tests for -cbuff- passed ***");
#else
    while(1);
    1bec:	ff cf       	rjmp	.-2      	; 0x1bec <main+0xda8>

00001bee <_exit>:
    1bee:	f8 94       	cli

00001bf0 <__stop_program>:
    1bf0:	ff cf       	rjmp	.-2      	; 0x1bf0 <__stop_program>
