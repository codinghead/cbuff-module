
cbuff_AVRTINY_GNU_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ac6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000b0  00800100  00800100  00001b3a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000151  00000000  00000000  000022cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000788  00000000  00000000  0000241e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000173  00000000  00000000  00002ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152e  00000000  00000000  00002d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00004248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00004388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000009e  00000000  00000000  00004789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
       8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
       c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
      6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
      84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
      86:	a0 3b       	cpi	r26, 0xB0	; 176
      88:	b1 07       	cpc	r27, r17
      8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
      8c:	0e 94 89 06 	call	0xd12	; 0xd12 <main>
      90:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <_exit>

00000094 <__bad_interrupt>:
      94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <cbuffInit>:
* \note
* -# Must be called before using any functions in the CBUFF module
*
*******************************************************************************/
void cbuffInit(void)
{
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
                                        /* Initialise the linked list pointer */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
      a0:	10 92 01 01 	sts	0x0101, r1
      a4:	10 92 00 01 	sts	0x0100, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
      a8:	10 92 03 01 	sts	0x0103, r1
      ac:	10 92 02 01 	sts	0x0102, r1
}
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	08 95       	ret

000000b6 <cbuffDeinit>:
* - The content of any buffers will remain in memory after this function is
*   called. If you have any data there that you don't want other to see, ensure
*   that you clear the buffer's contents before deinitialising this module.
*******************************************************************************/
void cbuffDeinit(void)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
                                        /* Clear the linked list pointer      */
    startOfCbuffObjs = (CBUFFOBJ *) 0;
      be:	10 92 01 01 	sts	0x0101, r1
      c2:	10 92 00 01 	sts	0x0100, r1
                                        /* Clear active buffers allocated     */
    activeCbuffObjs = 0;
      c6:	10 92 03 01 	sts	0x0103, r1
      ca:	10 92 02 01 	sts	0x0102, r1
}
      ce:	cf 91       	pop	r28
      d0:	df 91       	pop	r29
      d2:	08 95       	ret

000000d4 <cbuffCreate>:
*    greater to be useful. This will, however, not be checked by this function.
*******************************************************************************/
CBUFFNUM   cbuffCreate(CBUFF        * buffer,
                       unsigned int   sizeOfBuffer,
                       CBUFFOBJ     * newCircBufferObj)
{
      d4:	df 93       	push	r29
      d6:	cf 93       	push	r28
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	2a 97       	sbiw	r28, 0x0a	; 10
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	9e 83       	std	Y+6, r25	; 0x06
      ea:	8d 83       	std	Y+5, r24	; 0x05
      ec:	78 87       	std	Y+8, r23	; 0x08
      ee:	6f 83       	std	Y+7, r22	; 0x07
      f0:	5a 87       	std	Y+10, r21	; 0x0a
      f2:	49 87       	std	Y+9, r20	; 0x09
    CBUFFOBJ * localCircBufferObj;
    CBUFFNUM circBuffNum = 0x0001;      /* Assign starting buffer number, 1,  */
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	9a 83       	std	Y+2, r25	; 0x02
      fa:	89 83       	std	Y+1, r24	; 0x01
                                        /* next free buffer number            */
                                        /* 0 reserved for alloc failed!       */

                                        /* Ensure there is a buffer and it    */
                                        /* has size                           */
    if ((buffer != (unsigned char *) 0) && (sizeOfBuffer != 0))
      fc:	8d 81       	ldd	r24, Y+5	; 0x05
      fe:	9e 81       	ldd	r25, Y+6	; 0x06
     100:	00 97       	sbiw	r24, 0x00	; 0
     102:	09 f4       	brne	.+2      	; 0x106 <cbuffCreate+0x32>
     104:	11 c1       	rjmp	.+546    	; 0x328 <cbuffCreate+0x254>
     106:	8f 81       	ldd	r24, Y+7	; 0x07
     108:	98 85       	ldd	r25, Y+8	; 0x08
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	09 f4       	brne	.+2      	; 0x110 <cbuffCreate+0x3c>
     10e:	0c c1       	rjmp	.+536    	; 0x328 <cbuffCreate+0x254>
    {
                                        /* Ensure we got somewhere to create  */
                                        /* our buffer object                  */
        if (newCircBufferObj != (CBUFFOBJ *) 0)
     110:	89 85       	ldd	r24, Y+9	; 0x09
     112:	9a 85       	ldd	r25, Y+10	; 0x0a
     114:	00 97       	sbiw	r24, 0x00	; 0
     116:	09 f4       	brne	.+2      	; 0x11a <cbuffCreate+0x46>
     118:	07 c1       	rjmp	.+526    	; 0x328 <cbuffCreate+0x254>
                                        /* Find place for buffer object in    */
                                        /* the linked list and assign number  */
                                        /* If there is nothing in the list,   */
                                        /* just put this object in the first  */
                                        /* position                           */
            if (activeCbuffObjs == 0 && startOfCbuffObjs == (CBUFFOBJ *) 0)
     11a:	80 91 02 01 	lds	r24, 0x0102
     11e:	90 91 03 01 	lds	r25, 0x0103
     122:	00 97       	sbiw	r24, 0x00	; 0
     124:	09 f0       	breq	.+2      	; 0x128 <cbuffCreate+0x54>
     126:	6e c0       	rjmp	.+220    	; 0x204 <cbuffCreate+0x130>
     128:	80 91 00 01 	lds	r24, 0x0100
     12c:	90 91 01 01 	lds	r25, 0x0101
     130:	00 97       	sbiw	r24, 0x00	; 0
     132:	09 f0       	breq	.+2      	; 0x136 <cbuffCreate+0x62>
     134:	67 c0       	rjmp	.+206    	; 0x204 <cbuffCreate+0x130>
            {
                                        /* Insert buffer object at start of   */
                                        /* list                               */
                startOfCbuffObjs = newCircBufferObj;
     136:	89 85       	ldd	r24, Y+9	; 0x09
     138:	9a 85       	ldd	r25, Y+10	; 0x0a
     13a:	90 93 01 01 	sts	0x0101, r25
     13e:	80 93 00 01 	sts	0x0100, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     142:	80 91 00 01 	lds	r24, 0x0100
     146:	90 91 01 01 	lds	r25, 0x0101
     14a:	2d 81       	ldd	r18, Y+5	; 0x05
     14c:	3e 81       	ldd	r19, Y+6	; 0x06
     14e:	fc 01       	movw	r30, r24
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     154:	80 91 00 01 	lds	r24, 0x0100
     158:	90 91 01 01 	lds	r25, 0x0101
     15c:	2f 81       	ldd	r18, Y+7	; 0x07
     15e:	38 85       	ldd	r19, Y+8	; 0x08
     160:	21 50       	subi	r18, 0x01	; 1
     162:	30 40       	sbci	r19, 0x00	; 0
     164:	4d 81       	ldd	r20, Y+5	; 0x05
     166:	5e 81       	ldd	r21, Y+6	; 0x06
     168:	24 0f       	add	r18, r20
     16a:	35 1f       	adc	r19, r21
     16c:	fc 01       	movw	r30, r24
     16e:	33 83       	std	Z+3, r19	; 0x03
     170:	22 83       	std	Z+2, r18	; 0x02
                                              (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     172:	80 91 00 01 	lds	r24, 0x0100
     176:	90 91 01 01 	lds	r25, 0x0101
     17a:	2d 81       	ldd	r18, Y+5	; 0x05
     17c:	3e 81       	ldd	r19, Y+6	; 0x06
     17e:	fc 01       	movw	r30, r24
     180:	35 83       	std	Z+5, r19	; 0x05
     182:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     184:	80 91 00 01 	lds	r24, 0x0100
     188:	90 91 01 01 	lds	r25, 0x0101
     18c:	2d 81       	ldd	r18, Y+5	; 0x05
     18e:	3e 81       	ldd	r19, Y+6	; 0x06
     190:	fc 01       	movw	r30, r24
     192:	37 83       	std	Z+7, r19	; 0x07
     194:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     196:	80 91 00 01 	lds	r24, 0x0100
     19a:	90 91 01 01 	lds	r25, 0x0101
     19e:	fc 01       	movw	r30, r24
     1a0:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     1a2:	80 91 00 01 	lds	r24, 0x0100
     1a6:	90 91 01 01 	lds	r25, 0x0101
     1aa:	20 91 00 01 	lds	r18, 0x0100
     1ae:	30 91 01 01 	lds	r19, 0x0101
     1b2:	f9 01       	movw	r30, r18
     1b4:	22 85       	ldd	r18, Z+10	; 0x0a
     1b6:	20 64       	ori	r18, 0x40	; 64
     1b8:	fc 01       	movw	r30, r24
     1ba:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to NULL            */
                startOfCbuffObjs->nextCircBufferObj = (CBUFFOBJ *) 0;
     1bc:	80 91 00 01 	lds	r24, 0x0100
     1c0:	90 91 01 01 	lds	r25, 0x0101
     1c4:	fc 01       	movw	r30, r24
     1c6:	14 86       	std	Z+12, r1	; 0x0c
     1c8:	13 86       	std	Z+11, r1	; 0x0b
                                        /* Assign it a number                 */
                activeCbuffObjs |= circBuffNum;
     1ca:	20 91 02 01 	lds	r18, 0x0102
     1ce:	30 91 03 01 	lds	r19, 0x0103
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	82 2b       	or	r24, r18
     1d8:	93 2b       	or	r25, r19
     1da:	90 93 03 01 	sts	0x0103, r25
     1de:	80 93 02 01 	sts	0x0102, r24
                startOfCbuffObjs->bufferNumber = circBuffNum;
     1e2:	80 91 00 01 	lds	r24, 0x0100
     1e6:	90 91 01 01 	lds	r25, 0x0101
     1ea:	29 81       	ldd	r18, Y+1	; 0x01
     1ec:	3a 81       	ldd	r19, Y+2	; 0x02
     1ee:	fc 01       	movw	r30, r24
     1f0:	31 87       	std	Z+9, r19	; 0x09
     1f2:	20 87       	std	Z+8, r18	; 0x08
                                        /* Return buffer number               */
                return startOfCbuffObjs->bufferNumber;
     1f4:	80 91 00 01 	lds	r24, 0x0100
     1f8:	90 91 01 01 	lds	r25, 0x0101
     1fc:	fc 01       	movw	r30, r24
     1fe:	80 85       	ldd	r24, Z+8	; 0x08
     200:	91 85       	ldd	r25, Z+9	; 0x09
     202:	94 c0       	rjmp	.+296    	; 0x32c <cbuffCreate+0x258>
            }
                                        /* Otherwise, if we haven't allocated */
                                        /* all the cbuff objects we can       */
                                        /* support, insert another            */
            else if (activeCbuffObjs != 0xFFFF)
     204:	80 91 02 01 	lds	r24, 0x0102
     208:	90 91 03 01 	lds	r25, 0x0103
     20c:	ff ef       	ldi	r31, 0xFF	; 255
     20e:	8f 3f       	cpi	r24, 0xFF	; 255
     210:	9f 07       	cpc	r25, r31
     212:	09 f4       	brne	.+2      	; 0x216 <cbuffCreate+0x142>
     214:	89 c0       	rjmp	.+274    	; 0x328 <cbuffCreate+0x254>
            {
                                        /* Insert this object at the start of */
                                        /* the list                           */
                localCircBufferObj = startOfCbuffObjs;
     216:	80 91 00 01 	lds	r24, 0x0100
     21a:	90 91 01 01 	lds	r25, 0x0101
     21e:	9c 83       	std	Y+4, r25	; 0x04
     220:	8b 83       	std	Y+3, r24	; 0x03
                startOfCbuffObjs = newCircBufferObj;
     222:	89 85       	ldd	r24, Y+9	; 0x09
     224:	9a 85       	ldd	r25, Y+10	; 0x0a
     226:	90 93 01 01 	sts	0x0101, r25
     22a:	80 93 00 01 	sts	0x0100, r24
                                        /* Setup buffer object                */
                startOfCbuffObjs->startOfBuffer = buffer;
     22e:	80 91 00 01 	lds	r24, 0x0100
     232:	90 91 01 01 	lds	r25, 0x0101
     236:	2d 81       	ldd	r18, Y+5	; 0x05
     238:	3e 81       	ldd	r19, Y+6	; 0x06
     23a:	fc 01       	movw	r30, r24
     23c:	31 83       	std	Z+1, r19	; 0x01
     23e:	20 83       	st	Z, r18
                startOfCbuffObjs->endOfBuffer   = buffer + (sizeof(CBUFF) *
     240:	80 91 00 01 	lds	r24, 0x0100
     244:	90 91 01 01 	lds	r25, 0x0101
     248:	2f 81       	ldd	r18, Y+7	; 0x07
     24a:	38 85       	ldd	r19, Y+8	; 0x08
     24c:	21 50       	subi	r18, 0x01	; 1
     24e:	30 40       	sbci	r19, 0x00	; 0
     250:	4d 81       	ldd	r20, Y+5	; 0x05
     252:	5e 81       	ldd	r21, Y+6	; 0x06
     254:	24 0f       	add	r18, r20
     256:	35 1f       	adc	r19, r21
     258:	fc 01       	movw	r30, r24
     25a:	33 83       	std	Z+3, r19	; 0x03
     25c:	22 83       	std	Z+2, r18	; 0x02
                                                  (sizeOfBuffer - 1));
                startOfCbuffObjs->inPointer  = buffer;
     25e:	80 91 00 01 	lds	r24, 0x0100
     262:	90 91 01 01 	lds	r25, 0x0101
     266:	2d 81       	ldd	r18, Y+5	; 0x05
     268:	3e 81       	ldd	r19, Y+6	; 0x06
     26a:	fc 01       	movw	r30, r24
     26c:	35 83       	std	Z+5, r19	; 0x05
     26e:	24 83       	std	Z+4, r18	; 0x04
                startOfCbuffObjs->outPointer = buffer;
     270:	80 91 00 01 	lds	r24, 0x0100
     274:	90 91 01 01 	lds	r25, 0x0101
     278:	2d 81       	ldd	r18, Y+5	; 0x05
     27a:	3e 81       	ldd	r19, Y+6	; 0x06
     27c:	fc 01       	movw	r30, r24
     27e:	37 83       	std	Z+7, r19	; 0x07
     280:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
                startOfCbuffObjs->localFlag = 0x00;
     282:	80 91 00 01 	lds	r24, 0x0100
     286:	90 91 01 01 	lds	r25, 0x0101
     28a:	fc 01       	movw	r30, r24
     28c:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
                startOfCbuffObjs->localFlag |= CBUFF_EMPTY;
     28e:	80 91 00 01 	lds	r24, 0x0100
     292:	90 91 01 01 	lds	r25, 0x0101
     296:	20 91 00 01 	lds	r18, 0x0100
     29a:	30 91 01 01 	lds	r19, 0x0101
     29e:	f9 01       	movw	r30, r18
     2a0:	22 85       	ldd	r18, Z+10	; 0x0a
     2a2:	20 64       	ori	r18, 0x40	; 64
     2a4:	fc 01       	movw	r30, r24
     2a6:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Ensure we point to next buffer     */
                                        /* object                             */
                startOfCbuffObjs->nextCircBufferObj = localCircBufferObj;
     2a8:	80 91 00 01 	lds	r24, 0x0100
     2ac:	90 91 01 01 	lds	r25, 0x0101
     2b0:	2b 81       	ldd	r18, Y+3	; 0x03
     2b2:	3c 81       	ldd	r19, Y+4	; 0x04
     2b4:	fc 01       	movw	r30, r24
     2b6:	34 87       	std	Z+12, r19	; 0x0c
     2b8:	23 87       	std	Z+11, r18	; 0x0b
                                        /* Find a free cbuff number for this  */
                                        /* buffer                             */
                                        /* Cbuff Number '1' is assigned, so   */
                                        /* start looking from '2' for a free  */
                                        /* number                             */
                circBuffNum <<= 1;
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	9a 81       	ldd	r25, Y+2	; 0x02
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
                
                do
                {
                    if (!(activeCbuffObjs & circBuffNum))
     2c6:	20 91 02 01 	lds	r18, 0x0102
     2ca:	30 91 03 01 	lds	r19, 0x0103
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	9a 81       	ldd	r25, Y+2	; 0x02
     2d2:	82 23       	and	r24, r18
     2d4:	93 23       	and	r25, r19
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	e9 f4       	brne	.+58     	; 0x314 <cbuffCreate+0x240>
                    {
                                        /* Assign the buffer number           */
                        activeCbuffObjs |= circBuffNum;
     2da:	20 91 02 01 	lds	r18, 0x0102
     2de:	30 91 03 01 	lds	r19, 0x0103
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	82 2b       	or	r24, r18
     2e8:	93 2b       	or	r25, r19
     2ea:	90 93 03 01 	sts	0x0103, r25
     2ee:	80 93 02 01 	sts	0x0102, r24
                        startOfCbuffObjs->bufferNumber = circBuffNum;
     2f2:	80 91 00 01 	lds	r24, 0x0100
     2f6:	90 91 01 01 	lds	r25, 0x0101
     2fa:	29 81       	ldd	r18, Y+1	; 0x01
     2fc:	3a 81       	ldd	r19, Y+2	; 0x02
     2fe:	fc 01       	movw	r30, r24
     300:	31 87       	std	Z+9, r19	; 0x09
     302:	20 87       	std	Z+8, r18	; 0x08
                        return startOfCbuffObjs->bufferNumber;
     304:	80 91 00 01 	lds	r24, 0x0100
     308:	90 91 01 01 	lds	r25, 0x0101
     30c:	fc 01       	movw	r30, r24
     30e:	80 85       	ldd	r24, Z+8	; 0x08
     310:	91 85       	ldd	r25, Z+9	; 0x09
     312:	0c c0       	rjmp	.+24     	; 0x32c <cbuffCreate+0x258>
                    }
                                        /* That wasn't free; try next bit     */
                    circBuffNum <<= 1;
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	89 83       	std	Y+1, r24	; 0x01
                                        /* Mask just in case unsigned int is  */
                                        /* bigger than 16-bits                */
                    circBuffNum &= 0xFFFF;
                } while(circBuffNum != 0x0000);
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	9a 81       	ldd	r25, Y+2	; 0x02
     324:	00 97       	sbiw	r24, 0x00	; 0
     326:	79 f6       	brne	.-98     	; 0x2c6 <cbuffCreate+0x1f2>
            }
        }
	}
                                        /* If buffer allocation failed,       */
                                        /* return 0 to callee                 */
    return 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
}
     32c:	2a 96       	adiw	r28, 0x0a	; 10
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <cbuffDestroy>:
* -# Destroying a buffer object does not delete the buffer's content, nor free
*   the associated CBUFFOBJ memory used
* -# An open buffer cannot be destroyed. Such a case returns a FAIL
*******************************************************************************/
unsigned char cbuffDestroy(CBUFFNUM bufferNumber)
{
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <cbuffDestroy+0x6>
     344:	00 d0       	rcall	.+0      	; 0x346 <cbuffDestroy+0x8>
     346:	00 d0       	rcall	.+0      	; 0x348 <cbuffDestroy+0xa>
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	9e 83       	std	Y+6, r25	; 0x06
     34e:	8d 83       	std	Y+5, r24	; 0x05
    CBUFFOBJ * localCircBufferObj;
    CBUFFOBJ * previousCircBufferObj;
                                        /* Make sure there is something to    */
                                        /* remove                             */
    if (startOfCbuffObjs != (CBUFFOBJ *) 0)
     350:	80 91 00 01 	lds	r24, 0x0100
     354:	90 91 01 01 	lds	r25, 0x0101
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	09 f4       	brne	.+2      	; 0x35e <cbuffDestroy+0x20>
     35c:	75 c0       	rjmp	.+234    	; 0x448 <cbuffDestroy+0x10a>
    {
                                        /* Check if first object is the one   */
                                        /* we are looking for                 */
        if (startOfCbuffObjs->bufferNumber == bufferNumber)
     35e:	80 91 00 01 	lds	r24, 0x0100
     362:	90 91 01 01 	lds	r25, 0x0101
     366:	fc 01       	movw	r30, r24
     368:	20 85       	ldd	r18, Z+8	; 0x08
     36a:	31 85       	ldd	r19, Z+9	; 0x09
     36c:	8d 81       	ldd	r24, Y+5	; 0x05
     36e:	9e 81       	ldd	r25, Y+6	; 0x06
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	e1 f4       	brne	.+56     	; 0x3ae <cbuffDestroy+0x70>
        {
                                        /* Copy where this object is pointing */
                                        /* to into startOfCbuffObjs           */
            startOfCbuffObjs = startOfCbuffObjs->nextCircBufferObj;
     376:	80 91 00 01 	lds	r24, 0x0100
     37a:	90 91 01 01 	lds	r25, 0x0101
     37e:	fc 01       	movw	r30, r24
     380:	83 85       	ldd	r24, Z+11	; 0x0b
     382:	94 85       	ldd	r25, Z+12	; 0x0c
     384:	90 93 01 01 	sts	0x0101, r25
     388:	80 93 00 01 	sts	0x0100, r24
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
            activeCbuffObjs &= ~bufferNumber;
     38c:	8d 81       	ldd	r24, Y+5	; 0x05
     38e:	9e 81       	ldd	r25, Y+6	; 0x06
     390:	9c 01       	movw	r18, r24
     392:	20 95       	com	r18
     394:	30 95       	com	r19
     396:	80 91 02 01 	lds	r24, 0x0102
     39a:	90 91 03 01 	lds	r25, 0x0103
     39e:	82 23       	and	r24, r18
     3a0:	93 23       	and	r25, r19
     3a2:	90 93 03 01 	sts	0x0103, r25
     3a6:	80 93 02 01 	sts	0x0102, r24
                                        /* Destroyed the desired object       */
            return CBUFF_DESTROY_OK;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	4e c0       	rjmp	.+156    	; 0x44a <cbuffDestroy+0x10c>
        }
                                        /* Otherwise loop through all objects */
                                        /* if there are some                  */
        else if (startOfCbuffObjs->nextCircBufferObj != (CBUFFOBJ *) 0)
     3ae:	80 91 00 01 	lds	r24, 0x0100
     3b2:	90 91 01 01 	lds	r25, 0x0101
     3b6:	fc 01       	movw	r30, r24
     3b8:	83 85       	ldd	r24, Z+11	; 0x0b
     3ba:	94 85       	ldd	r25, Z+12	; 0x0c
     3bc:	00 97       	sbiw	r24, 0x00	; 0
     3be:	09 f4       	brne	.+2      	; 0x3c2 <cbuffDestroy+0x84>
     3c0:	43 c0       	rjmp	.+134    	; 0x448 <cbuffDestroy+0x10a>
        {
                                        /* Keep a copy of previous object     */
                                        /* pointer                            */
            previousCircBufferObj = startOfCbuffObjs;
     3c2:	80 91 00 01 	lds	r24, 0x0100
     3c6:	90 91 01 01 	lds	r25, 0x0101
     3ca:	9c 83       	std	Y+4, r25	; 0x04
     3cc:	8b 83       	std	Y+3, r24	; 0x03
                                        /* Get next object in the list        */
            localCircBufferObj = startOfCbuffObjs->nextCircBufferObj;
     3ce:	80 91 00 01 	lds	r24, 0x0100
     3d2:	90 91 01 01 	lds	r25, 0x0101
     3d6:	fc 01       	movw	r30, r24
     3d8:	83 85       	ldd	r24, Z+11	; 0x0b
     3da:	94 85       	ldd	r25, Z+12	; 0x0c
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
                                        /* Loop through each item and check   */
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 85       	ldd	r18, Z+8	; 0x08
     3e8:	31 85       	ldd	r19, Z+9	; 0x09
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	9e 81       	ldd	r25, Y+6	; 0x06
     3ee:	28 17       	cp	r18, r24
     3f0:	39 07       	cpc	r19, r25
     3f2:	d9 f4       	brne	.+54     	; 0x42a <cbuffDestroy+0xec>
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
                                          localCircBufferObj->nextCircBufferObj;
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	fc 01       	movw	r30, r24
     3fa:	23 85       	ldd	r18, Z+11	; 0x0b
     3fc:	34 85       	ldd	r19, Z+12	; 0x0c
            do
            {
                if (localCircBufferObj->bufferNumber == bufferNumber)
                {
                                        /* Remove this buffer from list       */
                    previousCircBufferObj->nextCircBufferObj = 
     3fe:	8b 81       	ldd	r24, Y+3	; 0x03
     400:	9c 81       	ldd	r25, Y+4	; 0x04
     402:	fc 01       	movw	r30, r24
     404:	34 87       	std	Z+12, r19	; 0x0c
     406:	23 87       	std	Z+11, r18	; 0x0b
                                          localCircBufferObj->nextCircBufferObj;
                                        /* Clear this buffers bit in the      */
                                        /* active buffers variable            */
                    activeCbuffObjs &= ~bufferNumber;
     408:	8d 81       	ldd	r24, Y+5	; 0x05
     40a:	9e 81       	ldd	r25, Y+6	; 0x06
     40c:	9c 01       	movw	r18, r24
     40e:	20 95       	com	r18
     410:	30 95       	com	r19
     412:	80 91 02 01 	lds	r24, 0x0102
     416:	90 91 03 01 	lds	r25, 0x0103
     41a:	82 23       	and	r24, r18
     41c:	93 23       	and	r25, r19
     41e:	90 93 03 01 	sts	0x0103, r25
     422:	80 93 02 01 	sts	0x0102, r24
                                        /* Destroyed the desired object       */
                    return CBUFF_DESTROY_OK;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	10 c0       	rjmp	.+32     	; 0x44a <cbuffDestroy+0x10c>
                }
                else
                {
                                        /* That wasn't it                     */
                                        /* Move to next object in the list    */
                    previousCircBufferObj = localCircBufferObj;
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	9a 81       	ldd	r25, Y+2	; 0x02
     42e:	9c 83       	std	Y+4, r25	; 0x04
     430:	8b 83       	std	Y+3, r24	; 0x03
                    localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	fc 01       	movw	r30, r24
     438:	83 85       	ldd	r24, Z+11	; 0x0b
     43a:	94 85       	ldd	r25, Z+12	; 0x0c
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	89 83       	std	Y+1, r24	; 0x01
                }
            } while (localCircBufferObj != (CBUFFOBJ *) 0);
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	00 97       	sbiw	r24, 0x00	; 0
     446:	61 f6       	brne	.-104    	; 0x3e0 <cbuffDestroy+0xa2>
        }
        
    }
                                        /* Couldn't find the desired object   */
    return CBUFF_DESTROY_FAIL;
     448:	80 e0       	ldi	r24, 0x00	; 0
}
     44a:	26 96       	adiw	r28, 0x06	; 6
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	cf 91       	pop	r28
     458:	df 91       	pop	r29
     45a:	08 95       	ret

0000045c <cbuffOpen>:
* \note
* -# Caller must have created (cbuffCreate()) at least one circular buffer
*    object before calling this function
*******************************************************************************/
HCBUFF cbuffOpen(CBUFFNUM bufferNumber)
{
     45c:	df 93       	push	r29
     45e:	cf 93       	push	r28
     460:	00 d0       	rcall	.+0      	; 0x462 <cbuffOpen+0x6>
     462:	00 d0       	rcall	.+0      	; 0x464 <cbuffOpen+0x8>
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	9c 83       	std	Y+4, r25	; 0x04
     46a:	8b 83       	std	Y+3, r24	; 0x03
	CBUFFOBJ * localCircBufferObj;

                                        /* Check that a CBUFFNUM object    */
                                        /* exists with bufferNumber           */
    localCircBufferObj = startOfCbuffObjs;
     46c:	80 91 00 01 	lds	r24, 0x0100
     470:	90 91 01 01 	lds	r25, 0x0101
     474:	9a 83       	std	Y+2, r25	; 0x02
     476:	89 83       	std	Y+1, r24	; 0x01

    do
    {
	    if (localCircBufferObj->bufferNumber == bufferNumber)
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	fc 01       	movw	r30, r24
     47e:	20 85       	ldd	r18, Z+8	; 0x08
     480:	31 85       	ldd	r19, Z+9	; 0x09
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	9c 81       	ldd	r25, Y+4	; 0x04
     486:	28 17       	cp	r18, r24
     488:	39 07       	cpc	r19, r25
     48a:	d1 f4       	brne	.+52     	; 0x4c0 <cbuffOpen+0x64>
	    {
    	                                /* Check buffer is not already open   */
            if (!(localCircBufferObj->localFlag & CBUFF_OPEN))
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
     490:	fc 01       	movw	r30, r24
     492:	82 85       	ldd	r24, Z+10	; 0x0a
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	80 72       	andi	r24, 0x20	; 32
     49a:	90 70       	andi	r25, 0x00	; 0
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	69 f4       	brne	.+26     	; 0x4ba <cbuffOpen+0x5e>
            {
                                        /* Note that it is now in use         */
                localCircBufferObj->localFlag |= CBUFF_OPEN;
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	fc 01       	movw	r30, r24
     4a6:	82 85       	ldd	r24, Z+10	; 0x0a
     4a8:	28 2f       	mov	r18, r24
     4aa:	20 62       	ori	r18, 0x20	; 32
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	fc 01       	movw	r30, r24
     4b2:	22 87       	std	Z+10, r18	; 0x0a
    	                                /* Return handle to it                */
    	        return localCircBufferObj;
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	10 c0       	rjmp	.+32     	; 0x4da <cbuffOpen+0x7e>
    	    }
    	                                /* If buffer is already open, return  */
    	                                /* NULL handle pointer                */
    	    else
    	    {
        	    return (CBUFFOBJ *) 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0d c0       	rjmp	.+26     	; 0x4da <cbuffOpen+0x7e>
        	}
    	}
    	else
    	{
        	localCircBufferObj = localCircBufferObj->nextCircBufferObj;
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	fc 01       	movw	r30, r24
     4c6:	83 85       	ldd	r24, Z+11	; 0x0b
     4c8:	94 85       	ldd	r25, Z+12	; 0x0c
     4ca:	9a 83       	std	Y+2, r25	; 0x02
     4cc:	89 83       	std	Y+1, r24	; 0x01
        }
	} while (localCircBufferObj != (CBUFFOBJ *) 0);
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	89 f6       	brne	.-94     	; 0x478 <cbuffOpen+0x1c>

    	                                /* Return handle to NULL otherwise    */
    return (CBUFFOBJ *) 0;
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
}
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <cbuffClose>:
* \note
* -# Caller must have 'allocated' and opened at least one circular buffer object
*    before calling this function
*******************************************************************************/
CBUFFNUM cbuffClose(HCBUFF hCircBuffer)
{
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <cbuffClose+0x6>
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
    	                                /* Check buffer is actually open      */
    if (hCircBuffer->localFlag & CBUFF_OPEN)
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	fc 01       	movw	r30, r24
     4fc:	82 85       	ldd	r24, Z+10	; 0x0a
     4fe:	88 2f       	mov	r24, r24
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	80 72       	andi	r24, 0x20	; 32
     504:	90 70       	andi	r25, 0x00	; 0
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	81 f0       	breq	.+32     	; 0x52a <__stack+0x2b>
    {
    	                                /* Note that this buffer object is    */
    	                                /* closed                             */
        hCircBuffer->localFlag &= ~CBUFF_OPEN;
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	9a 81       	ldd	r25, Y+2	; 0x02
     50e:	fc 01       	movw	r30, r24
     510:	82 85       	ldd	r24, Z+10	; 0x0a
     512:	28 2f       	mov	r18, r24
     514:	2f 7d       	andi	r18, 0xDF	; 223
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	fc 01       	movw	r30, r24
     51c:	22 87       	std	Z+10, r18	; 0x0a
                                        /* Return buffer object's buffer      */
                                        /* number                             */
        return hCircBuffer->bufferNumber;
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	fc 01       	movw	r30, r24
     524:	80 85       	ldd	r24, Z+8	; 0x08
     526:	91 85       	ldd	r25, Z+9	; 0x09
     528:	02 c0       	rjmp	.+4      	; 0x52e <__stack+0x2f>
    }
                                        /* Otherwise return 0 to say that     */
                                        /* buffer object wasn't open          */
    else
    {
        return (CBUFFNUM) 0;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	08 95       	ret

00000538 <cbuffPutByte>:
* -# cbuffOpen() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned char cbuffPutByte(HCBUFF hCircBuffer,
                           CBUFF  data)
{
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	00 d0       	rcall	.+0      	; 0x53e <cbuffPutByte+0x6>
     53e:	0f 92       	push	r0
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
     54e:	fc 01       	movw	r30, r24
     550:	82 85       	ldd	r24, Z+10	; 0x0a
     552:	88 23       	and	r24, r24
     554:	14 f4       	brge	.+4      	; 0x55a <cbuffPutByte+0x22>
    {
        return CBUFF_PUT_FAIL;
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	4e c0       	rjmp	.+156    	; 0x5f6 <cbuffPutByte+0xbe>
    }

    *hCircBuffer->inPointer = data;     /* Put data in buffer                 */
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	9a 81       	ldd	r25, Y+2	; 0x02
     55e:	fc 01       	movw	r30, r24
     560:	84 81       	ldd	r24, Z+4	; 0x04
     562:	95 81       	ldd	r25, Z+5	; 0x05
     564:	2b 81       	ldd	r18, Y+3	; 0x03
     566:	fc 01       	movw	r30, r24
     568:	20 83       	st	Z, r18

    hCircBuffer->inPointer++;           /* Increment pointer                  */
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	fc 01       	movw	r30, r24
     570:	84 81       	ldd	r24, Z+4	; 0x04
     572:	95 81       	ldd	r25, Z+5	; 0x05
     574:	9c 01       	movw	r18, r24
     576:	2f 5f       	subi	r18, 0xFF	; 255
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	fc 01       	movw	r30, r24
     580:	35 83       	std	Z+5, r19	; 0x05
     582:	24 83       	std	Z+4, r18	; 0x04

                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	fc 01       	movw	r30, r24
     58a:	82 85       	ldd	r24, Z+10	; 0x0a
     58c:	28 2f       	mov	r18, r24
     58e:	2f 7b       	andi	r18, 0xBF	; 191
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	fc 01       	movw	r30, r24
     596:	22 87       	std	Z+10, r18	; 0x0a

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
    if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	fc 01       	movw	r30, r24
     59e:	24 81       	ldd	r18, Z+4	; 0x04
     5a0:	35 81       	ldd	r19, Z+5	; 0x05
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	82 17       	cp	r24, r18
     5ae:	93 07       	cpc	r25, r19
     5b0:	50 f4       	brcc	.+20     	; 0x5c6 <cbuffPutByte+0x8e>
    {
        hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 81       	ld	r18, Z
     5ba:	31 81       	ldd	r19, Z+1	; 0x01
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	9a 81       	ldd	r25, Y+2	; 0x02
     5c0:	fc 01       	movw	r30, r24
     5c2:	35 83       	std	Z+5, r19	; 0x05
     5c4:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	fc 01       	movw	r30, r24
     5cc:	24 81       	ldd	r18, Z+4	; 0x04
     5ce:	35 81       	ldd	r19, Z+5	; 0x05
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	fc 01       	movw	r30, r24
     5d6:	86 81       	ldd	r24, Z+6	; 0x06
     5d8:	97 81       	ldd	r25, Z+7	; 0x07
     5da:	28 17       	cp	r18, r24
     5dc:	39 07       	cpc	r19, r25
     5de:	51 f4       	brne	.+20     	; 0x5f4 <cbuffPutByte+0xbc>
    {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
        hCircBuffer->localFlag |= CBUFF_FULL;
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	fc 01       	movw	r30, r24
     5e6:	82 85       	ldd	r24, Z+10	; 0x0a
     5e8:	28 2f       	mov	r18, r24
     5ea:	20 68       	ori	r18, 0x80	; 128
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	9a 81       	ldd	r25, Y+2	; 0x02
     5f0:	fc 01       	movw	r30, r24
     5f2:	22 87       	std	Z+10, r18	; 0x0a
    }

    return CBUFF_PUT_OK;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
}
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	08 95       	ret

00000602 <cbuffGetSpace>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetSpace(HCBUFF hCircBuffer)
{
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	00 d0       	rcall	.+0      	; 0x608 <cbuffGetSpace+0x6>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	89 83       	std	Y+1, r24	; 0x01
#endif

                                        /* If CBUFF_FULL is              */
                                        /* set, then there is no space in     */
                                        /* buffer; simply return 0            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	fc 01       	movw	r30, r24
     616:	82 85       	ldd	r24, Z+10	; 0x0a
     618:	88 23       	and	r24, r24
     61a:	1c f4       	brge	.+6      	; 0x622 <cbuffGetSpace+0x20>
    {
        return 0;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	5a c0       	rjmp	.+180    	; 0x6d6 <cbuffGetSpace+0xd4>
    }
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	fc 01       	movw	r30, r24
     628:	82 85       	ldd	r24, Z+10	; 0x0a
     62a:	88 2f       	mov	r24, r24
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	80 74       	andi	r24, 0x40	; 64
     630:	90 70       	andi	r25, 0x00	; 0
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	89 f0       	breq	.+34     	; 0x658 <cbuffGetSpace+0x56>
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	fc 01       	movw	r30, r24
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	93 81       	ldd	r25, Z+3	; 0x03
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	9c 01       	movw	r18, r24
                                hCircBuffer->startOfBuffer);
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* If CBUFF_EMPTY is set, then   */
                                        /* simply return size of buffer       */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
#if 1
        return (unsigned int) ((hCircBuffer->endOfBuffer + sizeof(CBUFF)) -
     64e:	a9 01       	movw	r20, r18
     650:	48 1b       	sub	r20, r24
     652:	59 0b       	sbc	r21, r25
     654:	ca 01       	movw	r24, r20
     656:	3f c0       	rjmp	.+126    	; 0x6d6 <cbuffGetSpace+0xd4>
                                        /* If inPointer is larger than the    */
                                        /* outPointer in physical value, the  */
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	fc 01       	movw	r30, r24
     65e:	24 81       	ldd	r18, Z+4	; 0x04
     660:	35 81       	ldd	r19, Z+5	; 0x05
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	fc 01       	movw	r30, r24
     668:	86 81       	ldd	r24, Z+6	; 0x06
     66a:	97 81       	ldd	r25, Z+7	; 0x07
     66c:	82 17       	cp	r24, r18
     66e:	93 07       	cpc	r25, r19
     670:	18 f5       	brcc	.+70     	; 0x6b8 <cbuffGetSpace+0xb6>
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	fc 01       	movw	r30, r24
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	fc 01       	movw	r30, r24
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     688:	a9 01       	movw	r20, r18
     68a:	48 1b       	sub	r20, r24
     68c:	59 0b       	sbc	r21, r25
     68e:	ca 01       	movw	r24, r20
     690:	9c 01       	movw	r18, r24
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
                                 hCircBuffer->outPointer));
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	fc 01       	movw	r30, r24
     698:	86 81       	ldd	r24, Z+6	; 0x06
     69a:	97 81       	ldd	r25, Z+7	; 0x07
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
                                 hCircBuffer->startOfBuffer + sizeof(CBUFF))
                              - (hCircBuffer->inPointer -
     69c:	ac 01       	movw	r20, r24
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	fc 01       	movw	r30, r24
     6a4:	84 81       	ldd	r24, Z+4	; 0x04
     6a6:	95 81       	ldd	r25, Z+5	; 0x05
     6a8:	ba 01       	movw	r22, r20
     6aa:	68 1b       	sub	r22, r24
     6ac:	79 0b       	sbc	r23, r25
     6ae:	cb 01       	movw	r24, r22
                                        /* remaining buffer space is the      */
                                        /* (endOfBuffer - inPointer + 1) +    */
                                        /* (outPointer - startOfBuffer + 1)   */
    if (hCircBuffer->inPointer > hCircBuffer->outPointer)
    {
        return (unsigned int) ( (hCircBuffer->endOfBuffer -
     6b0:	82 0f       	add	r24, r18
     6b2:	93 1f       	adc	r25, r19
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <cbuffGetSpace+0xd4>
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	fc 01       	movw	r30, r24
     6be:	86 81       	ldd	r24, Z+6	; 0x06
     6c0:	97 81       	ldd	r25, Z+7	; 0x07
     6c2:	9c 01       	movw	r18, r24
                               hCircBuffer->inPointer);
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	fc 01       	movw	r30, r24
     6ca:	84 81       	ldd	r24, Z+4	; 0x04
     6cc:	95 81       	ldd	r25, Z+5	; 0x05
                                        /* remaining buffer space is the      */
                                        /* outPointer - inPointer        */
    else /*if (hCircBuffer->inPointer < hCircBuffer->outPointer)*/
    {
#if 1
        return (unsigned int) (hCircBuffer->outPointer -
     6ce:	a9 01       	movw	r20, r18
     6d0:	48 1b       	sub	r20, r24
     6d2:	59 0b       	sbc	r21, r25
     6d4:	ca 01       	movw	r24, r20
#endif
#if 0
        return (localOutPointer - localInPointer);
#endif
    }
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	cf 91       	pop	r28
     6dc:	df 91       	pop	r29
     6de:	08 95       	ret

000006e0 <cbuffGetFill>:
* \note
* -# openCircBuffer() must have been successfully called before using this
*    function
*******************************************************************************/
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <cbuffGetFill+0xa>
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	9a 83       	std	Y+2, r25	; 0x02
     6f0:	89 83       	std	Y+1, r24	; 0x01
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	fc 01       	movw	r30, r24
     6f8:	82 81       	ldd	r24, Z+2	; 0x02
     6fa:	93 81       	ldd	r25, Z+3	; 0x03
     6fc:	9c 01       	movw	r18, r24
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	fc 01       	movw	r30, r24
     704:	80 81       	ld	r24, Z
     706:	91 81       	ldd	r25, Z+1	; 0x01
     708:	a9 01       	movw	r20, r18
     70a:	48 1b       	sub	r20, r24
     70c:	59 0b       	sbc	r21, r25
     70e:	ca 01       	movw	r24, r20
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
     710:	8c 01       	movw	r16, r24
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
     71a:	f8 01       	movw	r30, r16
     71c:	e8 1b       	sub	r30, r24
     71e:	f9 0b       	sbc	r31, r25
     720:	cf 01       	movw	r24, r30
unsigned int cbuffGetFill(HCBUFF hCircBuffer)
{
    /* Simply calculate buffer size and subtract value returned by cbuffGetSpace
    *
    */
    return ( (hCircBuffer->endOfBuffer - hCircBuffer->startOfBuffer +
     722:	01 96       	adiw	r24, 0x01	; 1
              sizeof(CBUFF)) - cbuffGetSpace(hCircBuffer) );
}
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <cbuffClearBuffer>:
* \todo Consider renaming this function to 'cbuffResetBuffer()' and using this
*       function name for the function to acutally clear all of the data in the
*       buffer.
*******************************************************************************/
void cbuffClearBuffer(HCBUFF hCircBuffer)
{
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	00 d0       	rcall	.+0      	; 0x738 <cbuffClearBuffer+0x6>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	9a 83       	std	Y+2, r25	; 0x02
     73e:	89 83       	std	Y+1, r24	; 0x01
                                        /* Reset buffer pointers              */
    hCircBuffer->inPointer  = hCircBuffer->startOfBuffer;
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	fc 01       	movw	r30, r24
     746:	20 81       	ld	r18, Z
     748:	31 81       	ldd	r19, Z+1	; 0x01
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	fc 01       	movw	r30, r24
     750:	35 83       	std	Z+5, r19	; 0x05
     752:	24 83       	std	Z+4, r18	; 0x04
    hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	fc 01       	movw	r30, r24
     75a:	20 81       	ld	r18, Z
     75c:	31 81       	ldd	r19, Z+1	; 0x01
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	fc 01       	movw	r30, r24
     764:	37 83       	std	Z+7, r19	; 0x07
     766:	26 83       	std	Z+6, r18	; 0x06
                                        /* Clear all flags                    */
    hCircBuffer->localFlag  = 0x00;
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	9a 81       	ldd	r25, Y+2	; 0x02
     76c:	fc 01       	movw	r30, r24
     76e:	12 86       	std	Z+10, r1	; 0x0a
                                        /* Set buffer empty flag              */
    hCircBuffer->localFlag |= CBUFF_EMPTY;
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	9a 81       	ldd	r25, Y+2	; 0x02
     774:	fc 01       	movw	r30, r24
     776:	82 85       	ldd	r24, Z+10	; 0x0a
     778:	28 2f       	mov	r18, r24
     77a:	20 64       	ori	r18, 0x40	; 64
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	9a 81       	ldd	r25, Y+2	; 0x02
     780:	fc 01       	movw	r30, r24
     782:	22 87       	std	Z+10, r18	; 0x0a
}
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	08 95       	ret

0000078e <cbuffGetByte>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffGetByte(HCBUFF       hCircBuffer,
                           CBUFF      * data)
{
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	00 d0       	rcall	.+0      	; 0x794 <cbuffGetByte+0x6>
     794:	00 d0       	rcall	.+0      	; 0x796 <cbuffGetByte+0x8>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	7c 83       	std	Y+4, r23	; 0x04
     7a0:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	fc 01       	movw	r30, r24
     7a8:	82 85       	ldd	r24, Z+10	; 0x0a
     7aa:	88 2f       	mov	r24, r24
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	80 74       	andi	r24, 0x40	; 64
     7b0:	90 70       	andi	r25, 0x00	; 0
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	11 f0       	breq	.+4      	; 0x7ba <cbuffGetByte+0x2c>
    {
        return CBUFF_GET_FAIL;
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	51 c0       	rjmp	.+162    	; 0x85c <cbuffGetByte+0xce>
    }
                                        /* Read requested byte                */
    *data = *hCircBuffer->outPointer;
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	fc 01       	movw	r30, r24
     7c0:	86 81       	ldd	r24, Z+6	; 0x06
     7c2:	97 81       	ldd	r25, Z+7	; 0x07
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 81       	ld	r18, Z
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	9c 81       	ldd	r25, Y+4	; 0x04
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
    hCircBuffer->outPointer++;
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	9a 81       	ldd	r25, Y+2	; 0x02
     7d4:	fc 01       	movw	r30, r24
     7d6:	86 81       	ldd	r24, Z+6	; 0x06
     7d8:	97 81       	ldd	r25, Z+7	; 0x07
     7da:	9c 01       	movw	r18, r24
     7dc:	2f 5f       	subi	r18, 0xFF	; 255
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	fc 01       	movw	r30, r24
     7e6:	37 83       	std	Z+7, r19	; 0x07
     7e8:	26 83       	std	Z+6, r18	; 0x06

                                        /* Implement wrap around              */
    if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	26 81       	ldd	r18, Z+6	; 0x06
     7f2:	37 81       	ldd	r19, Z+7	; 0x07
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	fc 01       	movw	r30, r24
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	93 81       	ldd	r25, Z+3	; 0x03
     7fe:	82 17       	cp	r24, r18
     800:	93 07       	cpc	r25, r19
     802:	50 f4       	brcc	.+20     	; 0x818 <cbuffGetByte+0x8a>
    {
        hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	fc 01       	movw	r30, r24
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	fc 01       	movw	r30, r24
     814:	37 83       	std	Z+7, r19	; 0x07
     816:	26 83       	std	Z+6, r18	; 0x06
    }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	9a 81       	ldd	r25, Y+2	; 0x02
     81c:	fc 01       	movw	r30, r24
     81e:	26 81       	ldd	r18, Z+6	; 0x06
     820:	37 81       	ldd	r19, Z+7	; 0x07
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	9a 81       	ldd	r25, Y+2	; 0x02
     826:	fc 01       	movw	r30, r24
     828:	84 81       	ldd	r24, Z+4	; 0x04
     82a:	95 81       	ldd	r25, Z+5	; 0x05
     82c:	28 17       	cp	r18, r24
     82e:	39 07       	cpc	r19, r25
     830:	51 f4       	brne	.+20     	; 0x846 <cbuffGetByte+0xb8>
    {
                                        /* Note that the buffer is empty      */
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	fc 01       	movw	r30, r24
     838:	82 85       	ldd	r24, Z+10	; 0x0a
     83a:	28 2f       	mov	r18, r24
     83c:	20 64       	ori	r18, 0x40	; 64
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	9a 81       	ldd	r25, Y+2	; 0x02
     842:	fc 01       	movw	r30, r24
     844:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	fc 01       	movw	r30, r24
     84c:	82 85       	ldd	r24, Z+10	; 0x0a
     84e:	28 2f       	mov	r18, r24
     850:	2f 77       	andi	r18, 0x7F	; 127
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	fc 01       	movw	r30, r24
     858:	22 87       	std	Z+10, r18	; 0x0a

    return CBUFF_GET_OK;
     85a:	81 e0       	ldi	r24, 0x01	; 1
}
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	08 95       	ret

0000086a <cbuffPeekTail>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekTail(HCBUFF   hCircBuffer,
                           CBUFF  * data)
{
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	00 d0       	rcall	.+0      	; 0x870 <cbuffPeekTail+0x6>
     870:	00 d0       	rcall	.+0      	; 0x872 <cbuffPeekTail+0x8>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	9a 83       	std	Y+2, r25	; 0x02
     878:	89 83       	std	Y+1, r24	; 0x01
     87a:	7c 83       	std	Y+4, r23	; 0x04
     87c:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	fc 01       	movw	r30, r24
     884:	82 85       	ldd	r24, Z+10	; 0x0a
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	80 74       	andi	r24, 0x40	; 64
     88c:	90 70       	andi	r25, 0x00	; 0
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	69 f4       	brne	.+26     	; 0x8ac <cbuffPeekTail+0x42>
    {
                                        /* Return head value in data          */
        *data = *hCircBuffer->outPointer;
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	fc 01       	movw	r30, r24
     898:	86 81       	ldd	r24, Z+6	; 0x06
     89a:	97 81       	ldd	r25, Z+7	; 0x07
     89c:	fc 01       	movw	r30, r24
     89e:	20 81       	ld	r18, Z
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
        return CBUFF_GET_OK;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <cbuffPeekTail+0x44>
    }
    else
    {
        return CBUFF_GET_FAIL;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	08 95       	ret

000008bc <cbuffPeekHead>:
* \todo Check if *data doesn't need a const to prevent the function modifying 
* the pointer.
*******************************************************************************/
unsigned char cbuffPeekHead(HCBUFF   hCircBuffer,
                            CBUFF  * data)
{
     8bc:	df 93       	push	r29
     8be:	cf 93       	push	r28
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <cbuffPeekHead+0x6>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <cbuffPeekHead+0x8>
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	9a 83       	std	Y+2, r25	; 0x02
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	7c 83       	std	Y+4, r23	; 0x04
     8ce:	6b 83       	std	Y+3, r22	; 0x03
                                        /* Check buffer isn't empty           */
    if (!(hCircBuffer->localFlag & CBUFF_EMPTY))
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	9a 81       	ldd	r25, Y+2	; 0x02
     8d4:	fc 01       	movw	r30, r24
     8d6:	82 85       	ldd	r24, Z+10	; 0x0a
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	80 74       	andi	r24, 0x40	; 64
     8de:	90 70       	andi	r25, 0x00	; 0
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	39 f5       	brne	.+78     	; 0x932 <cbuffPeekHead+0x76>
    {
                                        /* If inPointer doesn't point to      */
                                        /* startOfBuffer, return value at     */
                                        /* (inPointer - 1)                    */
        if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	fc 01       	movw	r30, r24
     8ea:	24 81       	ldd	r18, Z+4	; 0x04
     8ec:	35 81       	ldd	r19, Z+5	; 0x05
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	28 17       	cp	r18, r24
     8fa:	39 07       	cpc	r19, r25
     8fc:	69 f0       	breq	.+26     	; 0x918 <cbuffPeekHead+0x5c>
        {
            *data = *(hCircBuffer->inPointer - sizeof(CBUFF));
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	fc 01       	movw	r30, r24
     904:	84 81       	ldd	r24, Z+4	; 0x04
     906:	95 81       	ldd	r25, Z+5	; 0x05
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	fc 01       	movw	r30, r24
     90c:	20 81       	ld	r18, Z
     90e:	8b 81       	ldd	r24, Y+3	; 0x03
     910:	9c 81       	ldd	r25, Y+4	; 0x04
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
     916:	0b c0       	rjmp	.+22     	; 0x92e <cbuffPeekHead+0x72>
        }
                                        /* Otherwise handle buffer wrap       */
                                        /* situation                          */
        else
        {
            *data = *hCircBuffer->endOfBuffer;
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	9a 81       	ldd	r25, Y+2	; 0x02
     91c:	fc 01       	movw	r30, r24
     91e:	82 81       	ldd	r24, Z+2	; 0x02
     920:	93 81       	ldd	r25, Z+3	; 0x03
     922:	fc 01       	movw	r30, r24
     924:	20 81       	ld	r18, Z
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	9c 81       	ldd	r25, Y+4	; 0x04
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
        }
        return CBUFF_GET_OK;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	01 c0       	rjmp	.+2      	; 0x934 <cbuffPeekHead+0x78>
    }
    else
    {
        return CBUFF_GET_FAIL;
     932:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	cf 91       	pop	r28
     93e:	df 91       	pop	r29
     940:	08 95       	ret

00000942 <cbuffUnputByte>:
*    buffer is now empty, this function will fail in its attempt
* -# The data itself is not removed; only the head pointer to the buffer is
*    moved back one position
*******************************************************************************/
unsigned char cbuffUnputByte(HCBUFF  hCircBuffer)
{
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	00 d0       	rcall	.+0      	; 0x948 <cbuffUnputByte+0x6>
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	9a 83       	std	Y+2, r25	; 0x02
     94e:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unput at    */
                                        /* all. If buffer is empty, do        */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	fc 01       	movw	r30, r24
     956:	82 85       	ldd	r24, Z+10	; 0x0a
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	80 74       	andi	r24, 0x40	; 64
     95e:	90 70       	andi	r25, 0x00	; 0
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	11 f0       	breq	.+4      	; 0x968 <cbuffUnputByte+0x26>
    {
        return 1;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	47 c0       	rjmp	.+142    	; 0x9f6 <cbuffUnputByte+0xb4>
    }
                                        /* unput the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->inPointer != hCircBuffer->startOfBuffer)
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	9a 81       	ldd	r25, Y+2	; 0x02
     96c:	fc 01       	movw	r30, r24
     96e:	24 81       	ldd	r18, Z+4	; 0x04
     970:	35 81       	ldd	r19, Z+5	; 0x05
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	fc 01       	movw	r30, r24
     978:	80 81       	ld	r24, Z
     97a:	91 81       	ldd	r25, Z+1	; 0x01
     97c:	28 17       	cp	r18, r24
     97e:	39 07       	cpc	r19, r25
     980:	71 f0       	breq	.+28     	; 0x99e <cbuffUnputByte+0x5c>
    {
        hCircBuffer->inPointer--;
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	fc 01       	movw	r30, r24
     988:	84 81       	ldd	r24, Z+4	; 0x04
     98a:	95 81       	ldd	r25, Z+5	; 0x05
     98c:	9c 01       	movw	r18, r24
     98e:	21 50       	subi	r18, 0x01	; 1
     990:	30 40       	sbci	r19, 0x00	; 0
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	fc 01       	movw	r30, r24
     998:	35 83       	std	Z+5, r19	; 0x05
     99a:	24 83       	std	Z+4, r18	; 0x04
     99c:	0a c0       	rjmp	.+20     	; 0x9b2 <cbuffUnputByte+0x70>
    }
                                        /* For boundary case implent wrap-    */
                                        /* around                             */
    else
    {
        hCircBuffer->inPointer = hCircBuffer->endOfBuffer;
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	fc 01       	movw	r30, r24
     9a4:	22 81       	ldd	r18, Z+2	; 0x02
     9a6:	33 81       	ldd	r19, Z+3	; 0x03
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	fc 01       	movw	r30, r24
     9ae:	35 83       	std	Z+5, r19	; 0x05
     9b0:	24 83       	std	Z+4, r18	; 0x04
    }
                                        /* Check if buffer is now empty       */
    if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	9a 81       	ldd	r25, Y+2	; 0x02
     9b6:	fc 01       	movw	r30, r24
     9b8:	24 81       	ldd	r18, Z+4	; 0x04
     9ba:	35 81       	ldd	r19, Z+5	; 0x05
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	fc 01       	movw	r30, r24
     9c2:	86 81       	ldd	r24, Z+6	; 0x06
     9c4:	97 81       	ldd	r25, Z+7	; 0x07
     9c6:	28 17       	cp	r18, r24
     9c8:	39 07       	cpc	r19, r25
     9ca:	51 f4       	brne	.+20     	; 0x9e0 <cbuffUnputByte+0x9e>
    {
        hCircBuffer->localFlag |= CBUFF_EMPTY;
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	fc 01       	movw	r30, r24
     9d2:	82 85       	ldd	r24, Z+10	; 0x0a
     9d4:	28 2f       	mov	r18, r24
     9d6:	20 64       	ori	r18, 0x40	; 64
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	9a 81       	ldd	r25, Y+2	; 0x02
     9dc:	fc 01       	movw	r30, r24
     9de:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not full  */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	fc 01       	movw	r30, r24
     9e6:	82 85       	ldd	r24, Z+10	; 0x0a
     9e8:	28 2f       	mov	r18, r24
     9ea:	2f 77       	andi	r18, 0x7F	; 127
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	9a 81       	ldd	r25, Y+2	; 0x02
     9f0:	fc 01       	movw	r30, r24
     9f2:	22 87       	std	Z+10, r18	; 0x0a

    return 0;
     9f4:	80 e0       	ldi	r24, 0x00	; 0
}
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	cf 91       	pop	r28
     9fc:	df 91       	pop	r29
     9fe:	08 95       	ret

00000a00 <cbuffUngetByte>:
*    values left over after a 'cbuffClearBuffer' will be 'ungot'. The buffer
*    can still be 'ungot' until the tail pointer gets back to the point
*    where it reaches the head pointer.
*******************************************************************************/
unsigned char  cbuffUngetByte(HCBUFF  hCircBuffer)
{
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	00 d0       	rcall	.+0      	; 0xa06 <cbuffUngetByte+0x6>
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we can unget at    */
                                        /* all. If buffer is full, do         */
                                        /* nothing                            */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	fc 01       	movw	r30, r24
     a14:	82 85       	ldd	r24, Z+10	; 0x0a
     a16:	88 23       	and	r24, r24
     a18:	14 f4       	brge	.+4      	; 0xa1e <cbuffUngetByte+0x1e>
    {
        return 1;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	47 c0       	rjmp	.+142    	; 0xaac <cbuffUngetByte+0xac>
    }
                                        /* unget the last byte - check first  */
                                        /* that pointer in not on start       */
                                        /* boundary                           */
    if (hCircBuffer->outPointer != hCircBuffer->startOfBuffer)
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	fc 01       	movw	r30, r24
     a24:	26 81       	ldd	r18, Z+6	; 0x06
     a26:	37 81       	ldd	r19, Z+7	; 0x07
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	fc 01       	movw	r30, r24
     a2e:	80 81       	ld	r24, Z
     a30:	91 81       	ldd	r25, Z+1	; 0x01
     a32:	28 17       	cp	r18, r24
     a34:	39 07       	cpc	r19, r25
     a36:	71 f0       	breq	.+28     	; 0xa54 <cbuffUngetByte+0x54>
    {
        hCircBuffer->outPointer--;
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	9a 81       	ldd	r25, Y+2	; 0x02
     a3c:	fc 01       	movw	r30, r24
     a3e:	86 81       	ldd	r24, Z+6	; 0x06
     a40:	97 81       	ldd	r25, Z+7	; 0x07
     a42:	9c 01       	movw	r18, r24
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	30 40       	sbci	r19, 0x00	; 0
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	fc 01       	movw	r30, r24
     a4e:	37 83       	std	Z+7, r19	; 0x07
     a50:	26 83       	std	Z+6, r18	; 0x06
     a52:	0a c0       	rjmp	.+20     	; 0xa68 <cbuffUngetByte+0x68>
    }
                                        /* For boundary case implementnt      */
                                        /* wraparound                         */
    else
    {
        hCircBuffer->outPointer = hCircBuffer->endOfBuffer;
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	fc 01       	movw	r30, r24
     a5a:	22 81       	ldd	r18, Z+2	; 0x02
     a5c:	33 81       	ldd	r19, Z+3	; 0x03
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	fc 01       	movw	r30, r24
     a64:	37 83       	std	Z+7, r19	; 0x07
     a66:	26 83       	std	Z+6, r18	; 0x06
    }
                                        /* Check if buffer is now full        */
    if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	9a 81       	ldd	r25, Y+2	; 0x02
     a6c:	fc 01       	movw	r30, r24
     a6e:	26 81       	ldd	r18, Z+6	; 0x06
     a70:	37 81       	ldd	r19, Z+7	; 0x07
     a72:	89 81       	ldd	r24, Y+1	; 0x01
     a74:	9a 81       	ldd	r25, Y+2	; 0x02
     a76:	fc 01       	movw	r30, r24
     a78:	84 81       	ldd	r24, Z+4	; 0x04
     a7a:	95 81       	ldd	r25, Z+5	; 0x05
     a7c:	28 17       	cp	r18, r24
     a7e:	39 07       	cpc	r19, r25
     a80:	51 f4       	brne	.+20     	; 0xa96 <cbuffUngetByte+0x96>
    {
        hCircBuffer->localFlag |= CBUFF_FULL;
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	fc 01       	movw	r30, r24
     a88:	82 85       	ldd	r24, Z+10	; 0x0a
     a8a:	28 2f       	mov	r18, r24
     a8c:	20 68       	ori	r18, 0x80	; 128
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	fc 01       	movw	r30, r24
     a94:	22 87       	std	Z+10, r18	; 0x0a
    }
                                        /* Buffer is now officially not empty */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	fc 01       	movw	r30, r24
     a9c:	82 85       	ldd	r24, Z+10	; 0x0a
     a9e:	28 2f       	mov	r18, r24
     aa0:	2f 7b       	andi	r18, 0xBF	; 191
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	fc 01       	movw	r30, r24
     aa8:	22 87       	std	Z+10, r18	; 0x0a
    return 0;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
}
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	08 95       	ret

00000ab6 <cbuffPutArray>:
* -# This function will not allow the buffer to overflow
*******************************************************************************/
unsigned int  cbuffPutArray(HCBUFF               hCircBuffer,
                            const CBUFF        * data,
                            unsigned int         noOfBytes)
{
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	28 97       	sbiw	r28, 0x08	; 8
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	8b 83       	std	Y+3, r24	; 0x03
     ace:	7e 83       	std	Y+6, r23	; 0x06
     ad0:	6d 83       	std	Y+5, r22	; 0x05
     ad2:	58 87       	std	Y+8, r21	; 0x08
     ad4:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesWritten = 0;
     ad6:	1a 82       	std	Y+2, r1	; 0x02
     ad8:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check that there is somewhere to   */
                                        /* put data. If the CBUFF_FULL   */
                                        /* flag is set, there is no space     */
    if (hCircBuffer->localFlag & CBUFF_FULL)
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	fc 01       	movw	r30, r24
     ae0:	82 85       	ldd	r24, Z+10	; 0x0a
     ae2:	88 23       	and	r24, r24
     ae4:	0c f0       	brlt	.+2      	; 0xae8 <cbuffPutArray+0x32>
     ae6:	5b c0       	rjmp	.+182    	; 0xb9e <cbuffPutArray+0xe8>
    {
        return bytesWritten;
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	6e c0       	rjmp	.+220    	; 0xbca <cbuffPutArray+0x114>


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
    {
                                        /* Put data in buffer                 */
        *hCircBuffer->inPointer = *data;
     aee:	8b 81       	ldd	r24, Y+3	; 0x03
     af0:	9c 81       	ldd	r25, Y+4	; 0x04
     af2:	fc 01       	movw	r30, r24
     af4:	84 81       	ldd	r24, Z+4	; 0x04
     af6:	95 81       	ldd	r25, Z+5	; 0x05
     af8:	2d 81       	ldd	r18, Y+5	; 0x05
     afa:	3e 81       	ldd	r19, Y+6	; 0x06
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	fc 01       	movw	r30, r24
     b02:	20 83       	st	Z, r18

        hCircBuffer->inPointer++;       /* Increment pointer to circular      */
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	fc 01       	movw	r30, r24
     b0a:	84 81       	ldd	r24, Z+4	; 0x04
     b0c:	95 81       	ldd	r25, Z+5	; 0x05
     b0e:	9c 01       	movw	r18, r24
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	fc 01       	movw	r30, r24
     b1a:	35 83       	std	Z+5, r19	; 0x05
     b1c:	24 83       	std	Z+4, r18	; 0x04
                                        /* buffer                             */

        data++;                         /* Increment pointer to array data    */
     b1e:	8d 81       	ldd	r24, Y+5	; 0x05
     b20:	9e 81       	ldd	r25, Y+6	; 0x06
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	9e 83       	std	Y+6, r25	; 0x06
     b26:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement circular buffer          */
                                        /* wrap-around                        */
        if (hCircBuffer->inPointer > hCircBuffer->endOfBuffer)
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	fc 01       	movw	r30, r24
     b2e:	24 81       	ldd	r18, Z+4	; 0x04
     b30:	35 81       	ldd	r19, Z+5	; 0x05
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	9c 81       	ldd	r25, Y+4	; 0x04
     b36:	fc 01       	movw	r30, r24
     b38:	82 81       	ldd	r24, Z+2	; 0x02
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	82 17       	cp	r24, r18
     b3e:	93 07       	cpc	r25, r19
     b40:	50 f4       	brcc	.+20     	; 0xb56 <cbuffPutArray+0xa0>
        {
            hCircBuffer->inPointer = hCircBuffer->startOfBuffer;
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	fc 01       	movw	r30, r24
     b48:	20 81       	ld	r18, Z
     b4a:	31 81       	ldd	r19, Z+1	; 0x01
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	fc 01       	movw	r30, r24
     b52:	35 83       	std	Z+5, r19	; 0x05
     b54:	24 83       	std	Z+4, r18	; 0x04
        }
                                        /* Check that the buffer is not now   */
                                        /* full                               */

        if (hCircBuffer->inPointer == hCircBuffer->outPointer)
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	fc 01       	movw	r30, r24
     b5c:	24 81       	ldd	r18, Z+4	; 0x04
     b5e:	35 81       	ldd	r19, Z+5	; 0x05
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	fc 01       	movw	r30, r24
     b66:	86 81       	ldd	r24, Z+6	; 0x06
     b68:	97 81       	ldd	r25, Z+7	; 0x07
     b6a:	28 17       	cp	r18, r24
     b6c:	39 07       	cpc	r19, r25
     b6e:	51 f4       	brne	.+20     	; 0xb84 <cbuffPutArray+0xce>
        {
                                        /* Set CBUFF_FULL flag so that   */
                                        /* we don't attempt to write more     */
                                        /* data into the buffer until some-   */
                                        /* thing is read out                  */
            hCircBuffer->localFlag |= CBUFF_FULL;
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	fc 01       	movw	r30, r24
     b76:	82 85       	ldd	r24, Z+10	; 0x0a
     b78:	28 2f       	mov	r18, r24
     b7a:	20 68       	ori	r18, 0x80	; 128
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	fc 01       	movw	r30, r24
     b82:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how much data we've written   */
        bytesWritten++;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	89 83       	std	Y+1, r24	; 0x01
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
     b8e:	29 81       	ldd	r18, Y+1	; 0x01
     b90:	3a 81       	ldd	r19, Y+2	; 0x02
     b92:	8f 81       	ldd	r24, Y+7	; 0x07
     b94:	98 85       	ldd	r25, Y+8	; 0x08
     b96:	28 17       	cp	r18, r24
     b98:	39 07       	cpc	r19, r25
     b9a:	51 f0       	breq	.+20     	; 0xbb0 <cbuffPutArray+0xfa>
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <cbuffPutArray+0xea>
    {
        return bytesWritten;
    }


    while (!(hCircBuffer->localFlag & CBUFF_FULL))
     b9e:	00 00       	nop
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	fc 01       	movw	r30, r24
     ba6:	82 85       	ldd	r24, Z+10	; 0x0a
     ba8:	88 23       	and	r24, r24
     baa:	0c f0       	brlt	.+2      	; 0xbae <cbuffPutArray+0xf8>
     bac:	a0 cf       	rjmp	.-192    	; 0xaee <cbuffPutArray+0x38>
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <cbuffPutArray+0xfc>
        bytesWritten++;
                                        /* Check to see if we've written all  */
                                        /* requested data                     */
        if (bytesWritten == noOfBytes)
        {
            break;
     bb0:	00 00       	nop
        }
    }
                                        /* Note that the buffer is no longer  */
                                        /* empty                              */
    hCircBuffer->localFlag &= ~CBUFF_EMPTY;
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	fc 01       	movw	r30, r24
     bb8:	82 85       	ldd	r24, Z+10	; 0x0a
     bba:	28 2f       	mov	r18, r24
     bbc:	2f 7b       	andi	r18, 0xBF	; 191
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	fc 01       	movw	r30, r24
     bc4:	22 87       	std	Z+10, r18	; 0x0a

    return bytesWritten;
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bca:	28 96       	adiw	r28, 0x08	; 8
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <cbuffGetArray>:
*    enough to accomodate noOfBytes of data
*******************************************************************************/
unsigned int  cbuffGetArray(HCBUFF               hCircBuffer,
                            CBUFF              * data,
                            unsigned int         noOfBytes)
{
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	28 97       	sbiw	r28, 0x08	; 8
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	9c 83       	std	Y+4, r25	; 0x04
     bf2:	8b 83       	std	Y+3, r24	; 0x03
     bf4:	7e 83       	std	Y+6, r23	; 0x06
     bf6:	6d 83       	std	Y+5, r22	; 0x05
     bf8:	58 87       	std	Y+8, r21	; 0x08
     bfa:	4f 83       	std	Y+7, r20	; 0x07
    unsigned int bytesRead = 0;
     bfc:	1a 82       	std	Y+2, r1	; 0x02
     bfe:	19 82       	std	Y+1, r1	; 0x01
                                        /* Check we're don't already have an  */
                                        /* empty buffer.                      */
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	fc 01       	movw	r30, r24
     c06:	82 85       	ldd	r24, Z+10	; 0x0a
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	80 74       	andi	r24, 0x40	; 64
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	09 f4       	brne	.+2      	; 0xc16 <cbuffGetArray+0x3a>
     c14:	5b c0       	rjmp	.+182    	; 0xccc <cbuffGetArray+0xf0>
    {
        return bytesRead;
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	72 c0       	rjmp	.+228    	; 0xd00 <cbuffGetArray+0x124>
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
    {
                                        /* Read requested byte                */
        *data = *hCircBuffer->outPointer;
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	fc 01       	movw	r30, r24
     c22:	86 81       	ldd	r24, Z+6	; 0x06
     c24:	97 81       	ldd	r25, Z+7	; 0x07
     c26:	fc 01       	movw	r30, r24
     c28:	20 81       	ld	r18, Z
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18

                                        /* Increment outPointer first         */
        hCircBuffer->outPointer++;
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	fc 01       	movw	r30, r24
     c38:	86 81       	ldd	r24, Z+6	; 0x06
     c3a:	97 81       	ldd	r25, Z+7	; 0x07
     c3c:	9c 01       	movw	r18, r24
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	fc 01       	movw	r30, r24
     c48:	37 83       	std	Z+7, r19	; 0x07
     c4a:	26 83       	std	Z+6, r18	; 0x06
                                        /* Increment array data pointer       */
        data++;
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05

                                        /* Implement wrap around              */
        if (hCircBuffer->outPointer > hCircBuffer->endOfBuffer)
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	fc 01       	movw	r30, r24
     c5c:	26 81       	ldd	r18, Z+6	; 0x06
     c5e:	37 81       	ldd	r19, Z+7	; 0x07
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	fc 01       	movw	r30, r24
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	50 f4       	brcc	.+20     	; 0xc84 <cbuffGetArray+0xa8>
        {
            hCircBuffer->outPointer = hCircBuffer->startOfBuffer;
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	fc 01       	movw	r30, r24
     c76:	20 81       	ld	r18, Z
     c78:	31 81       	ldd	r19, Z+1	; 0x01
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	fc 01       	movw	r30, r24
     c80:	37 83       	std	Z+7, r19	; 0x07
     c82:	26 83       	std	Z+6, r18	; 0x06
        }

                                        /* Check we're not now pointing to    */
                                        /* the inPointer (buffer empty)       */
        if (hCircBuffer->outPointer == hCircBuffer->inPointer)
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	fc 01       	movw	r30, r24
     c8a:	26 81       	ldd	r18, Z+6	; 0x06
     c8c:	37 81       	ldd	r19, Z+7	; 0x07
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	fc 01       	movw	r30, r24
     c94:	84 81       	ldd	r24, Z+4	; 0x04
     c96:	95 81       	ldd	r25, Z+5	; 0x05
     c98:	28 17       	cp	r18, r24
     c9a:	39 07       	cpc	r19, r25
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <cbuffGetArray+0xd6>
        {
                                        /* Note that the buffer is empty      */
            hCircBuffer->localFlag |= CBUFF_EMPTY;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	fc 01       	movw	r30, r24
     ca4:	82 85       	ldd	r24, Z+10	; 0x0a
     ca6:	28 2f       	mov	r18, r24
     ca8:	20 64       	ori	r18, 0x40	; 64
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	9c 81       	ldd	r25, Y+4	; 0x04
     cae:	fc 01       	movw	r30, r24
     cb0:	22 87       	std	Z+10, r18	; 0x0a
        }
                                        /* Note how many bytes we've read     */
        bytesRead++;
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	9a 83       	std	Y+2, r25	; 0x02
     cba:	89 83       	std	Y+1, r24	; 0x01

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
     cbc:	29 81       	ldd	r18, Y+1	; 0x01
     cbe:	3a 81       	ldd	r19, Y+2	; 0x02
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	98 85       	ldd	r25, Y+8	; 0x08
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	71 f0       	breq	.+28     	; 0xce6 <cbuffGetArray+0x10a>
     cca:	01 c0       	rjmp	.+2      	; 0xcce <cbuffGetArray+0xf2>
    if (hCircBuffer->localFlag & CBUFF_EMPTY)
    {
        return bytesRead;
    }

    while(!(hCircBuffer->localFlag & CBUFF_EMPTY))
     ccc:	00 00       	nop
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	fc 01       	movw	r30, r24
     cd4:	82 85       	ldd	r24, Z+10	; 0x0a
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	80 74       	andi	r24, 0x40	; 64
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	09 f4       	brne	.+2      	; 0xce4 <cbuffGetArray+0x108>
     ce2:	9c cf       	rjmp	.-200    	; 0xc1c <cbuffGetArray+0x40>
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <cbuffGetArray+0x10c>

                                        /* Stop function from reading too     */
                                        /* many bytes                         */
        if (bytesRead == noOfBytes)
        {
            break;
     ce6:	00 00       	nop
        }
    }
                                        /* Clear CBUFF_FULL flag as      */
                                        /* there is now at least one byte     */
                                        /* free                               */
    hCircBuffer->localFlag &= ~CBUFF_FULL;
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	fc 01       	movw	r30, r24
     cee:	82 85       	ldd	r24, Z+10	; 0x0a
     cf0:	28 2f       	mov	r18, r24
     cf2:	2f 77       	andi	r18, 0x7F	; 127
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	fc 01       	movw	r30, r24
     cfa:	22 87       	std	Z+10, r18	; 0x0a

    return bytesRead;
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d00:	28 96       	adiw	r28, 0x08	; 8
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <main>:
#if	defined(__18CXX)
void main (void)
#else
int main(void)
#endif
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	66 97       	sbiw	r28, 0x16	; 22
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
    CBUFF               writeData = 0;
     d26:	19 82       	std	Y+1, r1	; 0x01
    CBUFF               readData = 0;
     d28:	1e 8a       	std	Y+22, r1	; 0x16
    unsigned char       x;              /* used for 'for' loops               */
    unsigned char       y;
    unsigned int        spaceRemainingInBuffer = 0;
     d2a:	1c 82       	std	Y+4, r1	; 0x04
     d2c:	1b 82       	std	Y+3, r1	; 0x03
    unsigned int        dataInBuffer = 0;
     d2e:	1e 82       	std	Y+6, r1	; 0x06
     d30:	1d 82       	std	Y+5, r1	; 0x05

#ifdef __i386__
    printf("Running test suite for CIRCULAR BUFFER MODULE\n");
#endif
                                        /* Initialise buffer module           */
    cbuffInit();
     d32:	0e 94 4c 00 	call	0x98	; 0x98 <cbuffInit>

    /***************************************************************************
    * TEST 1 - Try to create some buffer objects without passing the correct
    *          parameters. Each attempt should fail
    ***************************************************************************/
    inBufferNum = cbuffCreate((CBUFF *) 0, INBUFFERSIZE, &inBufferObj);
     d36:	2c e7       	ldi	r18, 0x7C	; 124
     d38:	31 e0       	ldi	r19, 0x01	; 1
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	60 e4       	ldi	r22, 0x40	; 64
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	a9 01       	movw	r20, r18
     d44:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     d48:	98 87       	std	Y+8, r25	; 0x08
     d4a:	8f 83       	std	Y+7, r24	; 0x07

    outBufferNum = cbuffCreate(outBuffer, 0, &outBufferObj);
     d4c:	84 e4       	ldi	r24, 0x44	; 68
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	29 e8       	ldi	r18, 0x89	; 137
     d52:	31 e0       	ldi	r19, 0x01	; 1
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	a9 01       	movw	r20, r18
     d5a:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     d5e:	9a 87       	std	Y+10, r25	; 0x0a
     d60:	89 87       	std	Y+9, r24	; 0x09

    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     d62:	84 e6       	ldi	r24, 0x64	; 100
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	68 e0       	ldi	r22, 0x08	; 8
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     d72:	9c 87       	std	Y+12, r25	; 0x0c
     d74:	8b 87       	std	Y+11, r24	; 0x0b
    								 (CBUFFOBJ *) 0);

    if (inBufferNum != 0)
     d76:	8f 81       	ldd	r24, Y+7	; 0x07
     d78:	98 85       	ldd	r25, Y+8	; 0x08
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	09 f0       	breq	.+2      	; 0xd80 <main+0x6e>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     d7e:	ff cf       	rjmp	.-2      	; 0xd7e <main+0x6c>
#endif
    }
    if (outBufferNum != 0)
     d80:	89 85       	ldd	r24, Y+9	; 0x09
     d82:	9a 85       	ldd	r25, Y+10	; 0x0a
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	09 f0       	breq	.+2      	; 0xd8a <main+0x78>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     d88:	ff cf       	rjmp	.-2      	; 0xd88 <main+0x76>
#endif
    }
    if (testBuffer1Num != 0)
     d8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	09 f0       	breq	.+2      	; 0xd94 <main+0x82>
    {
        /* Managed to create buffer with invalid parameters */
#ifdef __i386__
        assert(0);
#else
        while(1);
     d92:	ff cf       	rjmp	.-2      	; 0xd92 <main+0x80>
    }

    /***************************************************************************
    * TEST 1a - Try to destroy buffers when none exist - should fail
    ***************************************************************************/
    x = 0x0001;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	8a 83       	std	Y+2, r24	; 0x02
    
    do
    {
        y = cbuffDestroy(x);
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 9f 01 	call	0x33e	; 0x33e <cbuffDestroy>
     da2:	8d 87       	std	Y+13, r24	; 0x0d
    
        if (y != CBUFF_DESTROY_FAIL)
     da4:	8d 85       	ldd	r24, Y+13	; 0x0d
     da6:	88 23       	and	r24, r24
     da8:	09 f0       	breq	.+2      	; 0xdac <main+0x9a>
        {
            /* Managed to destroy buffer although none exist */
#ifdef __i386__
            assert(0);
#else
            while(1);
     daa:	ff cf       	rjmp	.-2      	; 0xdaa <main+0x98>
#endif
        }
        
        /* Shift value to test next potential buffer */
        x <<= 1;
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	88 0f       	add	r24, r24
     db0:	8a 83       	std	Y+2, r24	; 0x02
        /* Mask to ensure that value doesn't get bigger than 0x8000 */
        x &= 0xFFFF;
    } while (x != 0x0000);
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	88 23       	and	r24, r24
     db6:	81 f7       	brne	.-32     	; 0xd98 <main+0x86>
    *           after 16 buffers have been created. Each buffer is created 
    *           with the same paramters. This would result in working code! It 
    *           is done only for test purposes.
    ***************************************************************************/
    
    for (x = 0; x < 16; x++)
     db8:	1a 82       	std	Y+2, r1	; 0x02
     dba:	13 c0       	rjmp	.+38     	; 0xde2 <main+0xd0>
    {
        testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE, 
     dbc:	8c e6       	ldi	r24, 0x6C	; 108
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	23 ea       	ldi	r18, 0xA3	; 163
     dc2:	31 e0       	ldi	r19, 0x01	; 1
     dc4:	60 e1       	ldi	r22, 0x10	; 16
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	a9 01       	movw	r20, r18
     dca:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     dce:	9f 87       	std	Y+15, r25	; 0x0f
     dd0:	8e 87       	std	Y+14, r24	; 0x0e
                                        &testBuffer2Obj);
        if (testBuffer2Num == 0)
     dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
     dd4:	9f 85       	ldd	r25, Y+15	; 0x0f
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	09 f4       	brne	.+2      	; 0xddc <main+0xca>
        {
            /* Couldn't create a buffer with valid parameters */
#ifdef __i386__
            assert(0);
#else
            while(1);
     dda:	ff cf       	rjmp	.-2      	; 0xdda <main+0xc8>
    *           after 16 buffers have been created. Each buffer is created 
    *           with the same paramters. This would result in working code! It 
    *           is done only for test purposes.
    ***************************************************************************/
    
    for (x = 0; x < 16; x++)
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	8a 83       	std	Y+2, r24	; 0x02
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	80 31       	cpi	r24, 0x10	; 16
     de6:	50 f3       	brcs	.-44     	; 0xdbc <main+0xaa>
#endif
        }
    }
    
    /* Now try to create a 17th buffer - should fail */
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE, 
     de8:	84 e6       	ldi	r24, 0x64	; 100
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	26 e9       	ldi	r18, 0x96	; 150
     dee:	31 e0       	ldi	r19, 0x01	; 1
     df0:	68 e0       	ldi	r22, 0x08	; 8
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	a9 01       	movw	r20, r18
     df6:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     dfa:	9c 87       	std	Y+12, r25	; 0x0c
     dfc:	8b 87       	std	Y+11, r24	; 0x0b
                                        &testBuffer1Obj);
    if (testBuffer1Num != 0)
     dfe:	8b 85       	ldd	r24, Y+11	; 0x0b
     e00:	9c 85       	ldd	r25, Y+12	; 0x0c
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	09 f0       	breq	.+2      	; 0xe08 <main+0xf6>
    {
    /* Managed to create a buffer although no space exists in linked list */
#ifdef __i386__
        assert(0);
#else
        while(1);
     e06:	ff cf       	rjmp	.-2      	; 0xe06 <main+0xf4>
#endif
    }
    
    /* Deinitialise buffer module now and then reinit - best way to start */
    /* a clean state for the following tests                              */
    cbuffDeinit();
     e08:	0e 94 5b 00 	call	0xb6	; 0xb6 <cbuffDeinit>
    cbuffInit();
     e0c:	0e 94 4c 00 	call	0x98	; 0x98 <cbuffInit>
    
    /***************************************************************************
    * TEST 2 - Create some buffer objects
    ***************************************************************************/

    inBufferNum = cbuffCreate(inBuffer, INBUFFERSIZE, &inBufferObj);
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	2c e7       	ldi	r18, 0x7C	; 124
     e16:	31 e0       	ldi	r19, 0x01	; 1
     e18:	60 e4       	ldi	r22, 0x40	; 64
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     e22:	98 87       	std	Y+8, r25	; 0x08
     e24:	8f 83       	std	Y+7, r24	; 0x07
    outBufferNum = cbuffCreate(outBuffer, OUTBUFFERSIZE, &outBufferObj);
     e26:	84 e4       	ldi	r24, 0x44	; 68
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	29 e8       	ldi	r18, 0x89	; 137
     e2c:	31 e0       	ldi	r19, 0x01	; 1
     e2e:	60 e2       	ldi	r22, 0x20	; 32
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	a9 01       	movw	r20, r18
     e34:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     e38:	9a 87       	std	Y+10, r25	; 0x0a
     e3a:	89 87       	std	Y+9, r24	; 0x09
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     e3c:	84 e6       	ldi	r24, 0x64	; 100
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	26 e9       	ldi	r18, 0x96	; 150
     e42:	31 e0       	ldi	r19, 0x01	; 1
     e44:	68 e0       	ldi	r22, 0x08	; 8
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     e4e:	9c 87       	std	Y+12, r25	; 0x0c
     e50:	8b 87       	std	Y+11, r24	; 0x0b
    								 &testBuffer1Obj);
    testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE,
     e52:	8c e6       	ldi	r24, 0x6C	; 108
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	23 ea       	ldi	r18, 0xA3	; 163
     e58:	31 e0       	ldi	r19, 0x01	; 1
     e5a:	60 e1       	ldi	r22, 0x10	; 16
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     e64:	9f 87       	std	Y+15, r25	; 0x0f
     e66:	8e 87       	std	Y+14, r24	; 0x0e
                                        /* number we got. The buffer number   */
                                        /* is not so important, but it checks */
                                        /* that the algorithm assigned        */
                                        /* consecutive numbers. If it didn't  */
                                        /* there might be a bug.              */
    if (inBufferNum != 0x0001)
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	91 05       	cpc	r25, r1
     e70:	09 f0       	breq	.+2      	; 0xe74 <main+0x162>
    {
        /* If inBufferNum isn't 0x0001, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     e72:	ff cf       	rjmp	.-2      	; 0xe72 <main+0x160>
#endif
    }
    if (outBufferNum != 0x0002)
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	91 05       	cpc	r25, r1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <main+0x16e>
    {
        /* If outBufferNum isn't 0x0002, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     e7e:	ff cf       	rjmp	.-2      	; 0xe7e <main+0x16c>
#endif
    }
    if (testBuffer1Num != 0x0004)
     e80:	8b 85       	ldd	r24, Y+11	; 0x0b
     e82:	9c 85       	ldd	r25, Y+12	; 0x0c
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	91 05       	cpc	r25, r1
     e88:	09 f0       	breq	.+2      	; 0xe8c <main+0x17a>
    {
        /* If testBuffer1Num isn't 0x0004, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     e8a:	ff cf       	rjmp	.-2      	; 0xe8a <main+0x178>
#endif
    }
    if (testBuffer2Num != 0x0008)
     e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e90:	88 30       	cpi	r24, 0x08	; 8
     e92:	91 05       	cpc	r25, r1
     e94:	09 f0       	breq	.+2      	; 0xe98 <main+0x186>
    {
        /* If testBuffer2Num isn't 0x0008, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     e96:	ff cf       	rjmp	.-2      	; 0xe96 <main+0x184>

    /***************************************************************************
    * TEST 3 - Try to destroy some buffer objects that don't exist
    ***************************************************************************/

    x = cbuffDestroy(0x8000);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e8       	ldi	r25, 0x80	; 128
     e9c:	0e 94 9f 01 	call	0x33e	; 0x33e <cbuffDestroy>
     ea0:	8a 83       	std	Y+2, r24	; 0x02

    if (x == CBUFF_DESTROY_OK)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <main+0x198>
    {
        /* Destroyed a buffer that was not allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     ea8:	ff cf       	rjmp	.-2      	; 0xea8 <main+0x196>
#endif
    }

    x = cbuffDestroy(0x0400);
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	94 e0       	ldi	r25, 0x04	; 4
     eae:	0e 94 9f 01 	call	0x33e	; 0x33e <cbuffDestroy>
     eb2:	8a 83       	std	Y+2, r24	; 0x02

    if (x == CBUFF_DESTROY_OK)
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f4       	brne	.+2      	; 0xebc <main+0x1aa>
    {
        /* Destroyed a buffer that was not allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     eba:	ff cf       	rjmp	.-2      	; 0xeba <main+0x1a8>

    /***************************************************************************
    * TEST 4 - Destroy the two testBufferObjs
    ***************************************************************************/

    x = cbuffDestroy(testBuffer1Num);
     ebc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec0:	0e 94 9f 01 	call	0x33e	; 0x33e <cbuffDestroy>
     ec4:	8a 83       	std	Y+2, r24	; 0x02

    if (x != CBUFF_DESTROY_OK)
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	09 f0       	breq	.+2      	; 0xece <main+0x1bc>
    {
        /* Failed to destroy a buffer that was allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     ecc:	ff cf       	rjmp	.-2      	; 0xecc <main+0x1ba>
#endif
    }

    x = cbuffDestroy(testBuffer2Num);
     ece:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed2:	0e 94 9f 01 	call	0x33e	; 0x33e <cbuffDestroy>
     ed6:	8a 83       	std	Y+2, r24	; 0x02

    if (x != CBUFF_DESTROY_OK)
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	09 f0       	breq	.+2      	; 0xee0 <main+0x1ce>
    {
        /* Failed to destroy a buffer that was allocated */
#ifdef __i386__
        assert(0);
#else
        while(1);
     ede:	ff cf       	rjmp	.-2      	; 0xede <main+0x1cc>

    /***************************************************************************
    * TEST 5 - Create the two testBufferObjs again but in reverse order
    *          to test 2 - should assign buffer numbers in reverse order
    ***************************************************************************/
    testBuffer2Num = cbuffCreate(testBuffer2, TESTBUFFER2SIZE,
     ee0:	8c e6       	ldi	r24, 0x6C	; 108
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	23 ea       	ldi	r18, 0xA3	; 163
     ee6:	31 e0       	ldi	r19, 0x01	; 1
     ee8:	60 e1       	ldi	r22, 0x10	; 16
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	a9 01       	movw	r20, r18
     eee:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     ef2:	9f 87       	std	Y+15, r25	; 0x0f
     ef4:	8e 87       	std	Y+14, r24	; 0x0e
    								 &testBuffer2Obj);
    testBuffer1Num = cbuffCreate(testBuffer1, TESTBUFFER1SIZE,
     ef6:	84 e6       	ldi	r24, 0x64	; 100
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	26 e9       	ldi	r18, 0x96	; 150
     efc:	31 e0       	ldi	r19, 0x01	; 1
     efe:	68 e0       	ldi	r22, 0x08	; 8
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	a9 01       	movw	r20, r18
     f04:	0e 94 6a 00 	call	0xd4	; 0xd4 <cbuffCreate>
     f08:	9c 87       	std	Y+12, r25	; 0x0c
     f0a:	8b 87       	std	Y+11, r24	; 0x0b
    								 &testBuffer1Obj);

    if (testBuffer1Num != 0x0008)
     f0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	91 05       	cpc	r25, r1
     f14:	09 f0       	breq	.+2      	; 0xf18 <main+0x206>
    {
        /* If testBuffer1Num isn't 0x0008, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f16:	ff cf       	rjmp	.-2      	; 0xf16 <main+0x204>
#endif
    }
    if (testBuffer2Num != 0x0004)
     f18:	8e 85       	ldd	r24, Y+14	; 0x0e
     f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1c:	84 30       	cpi	r24, 0x04	; 4
     f1e:	91 05       	cpc	r25, r1
     f20:	09 f0       	breq	.+2      	; 0xf24 <main+0x212>
    {
        /* If testBuffer2Num isn't 0x0004, allocation didn't work */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f22:	ff cf       	rjmp	.-2      	; 0xf22 <main+0x210>
    }

    /***************************************************************************
    * TEST 6 - Ensure we can't get handle to buffers that doesn't exist
    ***************************************************************************/
    hInBuffer = cbuffOpen(0x8000);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e8       	ldi	r25, 0x80	; 128
     f28:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
     f2c:	99 8b       	std	Y+17, r25	; 0x11
     f2e:	88 8b       	std	Y+16, r24	; 0x10

    if (hInBuffer != (CBUFFOBJ *) 0)
     f30:	88 89       	ldd	r24, Y+16	; 0x10
     f32:	99 89       	ldd	r25, Y+17	; 0x11
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <main+0x228>
    {
        /* Managed to get a pointer to a buffer object that doesn't exist */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f38:	ff cf       	rjmp	.-2      	; 0xf38 <main+0x226>
#endif
    }

    hInBuffer = cbuffOpen(0x0400);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
     f42:	99 8b       	std	Y+17, r25	; 0x11
     f44:	88 8b       	std	Y+16, r24	; 0x10

    if (hInBuffer != (CBUFFOBJ *) 0)
     f46:	88 89       	ldd	r24, Y+16	; 0x10
     f48:	99 89       	ldd	r25, Y+17	; 0x11
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	09 f0       	breq	.+2      	; 0xf50 <main+0x23e>
    {
        /* Managed to get a pointer to a buffer object that doesn't exist */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f4e:	ff cf       	rjmp	.-2      	; 0xf4e <main+0x23c>
    }

    /***************************************************************************
    * TEST 7 - Ensure we can get handle to properly created buffers
    ***************************************************************************/
    hInBuffer = cbuffOpen(inBufferNum);
     f50:	8f 81       	ldd	r24, Y+7	; 0x07
     f52:	98 85       	ldd	r25, Y+8	; 0x08
     f54:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
     f58:	99 8b       	std	Y+17, r25	; 0x11
     f5a:	88 8b       	std	Y+16, r24	; 0x10

    hOutBuffer = cbuffOpen(outBufferNum);
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
     f64:	9b 8b       	std	Y+19, r25	; 0x13
     f66:	8a 8b       	std	Y+18, r24	; 0x12

    if (hInBuffer == (CBUFFOBJ *) 0)
     f68:	88 89       	ldd	r24, Y+16	; 0x10
     f6a:	99 89       	ldd	r25, Y+17	; 0x11
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	09 f4       	brne	.+2      	; 0xf72 <main+0x260>
    {
        /* Failed to get handle to valid, available buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f70:	ff cf       	rjmp	.-2      	; 0xf70 <main+0x25e>
#endif
    }
    if (hOutBuffer == (CBUFFOBJ *) 0)
     f72:	8a 89       	ldd	r24, Y+18	; 0x12
     f74:	9b 89       	ldd	r25, Y+19	; 0x13
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	09 f4       	brne	.+2      	; 0xf7c <main+0x26a>
    {
        /* Failed to get handle to valid, available buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f7a:	ff cf       	rjmp	.-2      	; 0xf7a <main+0x268>
    }

    /***************************************************************************
    * TEST 8 - Try to obtain handle to open buffers - should fail
    ***************************************************************************/
    hDummyHandle = cbuffOpen(inBufferNum);
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	98 85       	ldd	r25, Y+8	; 0x08
     f80:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
     f84:	9d 8b       	std	Y+21, r25	; 0x15
     f86:	8c 8b       	std	Y+20, r24	; 0x14

    if (hDummyHandle != (CBUFFOBJ *) 0)
     f88:	8c 89       	ldd	r24, Y+20	; 0x14
     f8a:	9d 89       	ldd	r25, Y+21	; 0x15
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	09 f0       	breq	.+2      	; 0xf92 <main+0x280>
    {
        /* Managed to get handle to a buffer that is already open */
#ifdef __i386__
        assert(0);
#else
        while(1);
     f90:	ff cf       	rjmp	.-2      	; 0xf90 <main+0x27e>
#endif
    }

    hDummyHandle = cbuffOpen(outBufferNum);
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
     f9a:	9d 8b       	std	Y+21, r25	; 0x15
     f9c:	8c 8b       	std	Y+20, r24	; 0x14

    if (hDummyHandle != (CBUFFOBJ *) 0)
     f9e:	8c 89       	ldd	r24, Y+20	; 0x14
     fa0:	9d 89       	ldd	r25, Y+21	; 0x15
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <main+0x296>
    {
        /* Managed to get handle to a buffer that is already open */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fa6:	ff cf       	rjmp	.-2      	; 0xfa6 <main+0x294>

    /***************************************************************************
    * TEST 9 - Try to release handles to open buffers
    ***************************************************************************/

    inBufferNum = cbuffClose(hInBuffer);
     fa8:	88 89       	ldd	r24, Y+16	; 0x10
     faa:	99 89       	ldd	r25, Y+17	; 0x11
     fac:	0e 94 74 02 	call	0x4e8	; 0x4e8 <cbuffClose>
     fb0:	98 87       	std	Y+8, r25	; 0x08
     fb2:	8f 83       	std	Y+7, r24	; 0x07

    outBufferNum = cbuffClose(hOutBuffer);
     fb4:	8a 89       	ldd	r24, Y+18	; 0x12
     fb6:	9b 89       	ldd	r25, Y+19	; 0x13
     fb8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <cbuffClose>
     fbc:	9a 87       	std	Y+10, r25	; 0x0a
     fbe:	89 87       	std	Y+9, r24	; 0x09

    if (inBufferNum != 0x0001)
     fc0:	8f 81       	ldd	r24, Y+7	; 0x07
     fc2:	98 85       	ldd	r25, Y+8	; 0x08
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f0       	breq	.+2      	; 0xfcc <main+0x2ba>
    {
        /* Failed to close buffer object */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fca:	ff cf       	rjmp	.-2      	; 0xfca <main+0x2b8>
#endif
    }
    if (outBufferNum != 0x0002)
     fcc:	89 85       	ldd	r24, Y+9	; 0x09
     fce:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd0:	82 30       	cpi	r24, 0x02	; 2
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <main+0x2c6>
    {
        /* Failed to close buffer object */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fd6:	ff cf       	rjmp	.-2      	; 0xfd6 <main+0x2c4>

    /***************************************************************************
    * TEST 10 - Try to release handles to buffer which is not open
    ***************************************************************************/

    testBuffer1Num = cbuffClose(hOutBuffer);
     fd8:	8a 89       	ldd	r24, Y+18	; 0x12
     fda:	9b 89       	ldd	r25, Y+19	; 0x13
     fdc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <cbuffClose>
     fe0:	9c 87       	std	Y+12, r25	; 0x0c
     fe2:	8b 87       	std	Y+11, r24	; 0x0b

    if (testBuffer1Num != 0)
     fe4:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe6:	9c 85       	ldd	r25, Y+12	; 0x0c
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	09 f0       	breq	.+2      	; 0xfee <main+0x2dc>
    {
        /* Managed to release a buffer object that was already released */
#ifdef __i386__
        assert(0);
#else
        while(1);
     fec:	ff cf       	rjmp	.-2      	; 0xfec <main+0x2da>

    /***************************************************************************
    * Open two main buffers for further tests
    ***************************************************************************/

    hInBuffer = cbuffOpen(inBufferNum);
     fee:	8f 81       	ldd	r24, Y+7	; 0x07
     ff0:	98 85       	ldd	r25, Y+8	; 0x08
     ff2:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
     ff6:	99 8b       	std	Y+17, r25	; 0x11
     ff8:	88 8b       	std	Y+16, r24	; 0x10

    hOutBuffer = cbuffOpen(outBufferNum);
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	0e 94 2e 02 	call	0x45c	; 0x45c <cbuffOpen>
    1002:	9b 8b       	std	Y+19, r25	; 0x13
    1004:	8a 8b       	std	Y+18, r24	; 0x12


    /***************************************************************************
    * TEST 11 - Check sizes of both buffers are correctly calculated
    ***************************************************************************/
    spaceRemainingInBuffer = cbuffGetSpace(hInBuffer);
    1006:	88 89       	ldd	r24, Y+16	; 0x10
    1008:	99 89       	ldd	r25, Y+17	; 0x11
    100a:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != INBUFFERSIZE)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	80 34       	cpi	r24, 0x40	; 64
    1018:	91 05       	cpc	r25, r1
    101a:	09 f0       	breq	.+2      	; 0x101e <main+0x30c>
    {
        /* ERROR - We have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    101c:	ff cf       	rjmp	.-2      	; 0x101c <main+0x30a>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    101e:	8a 89       	ldd	r24, Y+18	; 0x12
    1020:	9b 89       	ldd	r25, Y+19	; 0x13
    1022:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	80 32       	cpi	r24, 0x20	; 32
    1030:	91 05       	cpc	r25, r1
    1032:	09 f0       	breq	.+2      	; 0x1036 <main+0x324>
    {
        /* ERROR - We have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1034:	ff cf       	rjmp	.-2      	; 0x1034 <main+0x322>
#endif
    }

    dataInBuffer = cbuffGetFill(hInBuffer);
    1036:	88 89       	ldd	r24, Y+16	; 0x10
    1038:	99 89       	ldd	r25, Y+17	; 0x11
    103a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	09 f0       	breq	.+2      	; 0x104c <main+0x33a>
    {
        /* ERROR - we have incorrect fill value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    104a:	ff cf       	rjmp	.-2      	; 0x104a <main+0x338>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    104c:	8a 89       	ldd	r24, Y+18	; 0x12
    104e:	9b 89       	ldd	r25, Y+19	; 0x13
    1050:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	09 f0       	breq	.+2      	; 0x1062 <main+0x350>
    {
        /* ERROR - we have incorrect fill value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1060:	ff cf       	rjmp	.-2      	; 0x1060 <main+0x34e>
    }

    /***************************************************************************
    * TEST 12 - Fill buffers - ensure we can't overrun using cbuffPutByte
    ***************************************************************************/
    writeData = 'A';
    1062:	81 e4       	ldi	r24, 0x41	; 65
    1064:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    1066:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer until cbuffPutByte tells us we can't write any more */
    while (x < 0xFF)
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <main+0x372>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    106a:	8a 89       	ldd	r24, Y+18	; 0x12
    106c:	9b 89       	ldd	r25, Y+19	; 0x13
    106e:	69 81       	ldd	r22, Y+1	; 0x01
    1070:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	51 f4       	brne	.+20     	; 0x108c <main+0x37a>
        {
            writeData++;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	89 83       	std	Y+1, r24	; 0x01
            x++;
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	8a 83       	std	Y+2, r24	; 0x02
    * TEST 12 - Fill buffers - ensure we can't overrun using cbuffPutByte
    ***************************************************************************/
    writeData = 'A';
    x = 0;
    /* Fill buffer until cbuffPutByte tells us we can't write any more */
    while (x < 0xFF)
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	8f 3f       	cpi	r24, 0xFF	; 255
    1088:	81 f7       	brne	.-32     	; 0x106a <main+0x358>
    108a:	01 c0       	rjmp	.+2      	; 0x108e <main+0x37c>
            writeData++;
            x++;
        }
        else
        {
            break;
    108c:	00 00       	nop
        }
    }
    if (x == 0xFF)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	8f 3f       	cpi	r24, 0xFF	; 255
    1092:	09 f4       	brne	.+2      	; 0x1096 <main+0x384>
    {
        /* ERROR - Buffer overrun not detected */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1094:	ff cf       	rjmp	.-2      	; 0x1094 <main+0x382>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1096:	8a 89       	ldd	r24, Y+18	; 0x12
    1098:	9b 89       	ldd	r25, Y+19	; 0x13
    109a:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 0)
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	09 f0       	breq	.+2      	; 0x10ac <main+0x39a>
    {
        /* ERROR - Space remaining should be 0 */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10aa:	ff cf       	rjmp	.-2      	; 0x10aa <main+0x398>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    10ac:	8a 89       	ldd	r24, Y+18	; 0x12
    10ae:	9b 89       	ldd	r25, Y+19	; 0x13
    10b0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != OUTBUFFERSIZE)
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	80 32       	cpi	r24, 0x20	; 32
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <main+0x3b2>
    {
        /* ERROR - Buffer should be full */
#ifdef __i386__
        assert(0);
#else
        while(1);
    10c2:	ff cf       	rjmp	.-2      	; 0x10c2 <main+0x3b0>

    /***************************************************************************
    * TEST 13 - Read buffers - ensure we can't underrun using cbuffGetByte and
    *           check contents was stored correctly
    ***************************************************************************/
    readData = '\0';
    10c4:	1e 8a       	std	Y+22, r1	; 0x16
    writeData = 'A';
    10c6:	81 e4       	ldi	r24, 0x41	; 65
    10c8:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    /* Read buffer until cbuffGetByte tells us we can't read any more */
    while (x < 0xFF)
    10cc:	15 c0       	rjmp	.+42     	; 0x10f8 <main+0x3e6>
    {
        if ((cbuffGetByte(hOutBuffer, &readData)) == CBUFF_GET_OK)
    10ce:	8a 89       	ldd	r24, Y+18	; 0x12
    10d0:	9b 89       	ldd	r25, Y+19	; 0x13
    10d2:	9e 01       	movw	r18, r28
    10d4:	2a 5e       	subi	r18, 0xEA	; 234
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	b9 01       	movw	r22, r18
    10da:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	79 f4       	brne	.+30     	; 0x1100 <main+0x3ee>
        {
            if (readData != writeData)
    10e2:	9e 89       	ldd	r25, Y+22	; 0x16
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	98 17       	cp	r25, r24
    10e8:	09 f0       	breq	.+2      	; 0x10ec <main+0x3da>
            {
                /* ERROR - data read was incorrect */
#ifdef __i386__
                assert(0);
#else
                while(1);
    10ea:	ff cf       	rjmp	.-2      	; 0x10ea <main+0x3d8>
#endif
            }
            else
            {
                writeData++;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	8f 5f       	subi	r24, 0xFF	; 255
    10f0:	89 83       	std	Y+1, r24	; 0x01
                x++;
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    ***************************************************************************/
    readData = '\0';
    writeData = 'A';
    x = 0;
    /* Read buffer until cbuffGetByte tells us we can't read any more */
    while (x < 0xFF)
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	41 f7       	brne	.-48     	; 0x10ce <main+0x3bc>
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <main+0x3f0>
                x++;
            }
        }
        else
        {
            break;
    1100:	00 00       	nop
        }
    }
    if (x == 0xFF)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	09 f4       	brne	.+2      	; 0x110a <main+0x3f8>
    {
        /* ERROR - Buffer underrun not detected */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1108:	ff cf       	rjmp	.-2      	; 0x1108 <main+0x3f6>
#endif
    }

    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    110a:	8a 89       	ldd	r24, Y+18	; 0x12
    110c:	9b 89       	ldd	r25, Y+19	; 0x13
    110e:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	80 32       	cpi	r24, 0x20	; 32
    111c:	91 05       	cpc	r25, r1
    111e:	09 f0       	breq	.+2      	; 0x1122 <main+0x410>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1120:	ff cf       	rjmp	.-2      	; 0x1120 <main+0x40e>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    1122:	8a 89       	ldd	r24, Y+18	; 0x12
    1124:	9b 89       	ldd	r25, Y+19	; 0x13
    1126:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	09 f0       	breq	.+2      	; 0x1138 <main+0x426>
    {
        /* ERROR - Buffer should be empty */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1136:	ff cf       	rjmp	.-2      	; 0x1136 <main+0x424>
    /***************************************************************************
    * TEST 14 - Check buffer sizes calculate correctly when there is some data
    *           in the buffer, and also when for head-before-tail and tail-
    *           before-head situations
    ***************************************************************************/
    writeData = 'a';
    1138:	81 e6       	ldi	r24, 0x61	; 97
    113a:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    113c:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    113e:	0f c0       	rjmp	.+30     	; 0x115e <main+0x44c>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    1140:	8a 89       	ldd	r24, Y+18	; 0x12
    1142:	9b 89       	ldd	r25, Y+19	; 0x13
    1144:	69 81       	ldd	r22, Y+1	; 0x01
    1146:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	39 f4       	brne	.+14     	; 0x115c <main+0x44a>
        {
            writeData++;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	89 83       	std	Y+1, r24	; 0x01
            x++;
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	8a 83       	std	Y+2, r24	; 0x02
    115a:	01 c0       	rjmp	.+2      	; 0x115e <main+0x44c>
        {
            /* ERROR - cbuffPutByte failed unexpectedly */
#ifdef __i386__
        assert(0);
#else
        while(1);
    115c:	ff cf       	rjmp	.-2      	; 0x115c <main+0x44a>
    *           before-head situations
    ***************************************************************************/
    writeData = 'a';
    x = 0;
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	86 31       	cpi	r24, 0x16	; 22
    1162:	70 f3       	brcs	.-36     	; 0x1140 <main+0x42e>
#endif
        }
    }

    /* Check sizes are correctly calculated */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1164:	8a 89       	ldd	r24, Y+18	; 0x12
    1166:	9b 89       	ldd	r25, Y+19	; 0x13
    1168:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 10 )
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	8a 30       	cpi	r24, 0x0A	; 10
    1176:	91 05       	cpc	r25, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <main+0x46a>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    117a:	ff cf       	rjmp	.-2      	; 0x117a <main+0x468>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    117c:	8a 89       	ldd	r24, Y+18	; 0x12
    117e:	9b 89       	ldd	r25, Y+19	; 0x13
    1180:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != (OUTBUFFERSIZE - 10))
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	86 31       	cpi	r24, 0x16	; 22
    118e:	91 05       	cpc	r25, r1
    1190:	09 f0       	breq	.+2      	; 0x1194 <main+0x482>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1192:	ff cf       	rjmp	.-2      	; 0x1192 <main+0x480>
#endif
    }

    /* Read out buffer contents*/
    while(cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    1194:	00 00       	nop
    1196:	8a 89       	ldd	r24, Y+18	; 0x12
    1198:	9b 89       	ldd	r25, Y+19	; 0x13
    119a:	9e 01       	movw	r18, r28
    119c:	2a 5e       	subi	r18, 0xEA	; 234
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	b9 01       	movw	r22, r18
    11a2:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	b1 f3       	breq	.-20     	; 0x1196 <main+0x484>
    /* Add some data to buffer so that inPointer buffer wrap occurs */
    writeData = 'A';
    11aa:	81 e4       	ldi	r24, 0x41	; 65
    11ac:	89 83       	std	Y+1, r24	; 0x01
    x = 0;
    11ae:	1a 82       	std	Y+2, r1	; 0x02
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    11b0:	0f c0       	rjmp	.+30     	; 0x11d0 <main+0x4be>
    {
        if ((cbuffPutByte(hOutBuffer, writeData)) == CBUFF_PUT_OK)
    11b2:	8a 89       	ldd	r24, Y+18	; 0x12
    11b4:	9b 89       	ldd	r25, Y+19	; 0x13
    11b6:	69 81       	ldd	r22, Y+1	; 0x01
    11b8:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	39 f4       	brne	.+14     	; 0x11ce <main+0x4bc>
        {
            writeData++;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	89 83       	std	Y+1, r24	; 0x01
            x++;
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	8f 5f       	subi	r24, 0xFF	; 255
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <main+0x4be>
        {
            /* ERROR - cbuffPutByte failed unexpectedly */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11ce:	ff cf       	rjmp	.-2      	; 0x11ce <main+0x4bc>
    while(cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    /* Add some data to buffer so that inPointer buffer wrap occurs */
    writeData = 'A';
    x = 0;
    /* Fill buffer with some data */
    while (x < (OUTBUFFERSIZE - 10) )
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	86 31       	cpi	r24, 0x16	; 22
    11d4:	70 f3       	brcs	.-36     	; 0x11b2 <main+0x4a0>
#endif
        }
    }

    /* Check sizes are correctly calculated */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    11d6:	8a 89       	ldd	r24, Y+18	; 0x12
    11d8:	9b 89       	ldd	r25, Y+19	; 0x13
    11da:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 10 )
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	8a 30       	cpi	r24, 0x0A	; 10
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f0       	breq	.+2      	; 0x11ee <main+0x4dc>
    {
        /* ERROR - Space remaining should be OUTBUFFERSIZE */
#ifdef __i386__
        assert(0);
#else
        while(1);
    11ec:	ff cf       	rjmp	.-2      	; 0x11ec <main+0x4da>
#endif
    }
    dataInBuffer = cbuffGetFill(hOutBuffer);
    11ee:	8a 89       	ldd	r24, Y+18	; 0x12
    11f0:	9b 89       	ldd	r25, Y+19	; 0x13
    11f2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != (OUTBUFFERSIZE - 10))
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	86 31       	cpi	r24, 0x16	; 22
    1200:	91 05       	cpc	r25, r1
    1202:	09 f0       	breq	.+2      	; 0x1206 <main+0x4f4>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1204:	ff cf       	rjmp	.-2      	; 0x1204 <main+0x4f2>
    /***************************************************************************
    * TEST 15 - Clear this buffer and ensure that function calls return that
    *           buffer is empty
    ***************************************************************************/
    /* Clear this buffer to start new tests */
    cbuffClearBuffer(hOutBuffer);
    1206:	8a 89       	ldd	r24, Y+18	; 0x12
    1208:	9b 89       	ldd	r25, Y+19	; 0x13
    120a:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>

    /* Check buffer is empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    120e:	8a 89       	ldd	r24, Y+18	; 0x12
    1210:	9b 89       	ldd	r25, Y+19	; 0x13
    1212:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	80 32       	cpi	r24, 0x20	; 32
    1220:	91 05       	cpc	r25, r1
    1222:	09 f0       	breq	.+2      	; 0x1226 <main+0x514>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <main+0x512>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    1226:	8a 89       	ldd	r24, Y+18	; 0x12
    1228:	9b 89       	ldd	r25, Y+19	; 0x13
    122a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 0)
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	09 f0       	breq	.+2      	; 0x123c <main+0x52a>
    {
        /* ERROR - Buffer fill incorrectly calculated */
#ifdef __i386__
        assert(0);
#else
        while(1);
    123a:	ff cf       	rjmp	.-2      	; 0x123a <main+0x528>
    * TEST 16 - Check cbuffPeekHead and cbuffPeekTail don't read anything from
    *           an empty buffer
    * NOTE: This test relies upon the status of the previous test, i.e. that the
    *       buffers used are empty!
    ***************************************************************************/
    if ((cbuffPeekHead(hOutBuffer, &readData)) == CBUFF_GET_OK)
    123c:	8a 89       	ldd	r24, Y+18	; 0x12
    123e:	9b 89       	ldd	r25, Y+19	; 0x13
    1240:	9e 01       	movw	r18, r28
    1242:	2a 5e       	subi	r18, 0xEA	; 234
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 5e 04 	call	0x8bc	; 0x8bc <cbuffPeekHead>
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	09 f4       	brne	.+2      	; 0x1252 <main+0x540>
    {
        /* ERROR - peeked head data that isn't there */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1250:	ff cf       	rjmp	.-2      	; 0x1250 <main+0x53e>
#endif
    }

    if ((cbuffPeekTail(hOutBuffer, &readData)) == CBUFF_GET_OK)
    1252:	8a 89       	ldd	r24, Y+18	; 0x12
    1254:	9b 89       	ldd	r25, Y+19	; 0x13
    1256:	9e 01       	movw	r18, r28
    1258:	2a 5e       	subi	r18, 0xEA	; 234
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	b9 01       	movw	r22, r18
    125e:	0e 94 35 04 	call	0x86a	; 0x86a <cbuffPeekTail>
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	09 f4       	brne	.+2      	; 0x1268 <main+0x556>
    {
        /* ERROR - peeked tail data that isn't there */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1266:	ff cf       	rjmp	.-2      	; 0x1266 <main+0x554>
    /***************************************************************************
    * TEST 17 - Put some data in the buffer and then peek the head and tail
    *
    ***************************************************************************/
    /* Empty buffers to start with known state */
    cbuffClearBuffer(hOutBuffer);
    1268:	8a 89       	ldd	r24, Y+18	; 0x12
    126a:	9b 89       	ldd	r25, Y+19	; 0x13
    126c:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>

    writeData = 'a';
    1270:	81 e6       	ldi	r24, 0x61	; 97
    1272:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 10; x++)
    1274:	1a 82       	std	Y+2, r1	; 0x02
    1276:	0b c0       	rjmp	.+22     	; 0x128e <main+0x57c>
    {
        cbuffPutByte(hOutBuffer, writeData);
    1278:	8a 89       	ldd	r24, Y+18	; 0x12
    127a:	9b 89       	ldd	r25, Y+19	; 0x13
    127c:	69 81       	ldd	r22, Y+1	; 0x01
    127e:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
        writeData++;
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	89 83       	std	Y+1, r24	; 0x01
    ***************************************************************************/
    /* Empty buffers to start with known state */
    cbuffClearBuffer(hOutBuffer);

    writeData = 'a';
    for (x = 0; x < 10; x++)
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	8a 30       	cpi	r24, 0x0A	; 10
    1292:	90 f3       	brcs	.-28     	; 0x1278 <main+0x566>
    {
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }

    if ((cbuffPeekHead(hOutBuffer, &readData)) != CBUFF_GET_OK)
    1294:	8a 89       	ldd	r24, Y+18	; 0x12
    1296:	9b 89       	ldd	r25, Y+19	; 0x13
    1298:	9e 01       	movw	r18, r28
    129a:	2a 5e       	subi	r18, 0xEA	; 234
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	b9 01       	movw	r22, r18
    12a0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <cbuffPeekHead>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	09 f0       	breq	.+2      	; 0x12aa <main+0x598>
    {
        /* ERROR - couldn't peek head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12a8:	ff cf       	rjmp	.-2      	; 0x12a8 <main+0x596>
#endif
    }

    if (readData != (writeData-1))
    12aa:	8e 89       	ldd	r24, Y+22	; 0x16
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	28 17       	cp	r18, r24
    12ba:	39 07       	cpc	r19, r25
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <main+0x5ae>
    {
        /* ERROR - peeked incorrect head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12be:	ff cf       	rjmp	.-2      	; 0x12be <main+0x5ac>
#endif
    }

    if ((cbuffPeekTail(hOutBuffer, &readData)) != CBUFF_GET_OK)
    12c0:	8a 89       	ldd	r24, Y+18	; 0x12
    12c2:	9b 89       	ldd	r25, Y+19	; 0x13
    12c4:	9e 01       	movw	r18, r28
    12c6:	2a 5e       	subi	r18, 0xEA	; 234
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ca:	b9 01       	movw	r22, r18
    12cc:	0e 94 35 04 	call	0x86a	; 0x86a <cbuffPeekTail>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <main+0x5c4>
    {
        /* ERROR - couldn't peek tail data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12d4:	ff cf       	rjmp	.-2      	; 0x12d4 <main+0x5c2>
#endif
    }

    if (readData != 'a')
    12d6:	8e 89       	ldd	r24, Y+22	; 0x16
    12d8:	81 36       	cpi	r24, 0x61	; 97
    12da:	09 f0       	breq	.+2      	; 0x12de <main+0x5cc>
    {
        /* ERROR - peeked incorrect tail data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    12dc:	ff cf       	rjmp	.-2      	; 0x12dc <main+0x5ca>
    /***************************************************************************
    * TEST 18 - Check cbuffPeekHead works when inPointer points to startOfBuffer
    * NOTE: This test relies upon the status of the previous test!
    ***************************************************************************/
    /* Read some bytes out of buffer */
    for (x = 0; x < 6; x++)
    12de:	1a 82       	std	Y+2, r1	; 0x02
    12e0:	0b c0       	rjmp	.+22     	; 0x12f8 <main+0x5e6>
    {
        cbuffGetByte(hOutBuffer, &readData);
    12e2:	8a 89       	ldd	r24, Y+18	; 0x12
    12e4:	9b 89       	ldd	r25, Y+19	; 0x13
    12e6:	9e 01       	movw	r18, r28
    12e8:	2a 5e       	subi	r18, 0xEA	; 234
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	b9 01       	movw	r22, r18
    12ee:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    /***************************************************************************
    * TEST 18 - Check cbuffPeekHead works when inPointer points to startOfBuffer
    * NOTE: This test relies upon the status of the previous test!
    ***************************************************************************/
    /* Read some bytes out of buffer */
    for (x = 0; x < 6; x++)
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	86 30       	cpi	r24, 0x06	; 6
    12fc:	90 f3       	brcs	.-28     	; 0x12e2 <main+0x5d0>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }

    /* Write enough bytes to get inPointer on startOfBuffer boundary */
    writeData = 'a';
    12fe:	81 e6       	ldi	r24, 0x61	; 97
    1300:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 22; x++)
    1302:	1a 82       	std	Y+2, r1	; 0x02
    1304:	0b c0       	rjmp	.+22     	; 0x131c <main+0x60a>
    {
        cbuffPutByte(hOutBuffer, writeData);
    1306:	8a 89       	ldd	r24, Y+18	; 0x12
    1308:	9b 89       	ldd	r25, Y+19	; 0x13
    130a:	69 81       	ldd	r22, Y+1	; 0x01
    130c:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
        writeData++;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	89 83       	std	Y+1, r24	; 0x01
        cbuffGetByte(hOutBuffer, &readData);
    }

    /* Write enough bytes to get inPointer on startOfBuffer boundary */
    writeData = 'a';
    for (x = 0; x < 22; x++)
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	86 31       	cpi	r24, 0x16	; 22
    1320:	90 f3       	brcs	.-28     	; 0x1306 <main+0x5f4>
    {
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }

    if ((cbuffPeekHead(hOutBuffer, &readData)) != CBUFF_GET_OK)
    1322:	8a 89       	ldd	r24, Y+18	; 0x12
    1324:	9b 89       	ldd	r25, Y+19	; 0x13
    1326:	9e 01       	movw	r18, r28
    1328:	2a 5e       	subi	r18, 0xEA	; 234
    132a:	3f 4f       	sbci	r19, 0xFF	; 255
    132c:	b9 01       	movw	r22, r18
    132e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <cbuffPeekHead>
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	09 f0       	breq	.+2      	; 0x1338 <main+0x626>
    {
        /* ERROR - couldn't peek head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1336:	ff cf       	rjmp	.-2      	; 0x1336 <main+0x624>
#endif
    }

    if (readData != (writeData-1))
    1338:	8e 89       	ldd	r24, Y+22	; 0x16
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	28 17       	cp	r18, r24
    1348:	39 07       	cpc	r19, r25
    134a:	09 f0       	breq	.+2      	; 0x134e <main+0x63c>
    {
        /* ERROR - peeked incorrect head data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    134c:	ff cf       	rjmp	.-2      	; 0x134c <main+0x63a>

    /***************************************************************************
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    134e:	8a 89       	ldd	r24, Y+18	; 0x12
    1350:	9b 89       	ldd	r25, Y+19	; 0x13
    1352:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>
    writeData = '1';
    1356:	81 e3       	ldi	r24, 0x31	; 49
    1358:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 8; x++)
    135a:	1a 82       	std	Y+2, r1	; 0x02
    135c:	0f c0       	rjmp	.+30     	; 0x137c <main+0x66a>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    135e:	8a 89       	ldd	r24, Y+18	; 0x12
    1360:	9b 89       	ldd	r25, Y+19	; 0x13
    1362:	69 81       	ldd	r22, Y+1	; 0x01
    1364:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	39 f4       	brne	.+14     	; 0x137a <main+0x668>
        {
            writeData++;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	89 83       	std	Y+1, r24	; 0x01
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	01 c0       	rjmp	.+2      	; 0x137c <main+0x66a>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    137a:	ff cf       	rjmp	.-2      	; 0x137a <main+0x668>
    * TEST 19 - Check cbuffUnputByte function
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	70 f3       	brcs	.-36     	; 0x135e <main+0x64c>
            while(1);
#endif
        }
    }

    writeData-=2;
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	82 50       	subi	r24, 0x02	; 2
    1386:	89 83       	std	Y+1, r24	; 0x01
    /* unput the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there      */
    x = 0;
    1388:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUnputByte(hOutBuffer))
    138a:	8a 89       	ldd	r24, Y+18	; 0x12
    138c:	9b 89       	ldd	r25, Y+19	; 0x13
    138e:	0e 94 a1 04 	call	0x942	; 0x942 <cbuffUnputByte>
    1392:	88 23       	and	r24, r24
    1394:	c9 f4       	brne	.+50     	; 0x13c8 <main+0x6b6>
        {
            if (cbuffPeekHead(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	9b 89       	ldd	r25, Y+19	; 0x13
    139a:	9e 01       	movw	r18, r28
    139c:	2a 5e       	subi	r18, 0xEA	; 234
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	b9 01       	movw	r22, r18
    13a2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <cbuffPeekHead>
    13a6:	88 23       	and	r24, r24
    13a8:	59 f0       	breq	.+22     	; 0x13c0 <main+0x6ae>
            {
                if (readData != writeData)
    13aa:	9e 89       	ldd	r25, Y+22	; 0x16
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	98 17       	cp	r25, r24
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <main+0x6a2>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    13b2:	ff cf       	rjmp	.-2      	; 0x13b2 <main+0x6a0>
#endif
                }
                writeData--;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01
                x++;
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	8f 3f       	cpi	r24, 0xFF	; 255
    13c4:	11 f7       	brne	.-60     	; 0x138a <main+0x678>
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <main+0x6b8>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    13c8:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to read too much data */
    if (x >= 8)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 30       	cpi	r24, 0x08	; 8
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <main+0x6c0>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    13d0:	ff cf       	rjmp	.-2      	; 0x13d0 <main+0x6be>
#endif
    }

    /* Check buffer is now empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    13d2:	8a 89       	ldd	r24, Y+18	; 0x12
    13d4:	9b 89       	ldd	r25, Y+19	; 0x13
    13d6:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	80 32       	cpi	r24, 0x20	; 32
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f0       	breq	.+2      	; 0x13ea <main+0x6d8>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    13e8:	ff cf       	rjmp	.-2      	; 0x13e8 <main+0x6d6>

    /***************************************************************************
    * TEST 20 - Try to unput over the wrap boundary
    ***************************************************************************/
    /* Start with an empty buffer */
    cbuffClearBuffer(hOutBuffer);
    13ea:	8a 89       	ldd	r24, Y+18	; 0x12
    13ec:	9b 89       	ldd	r25, Y+19	; 0x13
    13ee:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>
    
    writeData = 'A';
    13f2:	81 e4       	ldi	r24, 0x41	; 65
    13f4:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 10; x++)
    13f6:	1a 82       	std	Y+2, r1	; 0x02
    13f8:	0b c0       	rjmp	.+22     	; 0x1410 <main+0x6fe>
    {
        cbuffPutByte(hOutBuffer, writeData);
    13fa:	8a 89       	ldd	r24, Y+18	; 0x12
    13fc:	9b 89       	ldd	r25, Y+19	; 0x13
    13fe:	69 81       	ldd	r22, Y+1	; 0x01
    1400:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
        writeData++;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	89 83       	std	Y+1, r24	; 0x01
    ***************************************************************************/
    /* Start with an empty buffer */
    cbuffClearBuffer(hOutBuffer);
    
    writeData = 'A';
    for (x = 0; x < 10; x++)
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	8a 83       	std	Y+2, r24	; 0x02
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	8a 30       	cpi	r24, 0x0A	; 10
    1414:	90 f3       	brcs	.-28     	; 0x13fa <main+0x6e8>
        cbuffPutByte(hOutBuffer, writeData);
        writeData++;
    }
    
    /* Read data out again */
    while (cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    1416:	00 00       	nop
    1418:	8a 89       	ldd	r24, Y+18	; 0x12
    141a:	9b 89       	ldd	r25, Y+19	; 0x13
    141c:	9e 01       	movw	r18, r28
    141e:	2a 5e       	subi	r18, 0xEA	; 234
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	b9 01       	movw	r22, r18
    1424:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	b1 f3       	breq	.-20     	; 0x1418 <main+0x706>
    
    /* Fill buffer so we wrap the boundary */
    writeData = 'A';
    142c:	81 e4       	ldi	r24, 0x41	; 65
    142e:	89 83       	std	Y+1, r24	; 0x01
    while (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <main+0x726>
    {
        writeData++;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	8f 5f       	subi	r24, 0xFF	; 255
    1436:	89 83       	std	Y+1, r24	; 0x01
    /* Read data out again */
    while (cbuffGetByte(hOutBuffer, &readData) == CBUFF_GET_OK);
    
    /* Fill buffer so we wrap the boundary */
    writeData = 'A';
    while (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    1438:	8a 89       	ldd	r24, Y+18	; 0x12
    143a:	9b 89       	ldd	r25, Y+19	; 0x13
    143c:	69 81       	ldd	r22, Y+1	; 0x01
    143e:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	b1 f3       	breq	.-20     	; 0x1432 <main+0x720>
    {
        writeData++;
    }
    writeData-=2;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	82 50       	subi	r24, 0x02	; 2
    144a:	89 83       	std	Y+1, r24	; 0x01
    
    /* unput the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there and the wrap-around works */
    x = 0;
    144c:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUnputByte(hOutBuffer))
    144e:	8a 89       	ldd	r24, Y+18	; 0x12
    1450:	9b 89       	ldd	r25, Y+19	; 0x13
    1452:	0e 94 a1 04 	call	0x942	; 0x942 <cbuffUnputByte>
    1456:	88 23       	and	r24, r24
    1458:	c9 f4       	brne	.+50     	; 0x148c <main+0x77a>
        {
            if (cbuffPeekHead(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    145a:	8a 89       	ldd	r24, Y+18	; 0x12
    145c:	9b 89       	ldd	r25, Y+19	; 0x13
    145e:	9e 01       	movw	r18, r28
    1460:	2a 5e       	subi	r18, 0xEA	; 234
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	b9 01       	movw	r22, r18
    1466:	0e 94 5e 04 	call	0x8bc	; 0x8bc <cbuffPeekHead>
    146a:	88 23       	and	r24, r24
    146c:	59 f0       	breq	.+22     	; 0x1484 <main+0x772>
            {
                if (readData != writeData)
    146e:	9e 89       	ldd	r25, Y+22	; 0x16
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	98 17       	cp	r25, r24
    1474:	09 f0       	breq	.+2      	; 0x1478 <main+0x766>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <main+0x764>
#endif
                }
                writeData--;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	81 50       	subi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
                x++;
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	8f 5f       	subi	r24, 0xFF	; 255
    1482:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	8f 3f       	cpi	r24, 0xFF	; 255
    1488:	11 f7       	brne	.-60     	; 0x144e <main+0x73c>
    148a:	01 c0       	rjmp	.+2      	; 0x148e <main+0x77c>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    148c:	00 00       	nop
        }
    } while(x < 0xFF);
    
    /* Check buffer is now empty */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    148e:	8a 89       	ldd	r24, Y+18	; 0x12
    1490:	9b 89       	ldd	r25, Y+19	; 0x13
    1492:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != OUTBUFFERSIZE)
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	9c 81       	ldd	r25, Y+4	; 0x04
    149e:	80 32       	cpi	r24, 0x20	; 32
    14a0:	91 05       	cpc	r25, r1
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <main+0x794>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    14a4:	ff cf       	rjmp	.-2      	; 0x14a4 <main+0x792>
    * TEST 20a - Check cbuffUngetByte function - first fill the buffer with
    *            some known data, then remove some, then unget it i.e. put it
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    14a6:	8a 89       	ldd	r24, Y+18	; 0x12
    14a8:	9b 89       	ldd	r25, Y+19	; 0x13
    14aa:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>
    writeData = 'a';
    14ae:	81 e6       	ldi	r24, 0x61	; 97
    14b0:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < OUTBUFFERSIZE; x++)
    14b2:	1a 82       	std	Y+2, r1	; 0x02
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <main+0x7c2>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    14b6:	8a 89       	ldd	r24, Y+18	; 0x12
    14b8:	9b 89       	ldd	r25, Y+19	; 0x13
    14ba:	69 81       	ldd	r22, Y+1	; 0x01
    14bc:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	39 f4       	brne	.+14     	; 0x14d2 <main+0x7c0>
        {
            writeData++;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	89 83       	std	Y+1, r24	; 0x01
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = 'a';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <main+0x7c2>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    14d2:	ff cf       	rjmp	.-2      	; 0x14d2 <main+0x7c0>
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer */
    cbuffClearBuffer(hOutBuffer);
    writeData = 'a';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	80 32       	cpi	r24, 0x20	; 32
    14d8:	70 f3       	brcs	.-36     	; 0x14b6 <main+0x7a4>
#endif
        }
    }

    /* Take out all the bytes of data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    14da:	1a 82       	std	Y+2, r1	; 0x02
    14dc:	0e c0       	rjmp	.+28     	; 0x14fa <main+0x7e8>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    14de:	8a 89       	ldd	r24, Y+18	; 0x12
    14e0:	9b 89       	ldd	r25, Y+19	; 0x13
    14e2:	9e 01       	movw	r18, r28
    14e4:	2a 5e       	subi	r18, 0xEA	; 234
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	b9 01       	movw	r22, r18
    14ea:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <main+0x7e2>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    14f2:	ff cf       	rjmp	.-2      	; 0x14f2 <main+0x7e0>
#endif
        }
    }

    /* Take out all the bytes of data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 32       	cpi	r24, 0x20	; 32
    14fe:	78 f3       	brcs	.-34     	; 0x14de <main+0x7cc>
            while(1);
#endif
        }
    }
    
    writeData-=1;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	81 50       	subi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
    
    /* unget all the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there          */
    x = 0;
    1506:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUngetByte(hOutBuffer))
    1508:	8a 89       	ldd	r24, Y+18	; 0x12
    150a:	9b 89       	ldd	r25, Y+19	; 0x13
    150c:	0e 94 00 05 	call	0xa00	; 0xa00 <cbuffUngetByte>
    1510:	88 23       	and	r24, r24
    1512:	c9 f4       	brne	.+50     	; 0x1546 <main+0x834>
        {
            if (cbuffPeekTail(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    1514:	8a 89       	ldd	r24, Y+18	; 0x12
    1516:	9b 89       	ldd	r25, Y+19	; 0x13
    1518:	9e 01       	movw	r18, r28
    151a:	2a 5e       	subi	r18, 0xEA	; 234
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	b9 01       	movw	r22, r18
    1520:	0e 94 35 04 	call	0x86a	; 0x86a <cbuffPeekTail>
    1524:	88 23       	and	r24, r24
    1526:	59 f0       	breq	.+22     	; 0x153e <main+0x82c>
            {
                if (readData != writeData)
    1528:	9e 89       	ldd	r25, Y+22	; 0x16
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	98 17       	cp	r25, r24
    152e:	09 f0       	breq	.+2      	; 0x1532 <main+0x820>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    1530:	ff cf       	rjmp	.-2      	; 0x1530 <main+0x81e>
#endif
                }
                writeData--;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	81 50       	subi	r24, 0x01	; 1
    1536:	89 83       	std	Y+1, r24	; 0x01
                x++;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	8f 3f       	cpi	r24, 0xFF	; 255
    1542:	11 f7       	brne	.-60     	; 0x1508 <main+0x7f6>
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <main+0x836>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    1546:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to unget more data than available */
    if (x != OUTBUFFERSIZE)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 32       	cpi	r24, 0x20	; 32
    154c:	09 f0       	breq	.+2      	; 0x1550 <main+0x83e>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    154e:	ff cf       	rjmp	.-2      	; 0x154e <main+0x83c>
#endif
    }

    /* Check buffer contains has no space */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1550:	8a 89       	ldd	r24, Y+18	; 0x12
    1552:	9b 89       	ldd	r25, Y+19	; 0x13
    1554:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    1558:	9c 83       	std	Y+4, r25	; 0x04
    155a:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 0)
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	09 f0       	breq	.+2      	; 0x1566 <main+0x854>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1564:	ff cf       	rjmp	.-2      	; 0x1564 <main+0x852>
    *            the start of the buffer boundary. Then fill the buffer with 
    *            some known data, then remove some, then unget it i.e. put it
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    1566:	8a 89       	ldd	r24, Y+18	; 0x12
    1568:	9b 89       	ldd	r25, Y+19	; 0x13
    156a:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>
    writeData = '1';
    156e:	81 e3       	ldi	r24, 0x31	; 49
    1570:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < 8; x++)
    1572:	1a 82       	std	Y+2, r1	; 0x02
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <main+0x882>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    1576:	8a 89       	ldd	r24, Y+18	; 0x12
    1578:	9b 89       	ldd	r25, Y+19	; 0x13
    157a:	69 81       	ldd	r22, Y+1	; 0x01
    157c:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	39 f4       	brne	.+14     	; 0x1592 <main+0x880>
        {
            writeData++;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	89 83       	std	Y+1, r24	; 0x01
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <main+0x882>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1592:	ff cf       	rjmp	.-2      	; 0x1592 <main+0x880>
    *            back. 
    ***************************************************************************/
    /* Put some data in empty buffer to move pointers away from start address */
    cbuffClearBuffer(hOutBuffer);
    writeData = '1';
    for (x = 0; x < 8; x++)
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	70 f3       	brcs	.-36     	; 0x1576 <main+0x864>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < 8; x++)
    159a:	1a 82       	std	Y+2, r1	; 0x02
    159c:	0e c0       	rjmp	.+28     	; 0x15ba <main+0x8a8>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    159e:	8a 89       	ldd	r24, Y+18	; 0x12
    15a0:	9b 89       	ldd	r25, Y+19	; 0x13
    15a2:	9e 01       	movw	r18, r28
    15a4:	2a 5e       	subi	r18, 0xEA	; 234
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	b9 01       	movw	r22, r18
    15aa:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <main+0x8a2>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    15b2:	ff cf       	rjmp	.-2      	; 0x15b2 <main+0x8a0>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < 8; x++)
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	8f 5f       	subi	r24, 0xFF	; 255
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	88 30       	cpi	r24, 0x08	; 8
    15be:	78 f3       	brcs	.-34     	; 0x159e <main+0x88c>
#endif
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    15c0:	81 e4       	ldi	r24, 0x41	; 65
    15c2:	89 83       	std	Y+1, r24	; 0x01
    for (x = 0; x < OUTBUFFERSIZE; x++)
    15c4:	1a 82       	std	Y+2, r1	; 0x02
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <main+0x8d4>
    {
        if (cbuffPutByte(hOutBuffer, writeData) == CBUFF_PUT_OK)
    15c8:	8a 89       	ldd	r24, Y+18	; 0x12
    15ca:	9b 89       	ldd	r25, Y+19	; 0x13
    15cc:	69 81       	ldd	r22, Y+1	; 0x01
    15ce:	0e 94 9c 02 	call	0x538	; 0x538 <cbuffPutByte>
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	39 f4       	brne	.+14     	; 0x15e4 <main+0x8d2>
        {
            writeData++;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	8f 5f       	subi	r24, 0xFF	; 255
    15da:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	8f 5f       	subi	r24, 0xFF	; 255
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <main+0x8d4>
        {
            /* ERROR - couldn't put byte in buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    15e4:	ff cf       	rjmp	.-2      	; 0x15e4 <main+0x8d2>
        }
    }
    
    /* Now fill the buffer with data; wraps across boundary */
    writeData = 'A';
    for (x = 0; x < OUTBUFFERSIZE; x++)
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	80 32       	cpi	r24, 0x20	; 32
    15ea:	70 f3       	brcs	.-36     	; 0x15c8 <main+0x8b6>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    15ec:	1a 82       	std	Y+2, r1	; 0x02
    15ee:	0e c0       	rjmp	.+28     	; 0x160c <main+0x8fa>
    {
        if (cbuffGetByte(hOutBuffer, &readData) != CBUFF_GET_OK)
    15f0:	8a 89       	ldd	r24, Y+18	; 0x12
    15f2:	9b 89       	ldd	r25, Y+19	; 0x13
    15f4:	9e 01       	movw	r18, r28
    15f6:	2a 5e       	subi	r18, 0xEA	; 234
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	b9 01       	movw	r22, r18
    15fc:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	09 f0       	breq	.+2      	; 0x1606 <main+0x8f4>
        {
            /* ERROR - couldn't get byte from buffer */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1604:	ff cf       	rjmp	.-2      	; 0x1604 <main+0x8f2>
#endif
        }
    }

    /* Take out all that data */
    for (x = 0; x < OUTBUFFERSIZE; x++)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	8f 5f       	subi	r24, 0xFF	; 255
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	80 32       	cpi	r24, 0x20	; 32
    1610:	78 f3       	brcs	.-34     	; 0x15f0 <main+0x8de>
            while(1);
#endif
        }
    }
        
    writeData-=1;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	81 50       	subi	r24, 0x01	; 1
    1616:	89 83       	std	Y+1, r24	; 0x01
    
    /* unget all the data and check that it matches what we wrote */
    /* Also check we can't unput more data than is there - this   */
    /* 'ungets' over the wrap boundary                            */
    x = 0;
    1618:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if(!cbuffUngetByte(hOutBuffer))
    161a:	8a 89       	ldd	r24, Y+18	; 0x12
    161c:	9b 89       	ldd	r25, Y+19	; 0x13
    161e:	0e 94 00 05 	call	0xa00	; 0xa00 <cbuffUngetByte>
    1622:	88 23       	and	r24, r24
    1624:	c9 f4       	brne	.+50     	; 0x1658 <main+0x946>
        {
            if (cbuffPeekTail(hOutBuffer, &readData) != CBUFF_GET_FAIL)
    1626:	8a 89       	ldd	r24, Y+18	; 0x12
    1628:	9b 89       	ldd	r25, Y+19	; 0x13
    162a:	9e 01       	movw	r18, r28
    162c:	2a 5e       	subi	r18, 0xEA	; 234
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	b9 01       	movw	r22, r18
    1632:	0e 94 35 04 	call	0x86a	; 0x86a <cbuffPeekTail>
    1636:	88 23       	and	r24, r24
    1638:	59 f0       	breq	.+22     	; 0x1650 <main+0x93e>
            {
                if (readData != writeData)
    163a:	9e 89       	ldd	r25, Y+22	; 0x16
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	98 17       	cp	r25, r24
    1640:	09 f0       	breq	.+2      	; 0x1644 <main+0x932>
                {
                    /* ERROR - unput byte didn't move pointer correctly */
#ifdef __i386__
                    assert(0);
#else
                    while(1);
    1642:	ff cf       	rjmp	.-2      	; 0x1642 <main+0x930>
#endif
                }
                writeData--;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	81 50       	subi	r24, 0x01	; 1
    1648:	89 83       	std	Y+1, r24	; 0x01
                x++;
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
            /* If we can't unput data, break from loop */
            break;
        }
    } while(x < 0xFF);
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	8f 3f       	cpi	r24, 0xFF	; 255
    1654:	11 f7       	brne	.-60     	; 0x161a <main+0x908>
    1656:	01 c0       	rjmp	.+2      	; 0x165a <main+0x948>
            }
        }
        else
        {
            /* If we can't unput data, break from loop */
            break;
    1658:	00 00       	nop
        }
    } while(x < 0xFF);

    /* Check we weren't able to unget more data than available */
    if (x != OUTBUFFERSIZE)
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 32       	cpi	r24, 0x20	; 32
    165e:	09 f0       	breq	.+2      	; 0x1662 <main+0x950>
    {
        /* ERROR - unput too many bytes */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1660:	ff cf       	rjmp	.-2      	; 0x1660 <main+0x94e>
#endif
    }

    /* Check buffer contains has no space */
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    1662:	8a 89       	ldd	r24, Y+18	; 0x12
    1664:	9b 89       	ldd	r25, Y+19	; 0x13
    1666:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    166a:	9c 83       	std	Y+4, r25	; 0x04
    166c:	8b 83       	std	Y+3, r24	; 0x03
    if (spaceRemainingInBuffer != 0)
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	09 f0       	breq	.+2      	; 0x1678 <main+0x966>
    {
        /* ERROR - we have an incorrect buffer size return value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1676:	ff cf       	rjmp	.-2      	; 0x1676 <main+0x964>
    
    /***************************************************************************
    * TEST 21 - Try to put data in circular buffer from an array
    ***************************************************************************/
    /* Clear buffers */
    cbuffClearBuffer(hInBuffer);
    1678:	88 89       	ldd	r24, Y+16	; 0x10
    167a:	99 89       	ldd	r25, Y+17	; 0x11
    167c:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>
    cbuffClearBuffer(hOutBuffer);
    1680:	8a 89       	ldd	r24, Y+18	; 0x12
    1682:	9b 89       	ldd	r25, Y+19	; 0x13
    1684:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    1688:	1a 82       	std	Y+2, r1	; 0x02
    168a:	0c c0       	rjmp	.+24     	; 0x16a4 <main+0x992>
    {
        testBuffer2[x] = x + 'A';
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	2a 81       	ldd	r18, Y+2	; 0x02
    1694:	2f 5b       	subi	r18, 0xBF	; 191
    1696:	84 59       	subi	r24, 0x94	; 148
    1698:	9e 4f       	sbci	r25, 0xFE	; 254
    169a:	fc 01       	movw	r30, r24
    169c:	20 83       	st	Z, r18
    /* Clear buffers */
    cbuffClearBuffer(hInBuffer);
    cbuffClearBuffer(hOutBuffer);

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	8f 5f       	subi	r24, 0xFF	; 255
    16a2:	8a 83       	std	Y+2, r24	; 0x02
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	80 31       	cpi	r24, 0x10	; 16
    16a8:	88 f3       	brcs	.-30     	; 0x168c <main+0x97a>
    {
        testBuffer2[x] = x + 'A';
    }

    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    16aa:	8a 89       	ldd	r24, Y+18	; 0x12
    16ac:	9b 89       	ldd	r25, Y+19	; 0x13
    16ae:	2c e6       	ldi	r18, 0x6C	; 108
    16b0:	31 e0       	ldi	r19, 0x01	; 1
    16b2:	b9 01       	movw	r22, r18
    16b4:	40 e1       	ldi	r20, 0x10	; 16
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05

    if (dataInBuffer != 16)
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	80 31       	cpi	r24, 0x10	; 16
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <main+0x9ba>
    {
        /* ERROR - didn't write expected number of bytes in buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    16ca:	ff cf       	rjmp	.-2      	; 0x16ca <main+0x9b8>
#endif
    }

    dataInBuffer = cbuffGetFill(hOutBuffer);
    16cc:	8a 89       	ldd	r24, Y+18	; 0x12
    16ce:	9b 89       	ldd	r25, Y+19	; 0x13
    16d0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <cbuffGetFill>
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    spaceRemainingInBuffer = cbuffGetSpace(hOutBuffer);
    16d8:	8a 89       	ldd	r24, Y+18	; 0x12
    16da:	9b 89       	ldd	r25, Y+19	; 0x13
    16dc:	0e 94 01 03 	call	0x602	; 0x602 <cbuffGetSpace>
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03

    if (dataInBuffer != 16)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	80 31       	cpi	r24, 0x10	; 16
    16ea:	91 05       	cpc	r25, r1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <main+0x9de>
    {
        /* ERROR - buffer fill doesn't match expected value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    16ee:	ff cf       	rjmp	.-2      	; 0x16ee <main+0x9dc>
#endif
    }

    if (spaceRemainingInBuffer != 16)
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	80 31       	cpi	r24, 0x10	; 16
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f0       	breq	.+2      	; 0x16fc <main+0x9ea>
    {
        /* ERROR - bytes remaining doesn't match expected value */
#ifdef __i386__
        assert(0);
#else
        while(1);
    16fa:	ff cf       	rjmp	.-2      	; 0x16fa <main+0x9e8>
#endif
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    16fc:	1a 82       	std	Y+2, r1	; 0x02
    16fe:	16 c0       	rjmp	.+44     	; 0x172c <main+0xa1a>
    {
        cbuffGetByte(hOutBuffer, &readData);
    1700:	8a 89       	ldd	r24, Y+18	; 0x12
    1702:	9b 89       	ldd	r25, Y+19	; 0x13
    1704:	9e 01       	movw	r18, r28
    1706:	2a 5e       	subi	r18, 0xEA	; 234
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	b9 01       	movw	r22, r18
    170c:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
        if (testBuffer2[x] != readData)
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	84 59       	subi	r24, 0x94	; 148
    1718:	9e 4f       	sbci	r25, 0xFE	; 254
    171a:	fc 01       	movw	r30, r24
    171c:	90 81       	ld	r25, Z
    171e:	8e 89       	ldd	r24, Y+22	; 0x16
    1720:	98 17       	cp	r25, r24
    1722:	09 f0       	breq	.+2      	; 0x1726 <main+0xa14>
            /* ERROR - data read from buffer doesn't match data written to    */
            /* buffer                                                         */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1724:	ff cf       	rjmp	.-2      	; 0x1724 <main+0xa12>
        while(1);
#endif
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	8f 5f       	subi	r24, 0xFF	; 255
    172a:	8a 83       	std	Y+2, r24	; 0x02
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	80 31       	cpi	r24, 0x10	; 16
    1730:	38 f3       	brcs	.-50     	; 0x1700 <main+0x9ee>
    }

    /***************************************************************************
    * TEST 22 - Try to overfill a circular buffer from an array
    ***************************************************************************/
    cbuffClearBuffer(hOutBuffer);
    1732:	8a 89       	ldd	r24, Y+18	; 0x12
    1734:	9b 89       	ldd	r25, Y+19	; 0x13
    1736:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    173a:	1a 82       	std	Y+2, r1	; 0x02
    173c:	0c c0       	rjmp	.+24     	; 0x1756 <main+0xa44>
    {
        testBuffer2[x] = x + 'a';
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	2a 81       	ldd	r18, Y+2	; 0x02
    1746:	2f 59       	subi	r18, 0x9F	; 159
    1748:	84 59       	subi	r24, 0x94	; 148
    174a:	9e 4f       	sbci	r25, 0xFE	; 254
    174c:	fc 01       	movw	r30, r24
    174e:	20 83       	st	Z, r18
    * TEST 22 - Try to overfill a circular buffer from an array
    ***************************************************************************/
    cbuffClearBuffer(hOutBuffer);

    /* Fill buffer with test data */
    for(x = 0; x < 16; x++)
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	8a 83       	std	Y+2, r24	; 0x02
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	80 31       	cpi	r24, 0x10	; 16
    175a:	88 f3       	brcs	.-30     	; 0x173e <main+0xa2c>
    {
        testBuffer2[x] = x + 'a';
    }

    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    175c:	8a 89       	ldd	r24, Y+18	; 0x12
    175e:	9b 89       	ldd	r25, Y+19	; 0x13
    1760:	2c e6       	ldi	r18, 0x6C	; 108
    1762:	31 e0       	ldi	r19, 0x01	; 1
    1764:	b9 01       	movw	r22, r18
    1766:	40 e1       	ldi	r20, 0x10	; 16
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	80 31       	cpi	r24, 0x10	; 16
    1778:	91 05       	cpc	r25, r1
    177a:	09 f0       	breq	.+2      	; 0x177e <main+0xa6c>
        /* ERROR - failed to write correct number of bytes to buffer which    */
        /*         had enough space                                           */
#ifdef __i386__
        assert(0);
#else
        while(1);
    177c:	ff cf       	rjmp	.-2      	; 0x177c <main+0xa6a>
#endif
    }
    
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    177e:	8a 89       	ldd	r24, Y+18	; 0x12
    1780:	9b 89       	ldd	r25, Y+19	; 0x13
    1782:	2c e6       	ldi	r18, 0x6C	; 108
    1784:	31 e0       	ldi	r19, 0x01	; 1
    1786:	b9 01       	movw	r22, r18
    1788:	40 e1       	ldi	r20, 0x10	; 16
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	80 31       	cpi	r24, 0x10	; 16
    179a:	91 05       	cpc	r25, r1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <main+0xa8e>
        /* ERROR - failed to write correct number of bytes to buffer which    */
        /*         had enough space                                           */
#ifdef __i386__
        assert(0);
#else
        while(1);
    179e:	ff cf       	rjmp	.-2      	; 0x179e <main+0xa8c>
#endif
    }
    
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    17a0:	8a 89       	ldd	r24, Y+18	; 0x12
    17a2:	9b 89       	ldd	r25, Y+19	; 0x13
    17a4:	2c e6       	ldi	r18, 0x6C	; 108
    17a6:	31 e0       	ldi	r19, 0x01	; 1
    17a8:	b9 01       	movw	r22, r18
    17aa:	40 e1       	ldi	r20, 0x10	; 16
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05

    if (dataInBuffer != 0)
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <main+0xaae>
    {
        /* ERROR - managed to put data into a full buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    17be:	ff cf       	rjmp	.-2      	; 0x17be <main+0xaac>
    /***************************************************************************
    * TEST 23 - Try write a circular buffer from an array over the circ buff
    *           boundary
    ***************************************************************************/
    /* Put new data in buffer */
    for(x = 0; x < 16; x++)
    17c0:	1a 82       	std	Y+2, r1	; 0x02
    17c2:	0c c0       	rjmp	.+24     	; 0x17dc <main+0xaca>
    {
        testBuffer2[x] = x + '0';
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	2a 81       	ldd	r18, Y+2	; 0x02
    17cc:	20 5d       	subi	r18, 0xD0	; 208
    17ce:	84 59       	subi	r24, 0x94	; 148
    17d0:	9e 4f       	sbci	r25, 0xFE	; 254
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
    /***************************************************************************
    * TEST 23 - Try write a circular buffer from an array over the circ buff
    *           boundary
    ***************************************************************************/
    /* Put new data in buffer */
    for(x = 0; x < 16; x++)
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	80 31       	cpi	r24, 0x10	; 16
    17e0:	88 f3       	brcs	.-30     	; 0x17c4 <main+0xab2>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Remove eight bytes from buffer tail, and read eight bytes out */
    for (x = 0; x < 8; x++)
    17e2:	1a 82       	std	Y+2, r1	; 0x02
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <main+0xaf2>
    {
        cbuffUnputByte(hOutBuffer);
    17e6:	8a 89       	ldd	r24, Y+18	; 0x12
    17e8:	9b 89       	ldd	r25, Y+19	; 0x13
    17ea:	0e 94 a1 04 	call	0x942	; 0x942 <cbuffUnputByte>
        cbuffGetByte(hOutBuffer, &readData);
    17ee:	8a 89       	ldd	r24, Y+18	; 0x12
    17f0:	9b 89       	ldd	r25, Y+19	; 0x13
    17f2:	9e 01       	movw	r18, r28
    17f4:	2a 5e       	subi	r18, 0xEA	; 234
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	b9 01       	movw	r22, r18
    17fa:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Remove eight bytes from buffer tail, and read eight bytes out */
    for (x = 0; x < 8; x++)
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	8a 83       	std	Y+2, r24	; 0x02
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	88 30       	cpi	r24, 0x08	; 8
    1808:	70 f3       	brcs	.-36     	; 0x17e6 <main+0xad4>
        cbuffUnputByte(hOutBuffer);
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    180a:	8a 89       	ldd	r24, Y+18	; 0x12
    180c:	9b 89       	ldd	r25, Y+19	; 0x13
    180e:	2c e6       	ldi	r18, 0x6C	; 108
    1810:	31 e0       	ldi	r19, 0x01	; 1
    1812:	b9 01       	movw	r22, r18
    1814:	40 e1       	ldi	r20, 0x10	; 16
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	80 31       	cpi	r24, 0x10	; 16
    1826:	91 05       	cpc	r25, r1
    1828:	09 f0       	breq	.+2      	; 0x182c <main+0xb1a>
    {
        /* ERROR - couldn't get all expected data into buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    182a:	ff cf       	rjmp	.-2      	; 0x182a <main+0xb18>
#endif
    }
    
    /* Read data out and check all is ok */
    /* First, read sixteen bytes out */
    for (x = 0; x < 16; x++)
    182c:	1a 82       	std	Y+2, r1	; 0x02
    182e:	0b c0       	rjmp	.+22     	; 0x1846 <main+0xb34>
    {
        cbuffGetByte(hOutBuffer, &readData);
    1830:	8a 89       	ldd	r24, Y+18	; 0x12
    1832:	9b 89       	ldd	r25, Y+19	; 0x13
    1834:	9e 01       	movw	r18, r28
    1836:	2a 5e       	subi	r18, 0xEA	; 234
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	b9 01       	movw	r22, r18
    183c:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
#endif
    }
    
    /* Read data out and check all is ok */
    /* First, read sixteen bytes out */
    for (x = 0; x < 16; x++)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 31       	cpi	r24, 0x10	; 16
    184a:	90 f3       	brcs	.-28     	; 0x1830 <main+0xb1e>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    184c:	1a 82       	std	Y+2, r1	; 0x02
    184e:	16 c0       	rjmp	.+44     	; 0x187c <main+0xb6a>
    {
        cbuffGetByte(hOutBuffer, &readData);
    1850:	8a 89       	ldd	r24, Y+18	; 0x12
    1852:	9b 89       	ldd	r25, Y+19	; 0x13
    1854:	9e 01       	movw	r18, r28
    1856:	2a 5e       	subi	r18, 0xEA	; 234
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	b9 01       	movw	r22, r18
    185c:	0e 94 c7 03 	call	0x78e	; 0x78e <cbuffGetByte>
        if (testBuffer2[x] != readData)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	84 59       	subi	r24, 0x94	; 148
    1868:	9e 4f       	sbci	r25, 0xFE	; 254
    186a:	fc 01       	movw	r30, r24
    186c:	90 81       	ld	r25, Z
    186e:	8e 89       	ldd	r24, Y+22	; 0x16
    1870:	98 17       	cp	r25, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <main+0xb64>
            /* ERROR - data read from buffer doesn't match data written to    */
            /* buffer                                                         */
#ifdef __i386__
            assert(0);
#else
            while(1);
    1874:	ff cf       	rjmp	.-2      	; 0x1874 <main+0xb62>
    {
        cbuffGetByte(hOutBuffer, &readData);
    }
    
    /* Read data out again and compare */
    for(x = 0; x < 16; x++)
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	80 31       	cpi	r24, 0x10	; 16
    1880:	38 f3       	brcs	.-50     	; 0x1850 <main+0xb3e>

    /***************************************************************************
    * TEST 24 - Try to read data out of circular buffer into an array
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    1882:	8a 89       	ldd	r24, Y+18	; 0x12
    1884:	9b 89       	ldd	r25, Y+19	; 0x13
    1886:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    188a:	1a 82       	std	Y+2, r1	; 0x02
    188c:	0c c0       	rjmp	.+24     	; 0x18a6 <main+0xb94>
    {
        testBuffer2[x] = x + 'a';
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	2a 81       	ldd	r18, Y+2	; 0x02
    1896:	2f 59       	subi	r18, 0x9F	; 159
    1898:	84 59       	subi	r24, 0x94	; 148
    189a:	9e 4f       	sbci	r25, 0xFE	; 254
    189c:	fc 01       	movw	r30, r24
    189e:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	80 31       	cpi	r24, 0x10	; 16
    18aa:	88 f3       	brcs	.-30     	; 0x188e <main+0xb7c>
    {
        testBuffer2[x] = x + 'a';
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    18ac:	8a 89       	ldd	r24, Y+18	; 0x12
    18ae:	9b 89       	ldd	r25, Y+19	; 0x13
    18b0:	2c e6       	ldi	r18, 0x6C	; 108
    18b2:	31 e0       	ldi	r19, 0x01	; 1
    18b4:	b9 01       	movw	r22, r18
    18b6:	40 e1       	ldi	r20, 0x10	; 16
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    /* Clear local array */
    for(x = 0; x < 16; x++)
    18c2:	1a 82       	std	Y+2, r1	; 0x02
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <main+0xbc8>
    {
        testBuffer2[x] = 0;
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	84 59       	subi	r24, 0x94	; 148
    18ce:	9e 4f       	sbci	r25, 0xFE	; 254
    18d0:	fc 01       	movw	r30, r24
    18d2:	10 82       	st	Z, r1
    }
    
    /* Put data in the buffer from an array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    /* Clear local array */
    for(x = 0; x < 16; x++)
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	8a 83       	std	Y+2, r24	; 0x02
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	80 31       	cpi	r24, 0x10	; 16
    18de:	98 f3       	brcs	.-26     	; 0x18c6 <main+0xbb4>
    {
        testBuffer2[x] = 0;
    }
    
    /* Read buffer out into local array */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    18e0:	8a 89       	ldd	r24, Y+18	; 0x12
    18e2:	9b 89       	ldd	r25, Y+19	; 0x13
    18e4:	2c e6       	ldi	r18, 0x6C	; 108
    18e6:	31 e0       	ldi	r19, 0x01	; 1
    18e8:	b9 01       	movw	r22, r18
    18ea:	40 e1       	ldi	r20, 0x10	; 16
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	0e 94 ee 05 	call	0xbdc	; 0xbdc <cbuffGetArray>
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	80 31       	cpi	r24, 0x10	; 16
    18fc:	91 05       	cpc	r25, r1
    18fe:	09 f0       	breq	.+2      	; 0x1902 <main+0xbf0>
    {
        /* ERROR - didn't read required quantity of data */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1900:	ff cf       	rjmp	.-2      	; 0x1900 <main+0xbee>
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1902:	1a 82       	std	Y+2, r1	; 0x02
    1904:	15 c0       	rjmp	.+42     	; 0x1930 <main+0xc1e>
    {
        if (testBuffer2[x] != x + 'a')
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	84 59       	subi	r24, 0x94	; 148
    190e:	9e 4f       	sbci	r25, 0xFE	; 254
    1910:	fc 01       	movw	r30, r24
    1912:	80 81       	ld	r24, Z
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	8f 59       	subi	r24, 0x9F	; 159
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	09 f0       	breq	.+2      	; 0x192a <main+0xc18>
        {
            /* ERROR - data read doesn't match data written */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1928:	ff cf       	rjmp	.-2      	; 0x1928 <main+0xc16>
        while(1);
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	80 31       	cpi	r24, 0x10	; 16
    1934:	40 f3       	brcs	.-48     	; 0x1906 <main+0xbf4>

    /***************************************************************************
    * TEST 25 - Try to underflow a circular buffer when reading to array
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    1936:	8a 89       	ldd	r24, Y+18	; 0x12
    1938:	9b 89       	ldd	r25, Y+19	; 0x13
    193a:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    193e:	1a 82       	std	Y+2, r1	; 0x02
    1940:	0c c0       	rjmp	.+24     	; 0x195a <main+0xc48>
    {
        testBuffer2[x] = x + 'A';
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	2a 81       	ldd	r18, Y+2	; 0x02
    194a:	2f 5b       	subi	r18, 0xBF	; 191
    194c:	84 59       	subi	r24, 0x94	; 148
    194e:	9e 4f       	sbci	r25, 0xFE	; 254
    1950:	fc 01       	movw	r30, r24
    1952:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	8a 83       	std	Y+2, r24	; 0x02
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	80 31       	cpi	r24, 0x10	; 16
    195e:	88 f3       	brcs	.-30     	; 0x1942 <main+0xc30>
    {
        testBuffer2[x] = x + 'A';
    }
    
    /* Put some data from array in the buffer */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    1960:	8a 89       	ldd	r24, Y+18	; 0x12
    1962:	9b 89       	ldd	r25, Y+19	; 0x13
    1964:	2c e6       	ldi	r18, 0x6C	; 108
    1966:	31 e0       	ldi	r19, 0x01	; 1
    1968:	b9 01       	movw	r22, r18
    196a:	48 e0       	ldi	r20, 0x08	; 8
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1976:	1a 82       	std	Y+2, r1	; 0x02
    1978:	0a c0       	rjmp	.+20     	; 0x198e <main+0xc7c>
    {
        testBuffer2[x] = 0;
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	84 59       	subi	r24, 0x94	; 148
    1982:	9e 4f       	sbci	r25, 0xFE	; 254
    1984:	fc 01       	movw	r30, r24
    1986:	10 82       	st	Z, r1
    
    /* Put some data from array in the buffer */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	8a 83       	std	Y+2, r24	; 0x02
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	80 31       	cpi	r24, 0x10	; 16
    1992:	98 f3       	brcs	.-26     	; 0x197a <main+0xc68>
    {
        testBuffer2[x] = 0;
    }
    
    /* Try to read more that is there */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1994:	8a 89       	ldd	r24, Y+18	; 0x12
    1996:	9b 89       	ldd	r25, Y+19	; 0x13
    1998:	2c e6       	ldi	r18, 0x6C	; 108
    199a:	31 e0       	ldi	r19, 0x01	; 1
    199c:	b9 01       	movw	r22, r18
    199e:	40 e1       	ldi	r20, 0x10	; 16
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <cbuffGetArray>
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 8)
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	88 30       	cpi	r24, 0x08	; 8
    19b0:	91 05       	cpc	r25, r1
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <main+0xca4>
        /* ERROR - read more/less data than in buffer - should only have read */
        /*         8 bytes                                                    */
#ifdef __i386__
        assert(0);
#else
        while(1);
    19b4:	ff cf       	rjmp	.-2      	; 0x19b4 <main+0xca2>

    /***************************************************************************
    * TEST 26 - Try to read circular buffer into array over buffer boundary
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);
    19b6:	8a 89       	ldd	r24, Y+18	; 0x12
    19b8:	9b 89       	ldd	r25, Y+19	; 0x13
    19ba:	0e 94 99 03 	call	0x732	; 0x732 <cbuffClearBuffer>

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    19be:	1a 82       	std	Y+2, r1	; 0x02
    19c0:	0c c0       	rjmp	.+24     	; 0x19da <main+0xcc8>
    {
        testBuffer2[x] = x + '0';
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ca:	20 5d       	subi	r18, 0xD0	; 208
    19cc:	84 59       	subi	r24, 0x94	; 148
    19ce:	9e 4f       	sbci	r25, 0xFE	; 254
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
    ***************************************************************************/
    /* Empty buffer */
    cbuffClearBuffer(hOutBuffer);

    /* Put new data in array */
    for(x = 0; x < 16; x++)
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	8f 5f       	subi	r24, 0xFF	; 255
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	80 31       	cpi	r24, 0x10	; 16
    19de:	88 f3       	brcs	.-30     	; 0x19c2 <main+0xcb0>
    {
        testBuffer2[x] = x + '0';
    }
    
    /* Put some data in the buffer with data from array */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    19e0:	8a 89       	ldd	r24, Y+18	; 0x12
    19e2:	9b 89       	ldd	r25, Y+19	; 0x13
    19e4:	2c e6       	ldi	r18, 0x6C	; 108
    19e6:	31 e0       	ldi	r19, 0x01	; 1
    19e8:	b9 01       	movw	r22, r18
    19ea:	40 e1       	ldi	r20, 0x10	; 16
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 8);
    19f6:	8a 89       	ldd	r24, Y+18	; 0x12
    19f8:	9b 89       	ldd	r25, Y+19	; 0x13
    19fa:	2c e6       	ldi	r18, 0x6C	; 108
    19fc:	31 e0       	ldi	r19, 0x01	; 1
    19fe:	b9 01       	movw	r22, r18
    1a00:	48 e0       	ldi	r20, 0x08	; 8
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Read the some data out */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1a0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a0e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a10:	2c e6       	ldi	r18, 0x6C	; 108
    1a12:	31 e0       	ldi	r19, 0x01	; 1
    1a14:	b9 01       	movw	r22, r18
    1a16:	40 e1       	ldi	r20, 0x10	; 16
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <cbuffGetArray>
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 8);
    1a22:	8a 89       	ldd	r24, Y+18	; 0x12
    1a24:	9b 89       	ldd	r25, Y+19	; 0x13
    1a26:	2c e6       	ldi	r18, 0x6C	; 108
    1a28:	31 e0       	ldi	r19, 0x01	; 1
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	48 e0       	ldi	r20, 0x08	; 8
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	0e 94 ee 05 	call	0xbdc	; 0xbdc <cbuffGetArray>
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Put some more data in the buffer, writing over buffer boundary */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    1a38:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a3c:	2c e6       	ldi	r18, 0x6C	; 108
    1a3e:	31 e0       	ldi	r19, 0x01	; 1
    1a40:	b9 01       	movw	r22, r18
    1a42:	40 e1       	ldi	r20, 0x10	; 16
    1a44:	50 e0       	ldi	r21, 0x00	; 0
    1a46:	0e 94 5b 05 	call	0xab6	; 0xab6 <cbuffPutArray>
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1a4e:	1a 82       	std	Y+2, r1	; 0x02
    1a50:	0a c0       	rjmp	.+20     	; 0x1a66 <main+0xd54>
    {
        testBuffer2[x] = 0;
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	84 59       	subi	r24, 0x94	; 148
    1a5a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	10 82       	st	Z, r1
    
    /* Put some more data in the buffer, writing over buffer boundary */
    dataInBuffer = cbuffPutArray(hOutBuffer, testBuffer2, 16);
    
    /* Clear local array */
    for(x = 0; x < 16; x++)
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	8f 5f       	subi	r24, 0xFF	; 255
    1a64:	8a 83       	std	Y+2, r24	; 0x02
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	80 31       	cpi	r24, 0x10	; 16
    1a6a:	98 f3       	brcs	.-26     	; 0x1a52 <main+0xd40>
    {
        testBuffer2[x] = 0;
    }
    
    /* Read out over the boundary into the array */
    dataInBuffer = cbuffGetArray(hOutBuffer, testBuffer2, 16);
    1a6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a6e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a70:	2c e6       	ldi	r18, 0x6C	; 108
    1a72:	31 e0       	ldi	r19, 0x01	; 1
    1a74:	b9 01       	movw	r22, r18
    1a76:	40 e1       	ldi	r20, 0x10	; 16
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <cbuffGetArray>
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    if (dataInBuffer != 16)
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	80 31       	cpi	r24, 0x10	; 16
    1a88:	91 05       	cpc	r25, r1
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <main+0xd7c>
    {
        /* ERROR - didn't read 16 bytes from buffer */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1a8c:	ff cf       	rjmp	.-2      	; 0x1a8c <main+0xd7a>
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1a8e:	1a 82       	std	Y+2, r1	; 0x02
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <main+0xda8>
    {
        if (testBuffer2[x] != x + '0')
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	84 59       	subi	r24, 0x94	; 148
    1a9a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	80 81       	ld	r24, Z
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	c0 96       	adiw	r24, 0x30	; 48
    1aac:	28 17       	cp	r18, r24
    1aae:	39 07       	cpc	r19, r25
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <main+0xda2>
        {
            /* ERROR - data read doesn't match data written */
#ifdef __i386__
        assert(0);
#else
        while(1);
    1ab2:	ff cf       	rjmp	.-2      	; 0x1ab2 <main+0xda0>
        while(1);
#endif
    }
    
    /* Check what we read is correct */
    for(x = 0; x < 16; x++)
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	80 31       	cpi	r24, 0x10	; 16
    1abe:	48 f3       	brcs	.-46     	; 0x1a92 <main+0xd80>
    
    /* Congratulations! If we stop here all tests passed */
#ifdef __i386__
    printf("*** All tests for -cbuff- passed ***");
#else
    while(1);
    1ac0:	ff cf       	rjmp	.-2      	; 0x1ac0 <main+0xdae>

00001ac2 <_exit>:
    1ac2:	f8 94       	cli

00001ac4 <__stop_program>:
    1ac4:	ff cf       	rjmp	.-2      	; 0x1ac4 <__stop_program>
